%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: truck_mosquito.pdf
%%Creator: Adobe Acrobat 11.0.23
%%For: mtrawick
%%CreationDate: 10/5/2019, 10:09:43 AM
%%BoundingBox: 0 0 238 92
%%HiResBoundingBox: 0 0 237.6258 91.4860
%%CropBox: 0 0 237.6258 91.4860
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 1180 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.4-c006 80.159825, 2016/09/16-03:31:08        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:pdfx="http://ns.adobe.com/pdfx/1.3/"
   xmp:ModifyDate="2019-10-05T10:09:32-04:00"
   xmp:CreateDate="2019-10-05T10:09:04-04:00"
   xmp:MetadataDate="2019-10-05T10:09:32-04:00"
   xmp:CreatorTool="Acrobat PDFMaker 11 for PowerPoint"
   xmpMM:DocumentID="uuid:e7d471ed-556b-4ac2-a4ac-34bd93226c8c"
   xmpMM:InstanceID="uuid:d61ded61-bc74-4aeb-ab37-e92d1a18d57b"
   dc:format="application/pdf"
   pdf:Producer="Adobe PDF Library 11.0"
   pdfx:Company="University of Richmond">
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">PowerPoint Presentation</rdf:li>
    </rdf:Alt>
   </dc:title>
   <dc:creator>
    <rdf:Seq>
     <rdf:li>Matt Trawick</rdf:li>
    </rdf:Seq>
   </dc:creator>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -91.4859 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 91.4859 li
237.626 91.4859 li
237.626 0 li
cp
clp
gsave
-.833038 91.8697 mo
238.167 91.8697 li
238.167 -.130317 li
-.833038 -.130317 li
-.833038 91.8697 li
clp
149.251 87.5498 mo
1.32701 87.5498 li
1.32701 19.1497 li
149.251 19.1497 li
149.251 87.5498 li
false sop
/0 
[/DeviceRGB] /CSA add_res
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 156.833 91.4859 ]ct
[148.578 0 0 69.0545 -155.833 3.60895 ]ct
snap_to_device
Adobe_AGM_Image/AGMIMG_fl cf /ASCII85Decode fl /RunLengthDecode filter ddf
<<
/T 1
/W 454 
/H 211 
/M[454 0 0 -211 0 211 ]
/BC 8 
/D[0 1 0 1 0 1 ]
/DS [
[AGMIMG_fl 454 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 454 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 454 string /rs cvx /pop cvx] cvx
]
/O 2
>>
%%BeginBinary: 1
img
K)UB$K)UB$K)UB$K)UB$K)UB$K)UB$K)UB$K)UB$K)UB$K)UB$K)UB$K)UB$K)UB$K)UB$K)UB$K)UB$
li*sa!r9nhgFVbD$nXG2?=%&C68gAQ[J-EpK)UB$iVioSat:[c$na\BB4u*k8NSI_\G,=gK)UB$R/R0_
bqAE8gFNac5?DZ=EG/'200-W<[JkdWK)X0s"T.GLAJ)NS"'(]@r.=p"reUOWqrsDY&cfQE"'(]@r6,(k
rdt-`rWN,`Q=^cP!:g*l=-qY=Q2ZC7Pl;*g`/9J8PE_5kN/<@Dr.5$&N77RurWN2u_`nF:!!<WZI>$d8
#D7_eM1^J8K`d'bLl2.h"H8>$OHKO*s-*AD%$?[<St2F:KnFudqYe#)%K6'jJqJZ.KS"i.X7cGgrdt-l
rXA_IO-5fsR@'5$Nf8ekJc^n\q"jsmrVaZ$#ho@9!!<Z[I>6p:%#9e'O+`:GLl71NOHBI("I#+:Q^I`?
r0n.aR@0VCV59Z:KS$]0rU9a0rXJi%RtHBGKnk85K!+hG`VtJg%K?:LOd2?(S=>k0OH57qJc^n]q>1'n
rVaZ$$+Ks;%4cm^nq-Uf$\O=uP*(HSN/<ORO8b:HPE_B"R@B]FSH5=SrLOIhS=?.MW2H5DKn?i2rOVt.
r=&LkK8##8MM6b:YkJ$Vrp0R0rW_f.KGssp"o\]."9S],q>^U".&?J4rWDr9?l[_t_>jlC!Wi?%!<<-$
!rE*""TJZ""p+r3#Q>&1#6"T))-jT8mJbK3"50P2$2FQ(%pcR-rP\\irWDT+KcpL$"pb,5"9o#4!s8?"
!s:$Oo_e[jq8ctaZN't+mf<.`$3:54"98H)!WrN-qum3-#6tM?pB^m,#R^P?#71D2!$5FSlb*3"g8m@B
!<3'!!WE'%&7;j1rJplirW_f.L*Hm-#lY,5#R1G8!rDs"""^JFr;Hfoa^Q7S!6Y?B!TsFi!X/c3!<N?)
!s8]("p>/:#RLh3$3CM?$N:M@$3C5.+'uDArk8:Bg93UF!!*'$!WW6$&R`$3rR_%,rW<&si;;:&gBHBg
hpP=3li7%tnbrFgr1b&&!!<HI-R6t^"!o;u"7lN(!!6#Lg#q*"gtUW?hVR/JhVI#EhV[5ii;2F4huM^3
hZ2O4h#c#2.J!N@3LKQ8rk\R8rVb[DgBHBhi6tU9li7&"o)8Ohr1t5+!!N?&#9tcGclrQA.g6'h!:Tsi
<J0#hgBu`kgYLcFiSieShYuC5i8OXoqr@\8"QA=ti8=Ol"lJ1meR1!#!!53KpZqg1rqHBnrVb^EgBHBh
iR:a<li7&$oDSXir21A+!!<KQ0.,'j"=#HM"U(n,!a100kh?Buh;$iEiSrkW!T;l7i;_d.irJ*<i;hg8
i<A/shUQ$go)JhQR.n#fYl4dum)Y/(n-9%&%i#?:!<)s!-M%-7!U2?7!!<cTOjD;F"7:h7("!$:!!*-,
kQ_V($4%"M&el0%'Ft`e',;>_)ZUlT*<[<#)&O.g'aGQk'+bZ`%0>u!";Qj\rVhEJk5GMWn&^S/o*5I*
#6tVL)[P^/!@m[=rW2:>q#CL/,a6R6p$D>RmY=IOXT/J)":>A>oEY0s&I8XL$j[=Z)BBnC)&*l((E+:m
,5NMh+sA'N*?#e4rYktU'G(r[nGiY+N9pMcrgj#kp@-4b*V0L@#R:SC'HRS^lMpr9oDSXhl8/59";*#I
ch>ZW"7Ct@(?>J<!!E<*$jR()#8%4I$4R=R)BBqE-6!a>)]9Y<rZqOkq^2t%,U4HS*ZQ+?+!):8&JbEJ
!:p0m'ohSYPlC"JlM^q[Q;/D%h#Ica)%d2Y!!!:'`VKN4!r\8dq>^V9WS.7,rpKalr8kXu&d/a['a1-/
^An<@C]2<QU&G2hQs(L5k5b5V$3VFc&-i18#ZSk?rr)utQNm9d")k3orQG0Hr8k\"(^Urp(^0a:!=/_p
!.k4D!!3IErK7*2rWMtb?QB:*!"&iP(_R)S!!lQFq>U?prL*re!!@/>h#6dBg\qNWjhG+>$lBs'#Q+Q&
#m@d=X8i;.E;eMiO8]4VW#57/kPu%m"V>'Cjl>=Xhr!DbrVc]rr#>P6!sBL!rPea>pZ(2ljQ-0pjPL'U
64a:u!!NH0%hAgEXT7;[!>;?,rl+j<qPb@h!"Ar4&S>J7jQ#4Vhr45+rVciq-N!iG"<<L$`Vp):jl5Ca
jl$'o!9*"r"2RJ?"T8<(!s]AK"Te;sQiI.$W9sS9rqlZrqPtLj!"Ar4&o(k=jl>=Whr45+rVciq.f98K
"<EX'bPqD<#5I<>jlY^ar8.P6i8rhu_b(RFr;[!'#S@XP!Pe]\!!*k6\,N]4!ol<Cm/R7l%2pTPpGi=N
KY$gQrqZNor!**"!YTgjR/R6dV113)%KIPcPd7WN9b7C0"pP;;q$700"pP>?$4-V<!!g1;&H`(:":#2<
"pPA@%1j'a'c$lL!!3Lurdt.5rW;1I"7?-m!<s,Y/2m5_"&=N_p%/.`r!`N(!YTgjh#>"d')\SU0a@\"
CR)E?M,+]f#7(VCr<rN3rX&`8%1NaF%06e:mK!%_!!:jS&I&=?"ptYC#7(\G%ho]o)ArYU!!*Ftb5S%4
!p2rSmJmFl#88:62ECOm"&FWdp%/.`r"&`+!YTgjVZ-2d'E"\V0a@\"CR2TFM,4fi#RLkI%/CA3$O@.N
%LimX%1<4!!!!,T!!NQ1"U>DC$O[7J%1Wpa()e/2"8r3#$D!F\li-5L!TH*9!!$$jT*1sn^<YX1iW8<?
nbrRe!rW*"9)%!;^A\<3fVkF[oD\^mr9:G\Uo+-iq5Fb#Vl-MqX/W/#XJhfXTDY;`TS*ORhZ*fb7%L'H
U].5"VP^>nY-P@A\=5JV!!*Fta8Vh4!TZ?>!!$-nT*:mcZc(>MrSm_6!U9INrW2p(r;ZjlpS.ZZrWW,M
W1V!!rr*3$l*7.bWN*&$q5sXs#ct54Y-5"2X.e[J"/:JU#N#Lg#Y:S_Uo18nWi2m&XKJh;\%BAJ3rK$Z
$D!=Yf_tp54So*[>G%S^T*:md[E$kVpYl5=qXOOcr!iT)!DW=Sri?#%q:MX<_t3m,#lNtnW2ZeuXf_E%
ri?C-Yct=8Yck.%rh&GI"/CVZ#N#Lb#tgkdV5XBp$EC/0Yd:gM^;-R,r;Zj*S_F((rWr@_'a=dT2nJqc
rn%,MqI'7%!>iPYrgs)kgK,[+q#KpcrrN*!!s95mB(,^'b:<Sn!"5Hqrl+jBqN2R!";No0r6tWGqJ?*1
!>rZOrdt.!rWCnV-4'SNq#U'g#6=i*!!<rkBCGg(cRf.t!">Xirdt.HrWr@_(C(*Z3PPF?rW2k7r;Zj8
_8lP5rWCnV-OB\OrrN#ur;uiuqZ6s&!!!*:12-.U#15%(!!!G'\,NZ3"n]Q[DmSojrWE#Q`8U[oqYgNI
5lCZ`E:8qg^]"DnLK@AP<rH/"=oqo6?M\"9?=$oB>$"X#B"@X'rWi:_$NL/7UAfcDkPbYX_1Zj;n_jBK
qr,TTpAP*E7/[)dEq%f^K)YHB&)W4G;H6n)>$G6;?!guKAGg$;A-cXQ?s?W/B=mm*rW`4d%0-A:V98e/
rWVu3LNU/uli-VW"8h*"iqE?PfLYr@!H[e,riH)0i/1W7<a/g5?!^lF?t*YYqe,n?#\7FS>ZOa8]Cu("
pAP9mRgoDu%B#Hili-,I!qu6`m/@(]mW/%["Z7YJ:Y,L?rW<%s')hk3!o)<*K)YND"8D9PmelPBn-&4J
md^8CrW`:j!rr<0UrWJ,rW;idr9XCcq!W8^2Yf672(9YLgAUjH!r]57rVus&gn=YLrWDo`mdKu@o'lkP
n*]`Ep&=dd#5k%p!!!J+OoEo1!r)?bm/@(]mrS4]"Z7_Q>MT2QrW<&%'`J(5"l/AAK)Xj1"8M?Qn+uPQ
nb;VRnHA@Mmd^8CrW`:n"98E3WS7?'rq?<oqTGHX"S)No2<t/:rW2^hr;ZkKqQp0QroX1\j\PjU!=Ydq
rr;r(riQ/&qTPN^#4_`q46le@rW2akrW!!#K_kWGK)V>?!Tm>[!!*S-oD\dgrVhEJj8K2Xc(HZonc/_X
li$\Z!V]Rm!!34Vqo8VermUiIk#MB\!=l+#rr;r;rgWlhnWt=$n,NOkIf03BrW23orVusFaH-=YrW;qS
#6"T($_dRlrW2rqOoEc-"7qm&"n2Kn!IjtCrW26rrVusJbLlfGrk\R8qMbaZ!!*M'oDSdgrS%7,rWVq_
+9hfGnc/^mIf0'A!U1<t!!+XpUAfcDp\k6kNsGXa!=YgrrW2rqV#K]Zec#XDFpdU:!FYj%rW_Ni!!!$o
rRLn!rl"d:h)#!0!=GChrr;rKrf$gXp3R2D!;$6l@/Tm##3Q<n!!5spTDjHAqYgNP2#RCT$D$efs8AYj
_YsW2Igk]E!FYj%rW_Nn!!!'trTO64riuG'h_tE5!=GFirr;r^rdt.ErW2@Fo`,$u$O6M/!XZF6qYgK?
rVus&YHe(Yroa7]V@WV*!=GCprr;quric;%lo=\=!s&Z9#Q+Q'$G$'1rW(:D!!*>0qYl*GT)Jbj&H)S0
$D%(ns8DWiK)Xm2!UMi?!!<9/$jcb2!XcR:qYgK@rVus*[)Drqrm^oJXV(L3!=GFqrr;r3rg`rhl[0QJ
!<*!0!WsHIR&Z6`&H`"HDrputr;H`d4T,6[WfI(:rW.r_r;Zm+Sc8Qds87`Qdf'=8Ii81b&-;k6!s9QN
T!4Ps&H`"IF638t!UrPV!!'%Nrdt-crW/,er;Zj*SbrEdr6kS$rW;M>)Z9XI!s/N+"<_0L[%(nD!rs'[
k5,&XnOic\!<K9qrdt.DrW/8kr;Zj*T)8Ner1*cPrmguLrTM&r@0^7XBPMI(_=7I'"oGfK@\N&^rW/Gu
rVus$Xjm?%rl+j<r.>1O!!++Qa8V%s!r_B#ra>n@EGTLpF)f%crr*)u\8YoOl1t;ZRh>W"!<fQsrdt.H
rW<"R#5nN&+M<j9_YsW8lGNU0#A8-qE-HB@nc&Lkqm^TSU[.aT!M'o'!!*8,kPg)4ZMjq'M[01\!@#21
rdt.1rr;omrW<&_;>gIq"0Jj-K)Y!5!UVfC!!,F_V#Hk_s8Dfn!r_C`r;Zj$Y58-Lrh'/jmQ^XM!Wb[c
mJ__:dJj1EqYgQplW3ra!<o[Frdt."rW2FPr;Zm"7/OImK)YcK!r]\Mqu?_tNrG":!ML5+!!<blrr.NK
[Jg7+]H$kM!<K7Qrdt-drW/l4r;Zj2jN7CQrp0ObrOj3L!!*2(U&KZCq#1;n)>sO9']kPXli+En!r\;c
r;Zj$YLNQ'rl4p<q^h[G!Y9kU`r:Shmf!:dPQh!c!=,m$rdt.IrW2pKr;Zm0L%g].V>^PpPm.*d!=?*q
rdt-TrW"VM!!3[dpY#OtrpKahrVZE`qu$*c!r\;dr;Zj$YHe(Yrp'IaqhbRU!!*tIjo,8WrqHEe#Pn2l
qtg0bq>:0krRLnDrWW8up\+L^o_npjPm70e!=6"-rdt-CrW<"U"oSE%)nbM9qu-Tmrq?cpq"aa^qYU0d
q>1!fs8AShg\qBTr:fp^r:KsirKd`e!!*D4`;YAffDYjLN!B4\!?Al9rWrDqp\=OZq>0seqZ?WiqYU9l
rTO6DrW_\jCgNOOq"XjfrW<%d#lO`("0R[`NrB+G<s&=#!Dr7arosCont0Z1D01)OK8>YUQ&pKTf_b[I
"3Isqr3QCDrW_eoCgNOTqXsghrL=2m!!*>0fD^C$`;Ti)>QXj(!ES^PrXn^oDJjK=IXm66Pa7StKTOsc
rr*#A[Ee^Jrdt.KrW_krCgNOXqt9pirLF;o!!*A2U&KZCqYgQ_?3C-+!EemSrXn^pEH-)HJ:icBQ^=#%
LQgNjrr*#A[Ee]irp0R-rWhLj'a"FG4i$ai!r\Ysr;Zj#Xjm?%rl>!=j#[)<!GD)hrYsg63tVPr!sJl6
#RUtL%1<CL/68:!<$2l#9@<V8KDkl6#%\PP!"M?9p&5$kTFCc!!=,m$rdt.JrW2%?qu?b5p?;Jpj*!Ks
"9Sc1#7(YE$k3XS#n8RnW0^R.'I6B%`;[=H#O,q=!rrg"b4Y`8rLsc"!!*A3kPg)4[/L*d3rAsYD>*2m
$fcIq&d/=@"pbJA%/p\9$k!@O117>W=WeD):"kX,nGWLfo0N<T!Yr-@pAP-kOUD$e!=cNCrdt.7rW2(B
r;Zm*Q2LX\"Q?epZF0\="h(tR]=PKN[0F.S^r*!"#j;6q,*p'V[^<0;XR>uErho_srUWAS!!3nDr:^*k
r0%Ne!!*\DqYl*GU&G)S5Q(Q`$((ShrY"5$[C*KQ\@B)_^V@In\@K/`_$%ZsW\FhD!"('D`PB*qZ`gM!
qlB_PrW<&j6N$lc't4&6rW<"_$iL&+'>DEaK)XC$!TcTF!!3Inr;QZtj1Db/rOEHN^V[h%]=GPb^;Iq4
XZ$UN!"(0Kahtg'['?e&qt0lOrW;Fo"9&9%,.RRHrr2ltlo4hB!F+rOrf6sYk=>IN!B\g1rW(LO6lH@<
r<j&D%hTBb%1<RP%MKNm%HRQs%MfWc$O$Y:98g0lrlP-@mUl\%!!4CWr:^*jm6(:H!F5'Erdt-frW;:U
!WE'"5hH#7"kuQg$O[FC%Lip]'GM2l%M''_'c.f#jT#Ap)&*Vd%LNFF9T-<8rWN6"mqW++!!4FZr:^*j
mQg[M!F>/frdt.GrW;:W!WE'"6JDG<"Puco%1W7H%1s9i'bh5j&.fKk(`a7N!"'AZ(D@>f#R=(^[aP0@
rlk?Hr7m)f+*j"Ap&4u1%/^)+Yl3)NK)Wgi!pND[rW!.YqYpHL7fg^3"TSQ+'4fdQrW)j#i/K`=HC+?u
rW.*Nqu?c&rLX"?rr)ftl;@Z^!!\>Wrr(bK!QY6D!<a*Mg!Tf0rWiA\OuXV2SG)XT!I,.R!!32+rTF03
rj;Y+lVmoa!!\DYrr(eP!Sd\B!!E<*'kl9irpB[fqWR#&rUp-jj!O[(!Dh[Yrdt.7rX8'm!<<*DfDbdC
Hj0!>)?C9r3^,br;.!jGCiXH*>!Nl*!!!'+&/#ETmf3GUK^JX!rhTMrqW[,(rUp-jj=C-.!EA%Rrdt-C
rX8*r!WW3Ff`(mDHj0!>!<EQF-8mnI5YYHk@q]aq@TGT+!<<*$"q;(N"7H3l6%nY%Z2WJV"T.KHkPb)Q
!Tl$4!!-3^_u>8efDZ0G>QOm*,M<"pp3d,5!#Z.i1c[T]9Nkh6B5D9j<]^ur!!!'($k<RGmf3GUK^JX4
rdt+OrqVZWqu?_eN;ek:$gh+!!!.0=rr1e8!:p16"UcJPT?lN[kj.a/o_/"Qp@\"?]OWEBAt69?WI\GX
<ZLZ1"ToTh^%qWIrjVk.q3(mX!!&V@rdt-frX/+%!WW7Cr;Q]Q3V!.n"UcDJRa'gQk3DF*o_%qPp@Rn<
\R?d7@[FC0V12oT<ZLu:p](I"(k9<rrK7*HrW;q]!rN#uTqD=9rqcU$n7;Y$!Hn>>rnfa,!"B,?+&86J
i8j"an+$#Brq6oqn`RDi,q<AjZ*pHX@TQSMnc/gq(kKHurS%8:rjr(0f09*4!!L^KK)Wgi$/7ZE!!7cE
rp+1f!!`NNFIU54qYg$b&H(tAcKb<*rVZEao^g:./->\Kq#CL#)i*+,rp]mffKoE8!!\qlK)Y`J$/S#L
!!8,PrpX[o!!`QPGb)_6qYg$b&H(q>bj,''rVZEao^g:./HYMD!s]j)gt2P'rW1\=qu?^'jSjc1[/LBh
7K<DiP4nnFD"@W3![iAf_WCXmoDSjimEEc_lMLPYr:fsXo?:;h!qQBo#p#&^U&NpJ!r]&*qu?^#Y5X%P
lM^gp)ZB^>(S^)1!Vl^%!<E6,+[r!XpAEnK&,kL4#no$b;H6at<(ntS!W<!$+$Sc]rU0ZMrW<&!%f?;,
$2=FNrh9;l]cR.Q"<FN*E<5k8#lt&."s-7/h=pjHroF%hrSr>6&hZXJ:Jae\7OniIr;ZsE53;V=\Gj\N
!r]22qu?^+_>]&cfDYfd+T;?D+L($M!Vl^%!<E6+*D!*bp\a"L&,kRC$5+s[9MA/S91139!W<!$,<k5b
rIY"Lmgf3p!'lJANrB#+qu?d3)$0^:$O7FS'0KH0BR$N6ptG]M`m3l>oD\@coC(J3:([='!t9V-p<<NG
rW2I!qZ$U`eGb(!`;T`hqu?d7*<Q3?$O@UX&is*(Aosm*ptG]Kc-PYVnalAOnc\F8U.Gjm!!<^[eG#:.
mf!7V&c;V0!Cra\K)YWG!&FHP!ZE3`rW!<3)[m?><afN[Uu(n#rWU]rlLFK;rpg3[fq:hFqu?g/Ian,L
rp0QqrW/Jkqu?a7][?_1rlG'=Re6XfFIS2Pg$n_0qY^<@rr)g!rV>2^$2ac*#qLSdPlC4P!Ls>k!!*tN
S,S$=rr)qe!VQL#GbL4_fC/D+q>C3;rWN2qg1:Qf!!<NXK&YVcW;Zgf"oJ?$)SP52K)W1W!La)`!"+%K
Od+Gcp%J4ZrT=+ErWN2pfjkBd!!<QYKArg.hu3Z>2u<RU4lrjGK)Y-9!V0Oh!!(ZhrWE,M1BmUT!b2!(
o)=sS!U;iF!!,7Ep\odDU](;dAG-!(!nm&Aec#^Mfeip6qZ$\-q>Iu*bl.Y/5l1N^4lsNZK)XI&!VL:&
!!*5X_u9f;g,9*8qu?g!AGQ1ZrW(IK(]477!I=6orfI*[_AMqG!3<s8"5B5=*;]^;B[6A!rji"/f,OVf
!Wmc?eGb(!`r6"Y)YF(1ZHW=ArWD,Q;'5Z8!bfmRRf;dT!SJLk!!34Mnt,i4rqu`raW'mQ!4K`C"6?7V
+Su-?B[6A4rp0QrrW1=Qqu?aJh9c.QrlP-?^_ZSC!Di"'rqQHqp#a,G#5nN'!\$s4rpp$hd16'S!AWN$
rdt+Orr0hRo`,"llbWQ'p?0AL#5nN'!\$t(ri,ktd1?-T!B/lrrdt-XrW0tUo`,"mleVR%rWMrY`eas!
!!33N:oaNQrW2u*qu?a"Z)mqVrpB[dqPb"u!!4n1rP/=6qmTE+qu?dRf_kIBQi7$a[ep++"Le"&K)VSF
!rB#2o`,%KhYm!Dci+%D]2St3!!4q0r4r<VrW2u-qu?a$]"e5rrn@>Qql^Y*!!5%;rP/=6qn?&6qu?dR
gAHp/!UO1l!!**oM#NP9!pjA!o`,%Ig\nkc"8LYi&c;V06.FB_])D`uAc2T0!`@AEK)Wgi!psY(o`,%K
h#5OtnbrXchKBS1!!,O?Sc8-X!Ujb$!!*1$S,S$=rVclcC'=20!]Aj5^A\60i-?"6!!,R@k5O]G^A\34
YS$g6!>(gIrdt-lrW1+Mo`,$pBCF"BoDSjil#d.-!!*F0Rf;sY!r]G>r;Zj3TpYh2rW<)A&G6#)!c@G>
rWE)`G6IjE!=W2mri?#"rO!F>!!*e/iVnH.\,HEO&G6#)"**kero!bXr9JP0r;Zj->cn"arW2gqqu?aa
iN)s0rpKaerE]Nu!!<?kh>Oqa!R`Co!!"G@rg<Zcq-!Uq!Cu5Crdt-GrW<%+"SMft#"mhPnG^W1!R`Fp
!!"F_rm(KDq-3as!D;Lgrdt.(rW<%+"SMft##=1V])D`Y.Js/G.$"9/r4NsJr;Zk:q2#$5rW0YGp](Et
"r1[s!;u]mrVZTlj8T#Uli$qK:](1m/^s^3rW<#5)uK[:F8=5_K)Wjj!PTHH!!NB0*,X:)qYpHkr;G[T
rVc`pmf!7O;#C:n0qJ=7rW<#7*;oj=!I+@/rdt.KrW0_Qp](I!$QjEAr;-Ekr;?NRrr)f]rW2:]qu?^Q
k5O]G^]"<*4TYH\!/&PqK)Wsm!.jkE"pH&<aSPl6r;I&g\>QXShqZcApAO:U$2a5\q>L-]lIY7srpp$i
rQd4r!!#!Irq66lnj3EU!!%kBrdt+LL%bQO#q/`squ-KkrX.u&W3je.hq6u^rTa@gqsa+NrVH3Qh!48*
!r^M%qu?^[j8Q.Z!qSh^r;Zj!N8X\erj_q-L\CcQ$8#K/qu-KkrX/#(Wj^46iS*AcrU'U`rX&JlnG<+[
p$:K#m/@(bdPLe$!'m[cj8K,YFpIpF!<J4\rdt.;rW/)]p])0:15bZ$m*GG)rVY8,%g*(U9/\+WN8XO0
r:U"/qtg6frVcZ'90"su`oXWh,;N6Ar;HQdo(i.ZrVcNj!rJ)_qu?^bpAUN[!r[<Lqu?`uQLk*-rh]Sp
PQCOZ(CEBjoDS()p\k'gfK'TG#TQc*.Q<+>q#UBjp&,p.qY^6hrVX,t3B0@Fk.<`(1f_furVcE[q>1!e
rV6?nqiM'[!!#X,rm:WGrHAYI!!*+g^&EW_g\q5@!r)a5$V-ZXrU/51rVcZH3tVN"*`kTW2hg,aqu$-c
*W,^2qu-Kk[nA_A6H80&4=`9icM[Y>p%%tUqu-KgrW)frOp1a`!)AUS!UN#L!<)s!+R=g^P5YKW!r)`u
&:E^?qZWcF6D:)opAc!7.8+6-XLQ-hbg"JZcH*PbH?*k2StU&o!"!kAJK?72?Z=$^qYgTqpW+NT!!#U>
rk8:3mQULJ!@I0[rdt-jrW0)&p](X6KBiF4W%_#@Tl]r.(Bl'Q@>1bj^rOU@bfe2L[[)&QCLEa-DtF#0
G6jgp+!a6]FNOFVrWE,nas[&d!)K0boDSdY5PkE]..*K&K)YcK!O;h&!"'Bqli$^]1fL*AF8#YA"X6?A
Kr_Vs`lZC&b6c1qQ#peX?Cmj/oDf2AT8=[76XY)\qtg9orV4PeqZ$Upk5O]G_>XN6WtkL3!27X9K)Wsm
!OW%)!!YO;rVP;A!Up($!<iiF*@<6c/1W4s)@QcP!s.ch"TSN('X.B0rW;DG.f',F8t,bRrW<#"(&It2
TpG\0rW0e;p](L\g&:g';?H=f&-2n@&fW)E-n-Pm+r:Uh!s7`f!s'.?qYL0ml]3Un!!#mVriZ5%r3$n6
!!*+phu86,\GcNK"S_s$4kfl3h,XXH!!WQ4&K2l@-N5@t+VtIf!Wi?%li7+g(9mZ3rW;GK/c#GI;m$&[
rW;n2!rN$!!nO@MK)Y6<!W@cI!!QQpr7YH\`rH2C+3=BYrWN2kl4sEr!!#^drgWlgqJQK6!!*2Qo)=7?
VZ$VpN;!;U>k%[HAIS#-g&M6V"!>S]rVcruoBI(lq#CCl_#Da\!r?m>qu?a"f=_*7rnRJRrJpUP"^UWq
h.R;>!!E<)+34<XrWW8mlP9L$q>^LoOT#=W?ig6,!WWOYL&R>9!r_.Gp](I&D=dOm&GcA8$4@1I#RCY>
"U"o0!r`0$!<N?$!!!0$#6=u1q>gKu!!<*!$Np_B%LrXD!WtUGrVlcur531NpAb1Ye,I)\!r?F.r;Zj+
L<fdMrlY3ArT-ND!!N[Ko_G-mq>^d/%LidR$4-qBrWN9)rW!$%"9\c)!!WW6$4-tA!W2p#!s]&:"TAB'
!=0&B#S7RO!WrQfir/lU"8p2U#PS2u7\0PNrW;q-!rW*"%#LANK)PlOrT?`H!!N^Oo_G6rq>^p4&.T*V
$OR1G#6kA8rW!B0"9ef+!!*<3$O[7F!rN#u"o\c-"TAB0!=9/E&eY?L!WtODrVlcur5ig^pAb1ck5O]G
_>XK/=Sr.".)sI0K)X$o!rS2jq#CU07'QO[GR"'G%L+Y[V50iZTq@sJS!oe6rfmSPR$a3=PlR?RT)tRP
QMd!JQN!E^R$O#&QCOYEWMsM5&HW/Eo)8Oh^FBB[!!#-MrqHBmpK@Co!@l0Ure17Or0%*jq#CU39sjch
I0]ZM)$VslWi)\iUSFKSSXl:?QBd`'S",e0Q'S'AUB@3\Q^7W9!LB2RTF[NXQ'IZ/V5UMtBFk7N?1Imm
!l-Akp&G(Zj8Q4\!V]dq!!+XnhYr-+])Dd/PRdKh"r'tEqt,@Dqu@T>3MW[SVP^2bU7n3OSt)+3Q'n/4
Q^3r(T`1biUS!p>(RC>PQCOYBTU_=5QC">CWirR=&-E/CnbrFg_(Q#d!!#HiroF%ZeIh`[!<IDBrdt.=
rW2.Jq#CU"3eQbskt1dQ!?R0HrWiDmJdDMbHh[O=!Vf1W!!"qNrgWlff+e/`!<Ic@rdt-IrW2.Jq#CX#
6]LI2ktM3W!!+7)o`!_H#Q=1D$3UZ\p\t-mpe:;[!'A!qdJa1!(]==7!JS,aK)XU*!TuiG!!`NqPO8>6
:'(:n!@*oXrWiDlJI)DaH2%=;!r,RmquHQn!'QGC!ETR*!!*>QK`758!KRK\!!Y6rqYe2K!<)s!(VA&n
$i@Lg!s9.2qYpKm`:Es/6.>hIrW-41r;Zj(e]n)FrlY3@OU1^^"Zsa$rP'9L!!*qKd/FIN\1[sf&u,7%
rr'n>oDekYSc89\!F?35!!*DXQi;U9!reAip](I]anu%N)uTa;)8+>q%/[Oe!s9.0qYpKmb6@M<!(H&L
li+d#!R(ZE!!31.p<*AdrltEC7fiDc"p]VKrU*tnrW!!#D=Q$Q"8ptW#RCM7-I2ShrUae%!!EaSN@t>2
!!*1iRf<*]!RClH!!311pQYZ1rW,^oq#CU*J+NX+=T\R&!Wd60dJaRPgK+[a"=;=krr)M-r;Zs0G)eB[
r;Zj#RcFCNrW1CLr;Zm#AbY$[K)W@\!Digm!!Wa[oDS#W!WE'#!HI\grpp$sr7b9Y!s9gnrVlcgEr>t@
%X*mm!W<!!".QFlk5GDP=Sr.#'Z9mIrdt.=rW#[g!!WjQli$:-#lO`('unW"!pk"=rW<?ajSo/Wh)#$1
"T`Q1r5:&_!!,4ApAUW^!V9Lm!!3nTrUBf<rho_q;Y^:s%!1b5mt(iD!!+"_o)@PG!pXe:rWEEaj8T&V
gbJd."T``8r5UDf!!,7D_#Dg^!VBUo!!3qUrOVu[rn[PR<qu_"%<Uq7mskW@!!+(ed/F+3E=VsM"ukTA
rr(Y,rW!$$GOkY4aY3Sm!C,\/rW1@oqu?_M!;V9HPl:Ydq>^^%DWgukNt_Km!WWD'd/F+D]-@4V#7>5=
rr2l=,lRcI2sC8?pM0[-!XkIne,I/^!RN:n!!.fLbl34nb5MBJq>^^%DWgujN"Q!g!=5gSrW2o+!$V=E
#7>5=rr2l9,5qQG2sL>@phTj/!Y(^sSc8?^!RN=o!!.lNQMuL8!WH[,!!WOCkPb%3&cD\1$*MYS!rKJN
rW<B4C%_K)rPg&\!!P=Hrr2\.rW!!0T_dgMli+g$!R)hf!!+V"aSpejc2I]Qq>^[Of)>U'4T,6]!C>tt
rWW8jGQn6P$j/E(rVlfoYS[??#HIe&!VU4+!!4_.rL3`]rW17hr;ZjNeWTobrW-d7qZ$dPeboF%48f-\
!CZ2"rWE,gFpJ!L$T>g!rr2ht(B=F?X8`)!p1XF*!\WF0j8Q:^!R2ng!!+b)g\ug(])D\Lq>^[PeboF%
4T,6]!_2J3rq-0lrU=t7rW<Nc_#=93r2US5!!fS(rW2_,rW!!Rir-"Yk5GD,-N*oFDu?I2K)Y9=!,_Q4
#&s;8rodPfrW!!*MYGNt!r^\6rW<32MtR)K#5<BK!!"V@rr)rf?2ag)Er,J.Sc/Z:.K'5IFo:\,K)V\I
!-J&;#&j57rp+%rrW!!+N;2rBiVioWe33d6!Y1([rr*,rFpA!I/b8o?!V'Or!!.<?^])^]!RWFr!!.?B
\Gh*Zh>RD"q>^_<pAY'WAcr#4!XXn^dJa4Ge33d5!Y("Zrr*,rFU%mH0(T#@!V0[u!!.BAOo>C1/H,VN
,gcLArfmB^Gl%IG#H%Ctrp=V2rW!!ali#61!rTe[rW<BUec#LHrQ6Sg!!+kOrr)r^:]:=oGL?E*rW1P&
rW!!Jdf%AgK)Wpl!.aqH#7.1'rr2A5&cMb36L=ZurW<#2-N4,Q.b"@qrr'narVusSqYpHplW!i`!.C@9
pAP*E1B%7T.b"?]rdt+Mre:4L#7.1'rr2G;'`J(67.'s#rW<#2-2muO.b"@qrr'k_rVusSqYpHpm8s8e
!.X)/li+j%!r^7hrVusunAkN[rltEBDu0M8-.`(p!pj=trVut<p!E[Ar4XK[!sSd5o)AUiksY^R!!+Y<
rr)rZ8,`JgBUJeqrW<&E/,fML=n.XRK`2!q!;lft,h;nn!psY)rVutFp<`dDr4F<Y":&9'rr)u_5Q^ob
!A*[<rW21UrVuq:iVp+]!r^P!rVut&n_3torjr(/Hi!dD-.W"o!q0q0rVutKpYGi@rWiA6,m+5S?1Ipn
!p;cLrVusMmf*1dktq?Z!-,(=kPbP\Qj`ln!I4R=rdt.>rW1@eqZ$XWjSo,Zk!].J!05D)$iJ@9!s91-
qu6TlV#12n-/nk&!T--@!!$9rrgs)jr1"5q!!.TJmJ__:W;ZhK,5V?@391#;!Tc]I!!&ASro*har6IS1
";7:%rr2bdqu?aDir8oXi^<\F!+inDeG]^NT+1i$!J13Yrdt.+rW1UrqZ$XVj8T#Yj[8tH!1_C7$iJ=7
!s91,qYpKjT)8Qh-0,"(!TZ`L!!$YorW;d["TAB&DuT`frg*Nbq4JH!!!,@Jrr)ra;>gIpHI)QurU,1D
""DCkrr)4nr;Zm+B_;<'!Sfa8!!$!Grk\R8pJ(nk!!%/`rdt-nrW;nk'`.k25Ni%F!U<GY!!%SrrW<&d
I0^5a.*2AdrTdhh!!3I?o`"gjhELo=!*Ylkp\k6h<!E7$!-j_,KDklH!N-_1!!,=Irr)r`:&P%lLX5r-
rU,(B"";7hrr).hr;Zm)B_DB(!T-0A!!$?drp0R%rW0_;r;Zh0`r:Shci*t)1]%.R#&s,3rW2\+r;Zh2
ci++Hnp^oJ9EjVXrr(G0r;Zm[ao25<!S]R4!!#oarqcTpbQn(H!,%DmLAh;82ZNjV!!3@Dnc&Lgok+.&
!,^']$iTUC#m<oarVlcG2uN^X295[prW1e8rVupsiVp+]!RqDR!!$]crdt-^rW2(BqZ$[%E:Nr,!VBt%
!!%#orq-0trUG7@"A@qVrr(>)r;ZmUa8Q#:!Som;!!$!!roj=^p)Eo0!+Vf'K)YB@!rRHKqZ$[Mci!eA
!Uj(f!!$3KrX8G$-j'`spAP!h]cm@T!Wd0-rVciP3;rmX;Y9tOrr2l/rW2d6qu?_,m/DV9Wr<(tJ->`L
!\_jsrr)rd;uH[r?LRmPrX8D!-j0itpAP!h\f^nO!Wd!'rVciR3rT*Z;VM-LrTO72rW2g7qu?_,[f1mX
i;NfUK*;&O!\_jsrr)rd;Z-Rq@*ef[or9DB#]o_<rr'ALrW!!#BCGfu!Som;!!#pNrr2l/rW0>0r;Zp%
T`4qBrg3TbbW#@u!H[r4rW14brVup&!27d=%/[[s"TosRr;Q]mS.PZ"!X!oFrVciS4oPE];VM-LrVQT2
rW0P8r;Zj#Tum:crltECc8k_$!Hn)6rW1.\rVus+U<rlAqmn`k#Qu?Ur;Q]mRLfAt!Wm`BrVciT5Q1W_
;VM-LrPed2rW0\=r;Zj#UQb\1rW1;+q>^P>p&4jjaVt-Y!=bgNrXA\82[':,Yl+M"qj7lm!!34IpAOsk
i'I>B!)hnWp\t0jq#883!1`re!Bp.rrdt-srW<"K#l4N%V>L8k!rIrZrVusspsK'GrTIDj!srr4"o\H"
piZrB!!37Tq>L9ngcGE7!)f3`qu-Vi!W<!!7.u`AM#IJRKa@YXr;Zkpqu6QrqhYCR!!-$ndJaURk?&#n
$?,8/rr2\6#Q=])"+^4GrW1h;rVupriVp.^!Mfeq!!,Xag&?U&^A\33LC*eW!N#\mrW;tQ!WE'"<VYAK
pAPO"k>qok$#])-rr2\6#6"T(!e:%ErW1k>rVuprX8_>^!0mE^!=#j(rdt.ArW1XYq#CW%r;Q]oh)P?5
!3jiL#Q)4R!s9a]r;QZsj?*JB!!37VqYgBogGo04!)iIgTDehTr;Zj'[-R^Cri?#!faRZV#-Ih&rr(P-
r;Zi%mf)8G#Q).Q"9]p^r;QZsjZinH!!37TqYgBogcGE7!)gQ1ec#Q5r;Zj([C-!cro*hWg(!iX#-Rn'
rr(P-r;Zi%d/F:I]G^kS,/*pRrW;1J!r`0$",$IKrW1k<rVuprPPtUN?i9s*6/DP>K)V/:!1ilb$bcN<
rq_TX!!!$him@Z/pmMKk"$PE<rW;eL$N0r+#.+:,rW1b5rVuprdJh&_!Us_"!!,UJaSpejcMdg7q#Cg)
^A\'1qM>:S!!5dPd/F1CQjNs!!Bf*8rW;hR%K-8.#.4@-rW1e8rVuprS,W6_!V'n&!!,aPP5^17!hB>l
qZ%$,^]"02qM>:S!!5jRd/F7EQjEis4PKf6!r%`er;Zm'[/Kt&!Soj:!!#pXrp0R'rW0qcrW!!%M>,!g
K)X3t!T>@#!!+D0rr)rmDZ0V;&"31=rWi.S"p4rtir0&ZrR`Lq!!4S"rVc]rfJEL,!)f3`r;H`;/cG_O
"H<)9re^UTj!ss,rVusGkl1P^pM'U,!YCptd/FFHL^!tb7cF@GrR`_"!!4V&rVc]rg,8j0!)heTZi1!I
0`D%R"HN90rdt-arW2(2q#CFDkl1P^pLsO+!YM("g]$pG$hfA\!s;!Nrr2lK0DkeO/DL.%rW1_3rVupr
X8_D`!W%!<!!3P;rM':Crq66kW!iG%!Yq.#rr)ri=8i1$3;*6srX8FT"p4ruj8T&U]F4W;!E/LdrW1Lu
rVupro_tQ`!W%-@!!3S?rTjH7riH)"Xpt4-!Yq(!rr)rh;Z6Xt4n\dAro<tcp4NVQ"@qJNrqs;6qu?au
o_e[heLgb#!)gQ1fDYjKIKBEJ!=c]Krdt./rW0;7q>^R3R/?m^!V0+e!!5FYrQtNOp4NVP"%M;Lrqs86
qu?b"p&+dieh6q%!)f*]!r^aVr;Zj)Z2OZRrgE`dV@!,"!Y1+Yrr*3$bp*2g)pSB]d/FFHK`qP\8E9^K
r4NL9!!.<=r;H`F./j2H;UPK_rW<&Q#lO`($FIkQK)X*q!NHM(!!3[fo)AUmr6$5`!$BM3rWMqI"U"r4
8)sUJr4*14!!.B@r;H`G.fKDJ;Od[_rW<&Q#lO`($au2sLAh:X$NL2*!!3[ho)AUmr5p,^!$fk9rX8FP
"Tnisj8T&U\-i-6!I4G<rW1M"rVuprjSnKEaSl5(;u?Ur"ffN?K)X6u!qq'GqZ%$_h#76OrSqPp!!d94
cMe(BK`qP\8`]jQrqsS@r;Zm$Sbr?a!R`Cq!!#oarr2ltkuIW]!=#Wcreg[VpOWSH!"Aofg\q-NrShAk
!!dT>cMe4FK*;A\8`TgLr4EF9!!34iqu$EodO>(p!)heT[Jg3k=8W%!#Hl\XK)WRb!r%ERqZ%$ah#76O
rS_8i!!d`Cg&C^E$hf2V!s;-Trr2i.$iL&,!h&uarW1FqrVuprX8_Ga!Pnp:!!*4uU&KZCpAP-aAHM`/
!I=J>rWht'$NL/E_u7m[$hf8X!s;-Urr2l3%/g/-&&eDDrW1FqrVupro_tTa!Q56@!!*4ulMcD7Xo8Cn
B*.r1!I4D=rWhq!#ljrEaSkK)j8KG[K*;A\8E9^KrOiU;!!3PEr;?NpdO>(p!)gQ1f_toi#lFZ'"JrL)
K)Xg0!qU..qZ$YBq#:6tn6?5!!$0A`cMe4FK*;>Z8E9^KrOWF8!!3MDr;?NpdO>(p!)f-^!VShV!!*P@
rVhEJRf3>^$Mj`,Sc/QdoS3SK!!,.Frr1:D$hoD[!s;'Rrr2i1$iL&+0]W'0!R`Cq!!#pErl4p<p-JQU
!=cZ]rdt-rrW/f&q>^_irVlceK*)#P!C5tqrWMqJ"U"r48)jOIr4<=7!!+V.qu-WE./j2H;Od[`rW2aZ
qZ$X+]TN2KrW/l)rW)ls#+kemrUb[CrVusdm*5M;p4NSO"%M;Lrqs;6r;ZjIi;<KSdO>(p!)hnWli,$*
!Q6#U!!-L#`;YAfe,BAF!Vud"_>XB.W>YX7!ClG#rWi1Q"Tnisj8K/[r4NL:!!,LUqu-WF.K0;I;OIFc
rr0nYqZ$Y,ooB$/rW,n!qZ$g$_>XB.WYk[7!DDk*rX8FQ"U"ruir8rT\I/98!C,uKrW1ItrVupriVp:b
!QH2X!!-^)fD^C$_#=@6"8`'&!Q+g7po>81!!,pbf`(UD$hf5W!s;$Prr2i*$N0r*4mi.G!RrY!!!#ot
rpB[cq/H01!;3#aK)YND!R`.f!!OP0rr1e?qu?b&o$..Ap4`_Q"%_JOrqsD:r;Zjjo)&Cee11Ft!)iIg
V#CDkF8>k:p$)I-riZ5$gEZOp"X<10ro$9C!!-R$li,rD$hf2V"9_6Srr2i+$N0r*7.C*Q!RrY!!!#p2
rn@>PqK2Q6!;3\tK)Xj1!T,:$!!OV3rr1nHqu?b1p!*IDp4EMN"%VAMrqs85r;ZjbnGE1ceLgb#!)f0_
!VJeW!!*1!qu23HS,NC9q>^^?Wr2kqcRJem!X=;Prr1:D$hf8X!s;-Urr2i.$iL&+;>9te!RrUu!!#pE
rl>!=og\iZ!<cB@rdt-srW"DD!!XFBqu6T?./a,I#`8?$rWMqI"U"r48E9^Kr4!+4!!,dfqu-WG/,fMK
;Od[arW2^aqu?a$<0.$7rW"MI!!iQ)*3/r9rluqj!!3Icps&dGp4EMN"%_JOrqs54r;Zjlp\XpjeLgb#
!)hnWli,'+!V8#C!!+4S_Z#/deG]G*q>^OmlMgb`fer^.!@HdLrWi.N"Tnitj8K/[r4<@8!!-@&qu-WG
.K0;I<1*XdrpqlB!!+:WN;eb7!'0lU!)EUZrr)rM1]7:S/)neP$hf2V"9_6Srr2i)$N0r*?i9g#!RrY!
!!$3]rjVk-oJHIG!@>M2rdt-crW#%V!!,m[rr)rM1]7:S/`YI^pAPHnK*;>Z8)jOIr3ct2!!-U-qu-WH
/cG_M>H@bjrW1juqu?b0n=T]3rqHBl7f!)cAb,j"#OZ.*!!!Iiqoo$Ip4WYP"%_JOrqs>8rVus,Y58+u
dO>(p!*]$oV#CDP+oD<@B^t<cK)VqP!)<:i!Ft^"rWhk$!WW31Qi$(Ij8KG[K*;A\8)jOIr3ct3!!*M4
qYgND./j2HB"n8urW1q$qu?b3nZr.GroF%Y;#1.mAFfa!#OZ%&!!!Ouqoo$Ip4EMN"%VAMrqs/1rVus-
Z24G#dO>(p!,@o#!r7lar;Zj*_#"%^rgWle=8DmtA+]d"#Pt5/!<=h3rVc`CrW<&dD>jVA<pK\`r4!+5
!!,(9qYgND./j2HERFd,rW;n[%/g/,%E$-`K)X0s!+>X'!Fk["rWi7n&chtgir..$!r_P'rWEF)kl1SY
ZjH^3!B]69rW1FqrVuqES,WEd!r88pr;Zj/`/ahQrW$O-!!<3$@eB[!#Pk&+!<>"<rQY<CrU+M$!sV`g
rr2f%$2so*52lA;!R`Cq!!%K/rp0R,rW2!qr;Zm&=o?,8K)X:!!."D@!G(g$rWiA<+9DU-h>PUt#lMe(
!s8gYo_o-qqQ'r&!!-d'qYgND./j2I>i1tK!TG$r!!3@:r/:Q4rW%]L!!$I.oD\^or4sNY"$PE;c2J=Q
a>a;*$%2CErq`Pu!!!%:o(r=ddO>(p!FjsGrj_q.iuJ!t!XEK<eGb(!_>XFoq>^P+oD\^or4sNY"$YK<
fDbOD&cB^0!s8gVo`"jdV[!2%!cdf-rW1FqrVut2i2lqGrW%?D!!+CsSc46?p\k/Pq>^P-oD\^or66Mi
"!ktdc2J=ORMGu-&>K""rqD9O!!!+Eo_SOfdO>(p!Z\WGpAUof!.=\E!@ujcrdt-PrW&D`!!-U$rr*0#
bU!Ap,f]fJroF%jqO&-&";.:%rr2VG!<<*%HhI77!R`Cq!!41Or4r<drW%BE!!+_+Yl97RjSf.Uq>^P+
oD\^or6-Gh"!knbc2J=OR2,l,&YJmurq;$H!!!+OpA4ahdO>(p!ZeoNS,NH>.Js/HAc)<&K)V;>!W7HD
!!-Ktrr*0#_&ia]+2e'UrmC]QpjrqW"!#/Srr2=rrW!!$EqB/,!R`Fr!!37Pps]5arW1V$qu?b0r58Mc
rmLcHr/(7M!F>6prWiA9*s;]f_>VXX"o*WY"9]_K^\e$0m:#to!X!Z=qYgNE.fKDL!e:!9rWE0!fe!%$
!GD=ire^UTr/pmW!rr=,nc&Lmr4a9T"!5;Wc2J+GJIM\`*5DCMrp=+m!!37Lo_SOfdjk=s!WmrJk5O]G
bl.XP'`A"4!d)3VK)X="!TYX*!!34@o`"gppQZ3j"!GY_c2J"CH3s`Y=7H4g!rh@^rW!!$E:`r*!S/q'
!!3\>r1!Zc]`8oJ!!*1GM>iJ5!Tu$2!!*.<!;-9i#PXGn"9]jdrQY<GpN[,L#$(-krW2.XrW!!%FS,G/
!S9(*!!3V9r8[derW0bOr;Zj$H.)\DrkeX8l7Vr6!Wm62rr*/sPR[ct+N=<2rqHBrpN[)J#$(-krW2.W
rW!!%GP(b2!SB1,!!3S8r2oterW0,2r;Zj%I[pChrqZNppmDKd!!3Y(qu6R"k[F_u"";Rqc2Iq3<<`O@
YPnJ"!S]m=!!34@oD8Fefei[.!Z0,[pAUrg!O!"3!!*:Wjo0l2Yl4_"T*tMr!Y(^trr*/d@L!#=.+%qX
roF%_kYqci(9[W8rW1\7rW!!%FS,G/!STL3!!3nYrP8EfrW055r;Zj'Ks1K-roX1]qP4Ps!!3S!qu6R"
k[F_u"";Loc2Iq2;[*==Y5SA!!SBL5!!37Ho_SOfgH#65!YifUSGiTeS.>Jt!>DI-rdt-?rW2%Cq>^aG
b5M>=q3WH,!s1RBrVc`ErWiDpR25r-6JVS>!r8N*rW!!#D"@H%!S]U5!!3V5qpYPerW;ti&H)S0's,:O
K)X6u!TQB?!!aairVlflQR)P5!]o6;ci+1Jop-Bs"@:fArW;nd'E.t5!cRZ+rW1h;rW!!-XSSLe"9/4n
&cD\1(9`\rMZ*Y:5PkEd!$]M_rr2_Z,lRlI3oBn^rWiDpQ50Q)5hl;;!r8>urW!!$EV'&+!T$!=!!3P/
qW@eCrltEDkXbgR!!,CJ^]&iaf)>]P(&@n8A+TZurS8n+rW<4"nGU]4#Q3+3"9SjDmJd(jgGo<8!WiC.
mJ?e_h)kT9!WlZfSGiQS:B1Ip!!,FLM>iM6!OEO;!!-Ht"o\H!gF*:*"9MNkrQkHJr7!Y/":&]/rr*2V
2$!^[!s2luqYgNQ5Q1Wa!F=dHrjr(1lV[f_!!,INdf+jt_u9\F(A\"??Ln'orS&\'!s8[*nGUu<q>LWs
e2IL4#&3K(rWCe0!<E*#!FbEmrW1qCrW!!#?0&-enGWI5'Dqh2@f;hrK)YTF!>#;.!!]"mrr)VW$N:,/
"C^uKrY,+($NgJ;J+N[=qkjSt!<WE,C@1ls!W&2^!!,CHpAUuh!RM\^!!311rT4$1rilA&&HV_.#+GMi
rV2N`rWE9+A+f*ck5H%iU^I;.$@h[HrqiGn!!39+"_mB#rW2kcr;ZjfjhUlOrW1Car;Zm"@f<M0K)Xp3
!>GS2!!\kirr)VT$iU50"_@;OrY,+&$NgJ;J+N[=qk=2n!<WE,C$kcr!W&Jf!!,[RSc/]g@06E.!WkRU
p\odDSc/U,q>^^#XT&4qdPh%+!sE9/rVc`FrW<&^CAn;@$A.pLrq_`Y!<*'%"^pWkrW0b@rVusdjjX4P
rW<"1"9&9%!^cFnrdt-urW"/<!!TD%rqb##r<*3+B_22LrW<&^C&S5:$\@pXrr2bQ!WW<*"9i/tq>LE4
%/p5-7cp9@!rZj:rW!!$7e)E9MZ*T'q>^^"WW)nnd5Lq*!sE?0rQtNFrTItp!sf6bo`"jcM?3eW!s/U4
lM:D[`=W"K!D2J:rp0R/rW&bl!!3k5qnE&]rmq&K./EoJ!jM\'qnF9O!s1X1qp><Dq5u(D!sK$^o`"jd
!fmB_rW<3*?L%=b"`XtO!%,p\rW8qs!<)s"(9@=grf-mW2>R:S!NuD(rqjDPqud'cc25le!r8rFrWE]<
J+N[=qM>7R!sA`1?0_4a"a:IW!%H1Qrk&.1VZH_r!Z8*<dJeas_u9Wsq#CT#rr2f/+8c3B5gT>ZrqcTq
q5bnA!sf3_oD\abL]RSU!s/U2lM1>^Hk-2W/'b9roDSgibq&\l!`&OhS,S$=q>L@Pq>^^#XoA=t_'Aj[
!t957rR(TGm:?S&!sf3bo`"jcNX5jf!s/U+jSAcVjBi#g!!=g]i;39KWr<(ud4tP!!`AakjSjc1Yl4Vj
q#CSurr2i2,Q%ZH$ukG/li-)H!pa>&rWEH4JFrj?q1o@U"9Ja,j8&ZUk%Fkr!!=g]iqgRli;NfVdPC_#
!`]!oY5X%Pk5G?Rq#CSurr2i2,5_NF$ub>-dJa45@gN&9#75kNrr2_J#lOi,"BFLYrWE/^E<H1?""h"D
qP*rjqMGRW!!*_9p&9RBSc/UVq>^^#ZMsk$c7o+t"W``_j5/Mmf@84CmJ[Llma9D0eC`O4hqm)dfa$9b
g"=mIdk:S$#T'*-rr2\rHSPI$!\CYRrVcrmn)KcMqZ$dMGFIdWiS+:UrW;qU$iL&+(:1dTK)X6u!)WIk
"gJ"*r66qm":6*6iTB.Uf[\FGmJ[n"ma9J4f@o'=iS`PIgtUZ>gY1<PdOkD#!Z.C%"oeMrXEH8q"9L*Y
qYgBrp%%49)>aC;06`uPkMrH=!W%fV$iL&+(Uf2"MZ*TWq>^^"Yl=Y"bqJqr#oo>mkiCXSf$aB]rWiDi
e'lk"gY`"i$f9^qgtplBgY)5I/c>bW(7b1!rqNU<0DttS/$\sLrWMock+Wjm!!P0&TBkb'mJcGNd/F(<
8GrMi!at9*rdt.$rW1.Mq>^a1`;]c7k?%oc!t,,\6TQnK*uGZ7bj"Zs)#<=/;\K]U)'LC]0eXk",pXlb
,9\+CGRscU"pRcRrVlfm!q4uBr<!B4;;M-GlG@RA:*B?4#6P3$4Z9+em]$0doLf)_!rrC6lA#:urW17U
q>^R*_Ys];rT7/bqudB/0M"Mi/Ku,IGg,FBrYYIob>o8i)':1X1c7*@.Oceu.46GdDKcZk":5<)fDY^J
qsW?:r<*H6:ttmDlbdjL:a>c9#6P6(69D$qn*U+frW2Xbr;Zm#C$a1FK)W^f!RVSW!!`nJrr2lY<X&C'
$N`(U7Q`@M*><_BlLFiaq<-.+()@f3.53\@2_H[5#V.S[.OZN\G7a`U#mNuPrVlfnnD-k<!t#<0g\^j6
`->Wc,l%EF!shRj5H*6(\,Q!u!P8L5!!*;+R/V^:qu-W`I/*aC7HOOJ!r9#Bquc]o"9TB-XnVJe"7_X4
)"%A)!Xnr/!XtXrrr*#urTe.p!sT6rjMX8/"7Z?n$QN'_!;`bq!P\g:!!*;-iVnH.ZMjmnK)#BI60/%E
!r8uAr<**&p](F!'hGM%pAP6prplO9+79+0!t>,2!Y:dsrr*#urT\%n"9oBrji0Y9"RuHp$Q`HmqTSrs
rW0k>r;Zj&Z)dkUroj=^n:gZ<!C5`FrW;nu+T)?:!!EB=8[.s]rWD_a2^7Yi!<Wc/!s0"'qYpHrrVc"o
qu[06N9/,N.KohC!!E`R>fuoDrW"DF!!*GUo_sIAT`,#k^_-DC!Y([rrVd&nOXghE"pY5-!;lg/":ILl
<`;a^3&Woc6:amP4p^HS!!3$#!@-FtrW;el*W6'B![U;Nli71i'U7VPr8R_#rW"eQ!!*JV^A```f)>aL
_%HMD!XtFlrVd&mO=LbF"pP/'!"oDD86B8)<_YhB6:XXE=C+T+!UKdd!W<-',2<+rrVcllVB,U<!s9oC
($ko(!Z.0^q#%;o!B1#W!!*JVM#ND5!r]qJq>^L'!LET\rWD_P.Lc:\!!;lp&d/\>?>!_R;as,E9M\Yp
A53L5li7"dr<!'DgACjNp8/i.!s8TQ:)<0r"TfO-j7rQFrp0R1rW"\N!!*nh]DdE]g&;'HGm*sD!A2^r
rWr#,KjS)"=Y0p,!!!*"!s/TgmJQqhrr))(#Qb)1!Tj@a4F"=(YPnM\r;Zm!)qp#FOT#=TI0BBH""M[s
rr)g%n%=<\>%Uba#LNMO"8r?'3U?SA#Q<k,#6P)3!Tj@a5C0m0oDZH&!'U5[!?Kq?rdt-hrW;eD"o83"
.a\(l#k,BY?Wq&@.0nK*q>gEq!BBEBrWiDcEX)XJ!s.Na"$h7Gn@ehmrW#=`!!+e5R/V^:r;H`T3Vi^W
"D$uurXJi(p$Cu5lc*ou.3oK,l2V1r*%<?d.4QP[&e5$?!!!'!!s8T+7e6ET"o4r?"p+i$!!iW>-7UK,
A69?9!!N?(!ubV2Yl4Vqqu?aUjPg)irj2S)j$<G@!X39+qu.''r:TC@n*.`+/0uAK!Up*d!"/rH,:4Z^
,p*m6$N^)(!!3'%!s8Tko(r=hq4Sr9!Wi)s#QYJ\-7_B!?krA8"9J]HBB[bBi;N^Rqu?aYk,\K5rosC_
k!f+H!X3?.qu.$&qt9:?n*.`).O,rCkl;%n(F(1M,:"9D%LMq2!!3'$!s/Kgo(r=hq4Ac5!Wi)s#QPAY
,V;B'A/Fq>"9J]IC?_u%!)3=k!<S&Jrdt-BrW14Xq>^RH_>Np("8Lg(c3:t[KO?har>Qpu(`3qq#R:D2
!!<fd=b<ZmfA>E@g=4Qp]TcJ@$3q7P!Wr<&!X)BnqYh-)n(41<3#2Sr!!3KG4+"3Wg[Y:B"oP'03Z&(q
!!Esp`:EfhrltEB<rE"!!f=ViK)X@#!RMh_!!4akr:BnAptsKA]:j[W2'<bV*?5q6(D@2_#Qk&,";!+a
I&4^/gYLW9dE]kDN`$r+#SmdL"9&E,!sD<jrr2ip')M"HRp.`b!rr<%#oGUEWls/err**!ULl@u#58*#
(6QT,qm?>'>laj(!<S+5rf-mXdNJAd!ADInr:BmpptsH@\tFFR1`mY8*?l@<((q#]#Qk&,";!%]HDJC*
gYCN7d*B_ANDLZ'#T!jN!rW3&"AAFarY#(peXBYu'a"F9!=9T"FK!@;o)AUlr2!s\'aFC4"<*KCo)&=`
li,<2!W,"X!!+>/])I<\g&;#p&GlG/#`A6ArYkb3p?gh]]>)8"\@/`CPCS-b4#gK8cKk6%rV6@&rT_1V
I'AMu$j-S@6"6Sdr;QZo%K61qh5F<n&jLoUiV!-FrWW5hg8\ElpAb<t"`)6Y[f-=)6N$lb-L?EbOT#:*
(Ae(5#E/6Rrpft+rVH3RhoNCF`Pf9nYbmS7JmCN$?CT4*p\XparX\qk^5IKIO%Bc`":d\-U&=]b%K6.o
gSRsh%m#*Ei:[$ErW`;ifVi0o!VcWt!sibdrV?H,rW2mdr;ZjHmEPW^rl4p<c5HKZ!XFYUmf".'qt9=5
a1B1.`ON7YVNQRb?U$Y[S'C<pqu-<h!W;0k]S_<KO%Ki`!t@P-UAXfc%K6.ogS\'i%QSmAht?pDrW`;i
f;N-r!r)`u":9"irPSX,rW0A2rVus6Y*T'=rqu`rKE:rM!\W(%li-n^&cDV,rVZTjqY9aVmc<Hrq#(*_
rXJi(p\"FXeT*&eDqORQo_o-pq<H)0g@P1>pAP<pq<,+d/cYnI!!<?B:@kso!OrF7!!*tChu86,Zi0uf
!rDs!.b"=]rr2j)r;HWnr;?Hgq"FFMjTO]5q#(*_rXJi(p\"FYe8Qc`CtJ1Mo_o-pq<Q,-g%5(=pAP6n
q<5A!2tm:S"<()-fDab.!PA^;!!+%GWW%MKl2C^O!rDs!.b"=]rr2j.r;HWnr;?Hgq"FFMk2l%+r;H9e
%K65!pA=X8E@3/NfC8M+rWrJulc69_o(r=YrWW5qlG73rpAb:!*)H4:rW;P:!WE'"0A#doK)VJC!T$EE
!!-R$mJb]9"o@Au_rgpPrWrJun=P;L808$2!!6lCp$Mb)rW;SA!r`0#0A*r:K)XC$!T?iN!!-Br_Ys`8
jM8RlrVZZQrWrJuntLYJ6Q?7*!!<:<[e793"7_-J!!<3$1"qB]NrB(@;Yg@p>k7m3rWW/Z^qf%0g\qKW
q=LJ3AjI@=q>^X$DR]?=li,B4!r^@mr;Zjpn%&FLrnIDRqMbUS!!3=rqni=8rVcWjrV6BMrW`8kmGG-N
#l4N("rV6kr4`.3rQm.p!!#jrmt:V&rW;qX"T&0#"e>Jgrl4p?rVcTirR_#Qqt'11X],N$!!W]IDSZ2L
rkSL7rR!=t!!-$ebl34naSl8;P6Lg`!X5+ka8Z#9"TA;qqu,.G#5e#Yh5jNZq>^X))fNRjao;#5!rIlX
r;Zk#n<X'*rr2lti?nC$![lOsOo>O_rVG8_#5J6$!Yo_E^]"<3N<K1[!F,'Nrdt-WrW2%0q>^RCe,A#"
\Gc[1rV>)U"o/-#!YokJh>ZI6!rIu\r;Zk(nYuM>rp0Oaj"C0.![Z=oV#Kf]"o\DqfO>$[!!<9<H1SfM
!S/=j!!34Jp%&*6rhBAmV$[#!!X***m/EaY#5m\767!$Aq>^S:pAOR]d/F't,Q.TD"+U$Wrdt.%rW0&-
qZ$[#A+@#,f_u*QkBfE9$3Bu'!d+/7_>XJe-N3uI!!@fGLAm85!Nlk.!!EF8nc&NKrW`;_Gs3;W!W)j!
!-e29n,Ci9!Vf^n!!3qQr42fYrnIDQN!9(Y!YV.%Zi8\X#6"8`_i-hcr;Zs$!@#S__YsT2=8W%!(W6=O
KDq&5!L*fc!!3b'qY^>TrW`>om_=Q>"oSE'!<FFc!<'e6!Vfjr!!3tUr65.lrlG'>Qj3Ef!YM""`r=$X
#6"5^^4nZOr;Zs$!@5bbbl7A9!PJs?!!--qQ2ZC7"TJDsHNX-F!]/4$OT,(T$h_n^%KHJ0!s8mdqni=5
]ajr?!Ef0Srdt-XrW<"P"T&0#1=#gNrilA0oZgtU!!!$&":Bt^hu;^9!PK!@!!-@#W;_DJm/@(bM?WkW
!]&(!U]0ET$hV_S$NL/-!s8meqnrC6qN(OS!@?t!rdt-ErW2"Fq>^S1m/?;MS,N`YAdAA<!s8O2qXXX6
rW2kVqu?aIkdpbFrn78OkY1gQ!bL`s[f4\R$0Ye%!!<?,!FYcArW2kWqu?aMl%K%trW2=^q>^Y1m/?q_
M#ISA?NpK3!s8W+@/B?kec#U'/GoJJF12("rnRJRV&T72!KZr[rmUiJc9).,!s/I1qSW:5gFrL*!s*TE
rdt-5rW0/Gq>^PSpA=iHrWgV,!!<?,!+5g'_u9\l0`:tP!dMidK)Wmk!O=!I!!/#O`W![P!m3G%rW<3%
@/A+Hq#1;b"oSE%#HF!eK)PiNq,d@l!LrnGrq?<mpm2<d!s/I6qSW:5SHf#m!=5^\rdt-YrW;t.!Vucs
R/#>5Xo8V#P6_6n"9E03hu;a:!M'Gn!!*D,VZ)2HmJ[1cBE@r0!L`_Wro<tZpQ>d\!s/L:qSW:4Q2CU_
$*<UpK)VSF!5/(,!M9/RrgNffpS82r!s/L9qXXX6rW&5]!!*M3\c.3[gAV,e!Vl]rRJO>jd/F=FU'q/-
!s397_u9Y$qu?^,!3q1UOo>Br!Vl]rRJQp^L].GNU'q,+!s8UAqX=F6rW/>dr;ZjCaL;)"rn[PS?30j%
!M9.nrmUiIhbsFU!s/L9qSW:5R0*<e"!u(grdt-6rW-X7q#CG`qYU8LrW1nRrWE9(!c%f4_u9\+!rW*"
-d'R1K)Wpl!Gqu8!!/J``W![P!T$]Q!s8T+D>MKUq#1;b"TAB&!FtP]rdt+Mr^QY_!M9.Krq?<la=[An
!rr@7qSW:5TEbAq!Wcm#h#;p)\,HA%p](>_qUkeLrW1%jrWE<(!c.YiroO+[Ta1Ps!Wm$'VZ)2HmJ[)a
p](>^qP*uLrW1%jrW<6&!c@ePrW<"c#Q=](%%ZhcK)VSF!+5L$!MB5SrgNfl_Bo?e!<<1<qXXX7rW<"e
#lXf)%A(*/K)XL'!,)',!M'"orm:WM_'K3e!WW=AqS`@7r1+/n!!*S$K)Uo3!,M?0!M'#creLIU^a0'b
!<W<)Er,8(f)>^<;Z-Rr2s7UJK)XU*!.XeE!Wf\*ZMr>P#f.hi!s&B)FS`rT!Uj(f!!,CLrr.NKPl:Z>
q#CHuZhsY!MZ*jr,m4>P!!IHFqS`@6mo]Mg!D)Fqrdt-lrW&)V!!380qo/QMrWp:c!s8Q("aU!hrqZNo
SItf#!R(G)rdt+Mrd=MA!\`^7O8ekP#f.hi!s&B*G5K5W!M:&)!!32GrS.='rjVk,KD>KK2<OkiriQ/*
^a0*d!WWCLqqqD8rW/`,rW!!#cMaU=K)Y0:!/L@M!]]?@UAj3P#f%_g!s&B+HMb\\!V9:h!!*DqmJ__:
VZ$Yqn.PQt![5GXlMd7O#f@tk!s&B*Fo(\.eG]L@=8`+"%Ipq,K)XR)!r_X%q>^RC`;I"Ad/F<e,m4>P
!!RWE`Voo2=T&4$&+TXNrfd<_rU^g#!!4Ler;HVMrWL%`!s8Q+!![cHn,Cr<!OrC5!!*`&[/P[Vhu3]R
Q3R3d!X3H3Yl<,N#f7nj!s&B)Er*cS!P/O7!!*l*rVhEJQMps^R0NNg!X<Q5q>Q9N#J_Vg"9JQ+FTD9W
rW0Y:r;Zj8o#L`]rlk?CqOIlg!!3@Co#(IBrWp:b!s8Q("aBgerqcTo;Z$Lq;>?:QKDkl,!'U/Y!YM1'
NW/YN#f7qk!s&B(Du.HP!*K.!!E/^Hrdt-[rW1nAq>^R/U&*@>Xo8UA-3OGQ!!I?=hu;g<!*oF%!E/`h
rdt.<rW1nBq>^R/U&(G]j8K>",m+5M!!IE?`Voj%r;Zj2WU0V9rho_srL+5m!!4"Gqs"*KrWpCh!s8Q(
")du+rm^oI7f<;f'<8M?K)XU*!r\Z$q>^R6[JR<0d/F<e-3OGQ!!I?=`Voj-r;Zp5X8`*MrfmB`rLX\u
!!4"Fqu$GKrWL%a!s8Q+!!IH@n,Cu=!UhrF!!,"0Zi5RUi;Nf:7fiGd!Y_=(Yl<,N#fA"l!s&B'C\l'M
!UhrF!!,(3r;M<IQi7'H9*4qi!Y_7&q>Q9N#Jh_i"9JQ*DZKXRrW2LIrW!!#3SDFOK)X$o!p!&Wq>^R1
T_ZM)_#=VU-3F>N!!@6;bl7M=!P90I!!37Kp5o9,rW-d:q#CI#?KmIKpAP?8-3F>N!!-d0`r6"Q)?'U;
"+L!trdt-\rW.-Eq#CI#>j9i=Xo8UB,m4>P!!7$6hu;j=!Po`S!!3:SpS7_>rp]mfGQmmC!X;ooT`4!N
#f.eh!s&B(Du.NR!V&YX!!*i0li)M8WVuttR0`Ne!?TVPrgNfl_'T6d!<<19qXXX:rW2OZr;Zj6ppL*Q
rnm\VrL!rc!!+(cZi8>N#f%_h"9JQ*Du.NR!V/n^!!*l1rr.NKQMpsaR0`Ne!?KPbreLIU^a0'b!<W<(
E;K&&g&;$+/,]GJ/@#2+ro3nYoQUK4!!,.?Yl<,N#eqVe!s&B'DYhEQ!S]1(!!"eNrdt-;rW;_:"8;cr
4QH8:MZ*jp,6S,N!!@6AqT&R9gb&I)!&_^oK)X*q!q^a?pAb4YjMUu4rWp4_!s8Q("EjRbrqu`rHj'BJ
!$dO'LAh;15QCf[!!3@Enr<YBrWoeK!s8Q("EF:YrW.l\r;ZgHfD^C$]`%uh6NQr^!X3T7f)DfN#dG<O
!s&B)G5C+ql2C^G#5nN%/YW/qrpp$ihF.J?!!3=Eo:Z*CrWo_H!s8Q("aKpbrqcZq)!_*Pri,ktYQ=Iu
!Yqj6l2I1O$2TYl!s/H&"*+2.rmq)G!!!nDrdt.,rW08+pAb70WVWt#dJaIKN"6$n!<<7FqT&U4!!!u:
rdt-8rW08+pAb7/W;?GkM#ISSN",pk!!<3(GP^e-g&:sSqu?^0Z2T@Sir/tg$MON%45Kk>rm^oRpMU<>
!WW3&DYhEQ!"/W(!##/-K)V2;!P/a7!!519rV?GNrWr79#m:>2!!I<BqT&R8$iBu)'#ad$rm1QE\dnH7
!]f$6_u@LO$28<C!s/H&"EaLarqu`q%K$2+?&no=rWBbB!!)fp!fZmPNW/\O$1_7'!s/H&")dtUrW!c4
!!$HZrdt-^rW0_GpAb8Op\i\BY5Sau=U#!2!!!.BqVV;:rW!l7!!$Q'rdt.?rW0bJpAb8Np\gcajSfJV
=Tnm/!!!.DqT&R8.K'5I&BO/9K)VbK!P]<C!!+Y1kPgtM"Q)'=!s8H%!GD9"rmq&K1Aq1R'$@T\K)X[,
!Q#WI!!+Y/Z2W/M$/[QB"9JQ'!G_JOrW"bQ!!*bVrVhEJQMpp')>F14/E$C(M#IS81]mg]!!<3%C\mN!
r;HfsqT>'#OohHFqs44^q\];4!WcHuZ2T@Sir/to(\n%4&s`Btrm^oM`>Ja[!r`0#@J]9g"9&,BPl-[G
V<n*FrW2m;rW!!#>PJ!nK)V2;!Q,lP!!3dtqtL)JrWL+V"9\f*!!$I.qWe%^rVOs+r/q,Zm/-,J!W*u<
!!34-pr*/`rm1QE_]8IP!YUap_>_:M"N)&Y!s8H%!G)&mrWDZ*FWpV^":?uIkl(&Nrr)rsW;Q\s(9*;m
LAh9d"TSQ#!!37#j,3j2rWW4g$3LA2rVut,qWn+_nA0GrqZ$a,24!J)mf!7cY5J>$)Q_NhK)WF^!G_l8
!!37#j4""2rWW4f$NpS5rVut-qWn+_nA0Q!qZ$X*2$031rU0XcrNcA%!?JA:rdt.?rW-m?q>^R!;WF>I
jo,G]R0j#u!WE'"@f#Qm"mbL=[6k>r!!376l0eNOge.MF!D;YArdt-LrW/c;q#CI7YP[J]SGiZhHO']T
rW!!#AGYlrrr*)fm-;#J$hjW&"(pidrW1kNr;Zjlla-SBro!bVW?M';!ZA*:Yl<)M"T3NO"9\W'!Wcm/
n,<LWm-;)N%/0`'"D@&grW1qRr;Zjllhpa6rg3TbXs*T@!ZA-;q>Q6M#5i`P!s/H&!rr@5qX=Cc()@&S
o)JhpiVi<G!rT5:r;Zk:rNQ9QroF%Zoh"oY!`nO`Xo?lM"T*<I!s/B$!Z%j7n,<D.)[ZZ<!!6NfrUKjg
r37(;!!31ArV?GErgWlfohY>_!`S7[pAU$M"T*6H"9SQ&!>hm=r9sUe*#o=fo)Ji#jSeWJ!rTAArW!!#
FT',VK)X0s!VK=b!!6-^rP8ELrWN+>#Qk,,!!4"Ar9sXb$Ln)t"C0sXrWN6"p1XX.!!*+CN;e\5!r^4[
r;ccr!XbFpM>m;L"T!6H!s/B$!BKB3rr38o!!3=1ipm!Lp1jd0!!*.Hec(1"^]"<5arU9X!XP.jdf-HL
"T!0G"9SQ&!BTK5rr3/n!!E9%"^^3YrW;e/"TAB%!dgR=K)YHB!r^:aq#CI%Qi*BQjo,DZEsMjKrVus[
l0eQN$N'l.!to=L0FIsZ!!.9@o)8[D#5nN&$*<@iK)VkN!r.KQq#CFEe`?_"rWr=A#6Fo+!!SPTrr2os
#lFZ,!uQ3d3=Q&e!!.9@o)8[D#Q4W'$F@&;K)Xd/!r.WVq#CFAe#r\urWr:>#Qk)-!!]%^rr30"!!WNE
I^D<K!rDruG5Uq1!S[kX!!*J:qu23HRJm9`O9PF[!@H:ire^UYpi6WB!<<*##,U_drsSf+$4](?\,-*c
Q>7WFr;ZjIbOb]6i=u1i!Bo\Nrdt.2rW;h8!r;lu"E!b2rmguMpN$Q@rVut(r9aL`%/p56&3YBQr;PlG
CEWcX!!+RooDSdL)uK[:5O/%CK)V;>!r$p@q>^R"C@_#rN;`qRE!QRF!!6a0rpKdc$N:#4&3kTXrVl#J
CEWcX!!+RpoDSdL*rH!=60c>dK)X3t!r%$Dq>^R"C@]+<_YsZ3E!QOE!!-m5mJd-YrgEnig\C^G!qO)J
r;Zm$EV];,!WIoQ!!31Rr/CW3rW;h7!rW,u!!4:Vr3QA,r9NJ1oD8FArqQHupM'p7!!!(irU'UaUAgS_
Y2/pOrW;Z*+8l0@"b-@@rW%cP!!34Xr71durkJF6pN?W7!!47Sr6bN(rW`;ej6?12rRCfPpLjg7!!!+n
rU'UaU]-\`YMT-RrW;Z++8l0@"bQ^FrW%cP!!34Yr1Et?rq66lpNZl;!!47Sr3QA,r9WJ.o(i7RroO+b
pLjd5!!!.qrSIMSq(DRF!6Os6!r_Liqu?akq<.a/riH)"djk1o!WlToj8R[0%fQ;$rVlfj\j\D:=Fm$H
rjE!Wh=1.8rSRS[rTQlV!<<*)Yj_S[rW2gNr;Zj"b4bf9rU*qg!!-'pZ2T@Sir/u10DYYM!a>!%rX8]%
qYgEmpUijF1f=C%R&g4o"ju/rpA=gGrWrJd7Kihn!!omdrW2gSr;Zj#c1_,<rU4%i!!-:!qYl*GRJm6@
1\q(Q!a=sarl"dGrVQHirr2Z*6S'uhH'YN1[0=t6nb;qZhu3lZkXG[U!!!?+[I!n_rW0/Dr;ZgupAP-k
ZkiT?!<\1\rdt.2rW.E[q>^R3U&2D"#On::XN7nd,lI]E"V2@I'aPU.?>>M;lh^S>rWr7q('=R;!#<H-
rW08KrVus%=n_grr3dF?!!*7^pAT[CSGiP@(&@n3'qtKqrl>!Cn=YT>c+.X:r;Zj#%K6tH',W?1Dj83,
qYfFQ$MU>3"9AK&)9DgVhYmP^-N3uG"CUs&!rTMFr;Zj%NPPOFrmLcHL)0Uc!YqF*^&J!0#OnIFY0X[t
-2dfE!Y##?#T>@*EL4Z3qYfFQ#kt,1!s&B%)p6t8!U*#O!!*njp\k0j!JpjU!!*,7MZ/M4!V8#B!!E9%
1!fg1rWrJsU`TjR+;=tN!!`Q.$QVm2li$/Kq>LKB6j*Sj!!,"Eh#7?=9Dnhk(uP)e!rRlUr;Zj"^XN16
rkSL6o/6=D!]8='d/ND2#lXLk*=3<''a4./#6P,<+%`$hrT!kZc9ha;rVusXmG.[Al:q3W!?1%nrW<"T
!rW*""i6c/K)YKC!V8>I!!5%+rO`%7rV)p)#n\I!"S;[!!sK,U8>#8Irr2'Z"3s49!r`0#2t#K#!UWGV
!!34Cp\=^gr.b+L!=Zs0rdt-PrW;qL!Vl]r7,R#'g\q?SqrX.]kl:eh<8RQ7rX&OA$3L;/!!A>\n,DbS
!U`Y[!!34Iq"Xghr.b+L!>!5Trdt.1rW;qN!r2fs7c:rY"TA5ZOVd]koDesr<8[W8rX&OA$3UA0!!JM`
h#7?C:Ak.o!dje=rW2qOqu?a/aSGgergWlgqM,.J!!,RJp&<&3"TA5ZNtpmZ!s;N[r8mn`rGN#F!<<*&
PQ:XJrpfsgm77'S!BK-6rW<"S!W<!!7H^fPK)Xs4!TYd+!!,XL^A\<7n&_%s'Cl.s!!<?ib5CE$"8YIi
"9&9$4Oi-b!U`VY!!,4Aq#1?mM?3YU!D2MKrdt-@rW;15!Vl]r7cEq;c2InFm_tMg&a',r"@LE2k5GJZ
70Nem!!,F:rr1dR!U`\[!!,7Bq#1?mMZWhW!DDXlrdt.!rW;16!Vl]r7cD)\!WDEg`0F%.k5YSe7Etbm
rWE!c"9\W'!CbVprW2@Qqu?aPhY@'MquMo`rW!!)QMHF;MuEb:+8Ps>!!#OK^A\9(F=7Y$oDf'r(`aV:
)\VoG!^+<rmf*(^"8>@j!r`0"N8"73m77'S!AWI+rW<"\"o\K'#F>27rdt-crW2()p](=^i6VDlrWMY/
-4L"J!!WHB+!;XH(&.b15K*H^rWDjb"p4c(!0Z(8!U`PW!!+h2q#1?mPm73f!XG%eSc46?p\k3T-MRQA
6K#TW"R^1R%0?)$"p#Yc+sJ*Ep](@]`V\it"857h!r`0"Q.l3<lpCUM!AWI+rW;tP!WE'")TLn<K)VqP
!Tkp-!!,RIir7g6!r]#,o)K.!$ZW`*da?FQ7hYq"!!=[\q#0IV!r#7prVus9g[5".rW2CWqu?aPhY@'O
qhP=Q!!+(\YPs.QjSf2D1&(_L6JoQW!r\i$o)Jdl$jh$if%AO%^J,CDq>^UK](l6grW;da%/p5-*SoHK
!U`SX!!+h2q#1?lM?EhX!?K;Wrdt-=rW24>p](=\hY$lkrW<%m$M+6*!=X4hfA#!0_,1pKq>^UL]_MHi
rW;da$iU,-*o6h]rpfsglpCUM!AWI+rW1e'r;ZkZqQ0[Jroa7]kV`,8!Cbn]rW<#N1&Cq[!X]5="U,#0
-s2N*r;Q]p"o[GAC_-XE!!4+.m-4KNoi;_)!!+>%gAV-?8GiGg1#D^)!T#L/!!31fqt9r?rgs)ilTP"C
!C>T5rm1QFr7<Ls!"8r<$4$k@"Tg/YQMUOXrWW8]Q#mQ=qZ$[>SF#M>!q]G)rVusJir/l5rW2FZqu?aP
hY@'Nh_Y63!Wekh^]&iaeG]L75kk<[5i'6T"8p_#!;lg*!t5PD#R:M7.pebBr;HTurT9Mk&H_h0![43'
l2CbV<"f01!A3BdrW2@Tqu?a`jS8]SD?(+E!!*YeM#N>3!U)H<!!<3$9&d\d"9%4j!rN$*%SDnBK7%rd
C!uABrWDbl2[fK_"!Nrrqssa_rW;Up&cMb2/`bXb!U`VY!!,FJq#1;8%fQG/)W/sAK)WUc!U;cA!!,UK
ci3P8"9%1f!rN$*&lG!XM1^8%CX_YErWDbm3tM2g"!sB'qs44_n6-G'!!+t>gAV-@:&Ftl6fn+B!HetQ
!!+%sS,S$=p\k3Z5PP3Z7c;,^"9%1e!W2p)'NLTeNJ<"3D:IqHrWDbn4V7Jj""0Z.qs44_n6-G'!!,.E
gAV-@9)S_k"+^:FrW<&S,5hKA,NJcTric;&rLO;j!!3Lbo]#l/rWE,jH40ZO!s(-UnEg,UlBVhT!!<gQ
deiJ3"TA;W:^[1%!B'$,rpKadmnN`\!X!uMqYgQph]i"!!%P,MK)Xm2!r]))q#CI%L%N7]"9%h7$N0r,
!BdRVp\smc!plBeqZ$^4FOU-TrWN2uhG=UZ!!,4HgAV-A;#L@q"+gCHrW<&V,Q.TB0)#9rrg`rhrN-J'
!!3FZo_&4/rWE,jFU7pG!s(Wmo'H>Wm$nad!!=![ebee6"TA;U;%3F(!^Z/Oli-GR!UWGV!!+;(q>LEj
M#75Q)63[froj=_m!Js4!!<UGir$^n"8q>6&,cJ0!`%eJrW2ikp\k3:-N!iG!=!2sn,<Igpu.Jer;ZjR
eCsm&mS3W[!@$S"rW2hOqu?^>oDX@@TDeoZIKfQJ!srW!r:9j8rWE)\I1H2U!Wl9]o_nmeqY0sibUEAh
!s/aAj6usMrV5<6.fB>J37n-.hYmQE;#L@p,ine#!VqWN!!":Xrdt."rW;M<"o83$$"`)n_u9c9k'RX;
!!<3&<9EiP!VuTdrW14mqu?g##\`5drWN2pi0#Sg!!,.6gAV,l,5qQC)kQj(!qK:jr;Zg*L]383!QQA[
!!!'%6e;1QrWE,VF;+QP!Z/HFp&5'SH@G,QrW/AirW!'&!s9aHoD\ag"oRSbGr,^'!!+"(gAV,o-2mlF
+.r?-!V0=i!!!SWrdt-drW1.fq>^U!5L]PUrq?<nrS;E(qu?d:^&7R&"6Y#]lhCAZS-f/p"9Sc0,HC84
"oRP_G;BI%!!+(1gAV,p-N3uG+enc2!V0@j!!!Y#rdt.ErW17lq>^U!519AHrWE,TD@l^G!Z]#Rp&5'X
I"CVXrW/SurW!'&!s9dJnGWUhkG`Y]#5nN&*MD0d!W7]N!!+P0q#1<^3Vrg:rndVTrVZWkr;>dUrqu?a
!W;oPrilA&r*/ss!Xt+ci;Vg:"8p_C"oA9#9CqiU#4P.`!"@<Pq>LN_6N@)frW<3.?h*gg#Q=MmkJ:IC
(&@n3.EMGUrpTger.t:O!A!7+rW2FIqu?]t_#=B5r;HNjr;$6\qu$B_qZ6WnVuGiX!W6:"!!3Odq8<16
r7=C@qZ$Xko_&1`nc_hi!"@?Qq>LN`70!;hrWE91AF]?l#Q=MnkJ1=@(A\"4/C"+KrW2qRr;ZjNk4noV
mQ17G!!DrobPhP@r;HNjr9O7Vr;?Hlr;-9kr;H-aSc/Zf@JKm)$]=cOrmC]Ir7=@>qZ$Xlp%A:go2G\i
%+G(KrWM[a!!!*"!s/jCo(DterVH9N^KVTlq>^OKcN*n0rpp$h\J"lA!=+PWrW1q-qu?^n_>XN7e<9f>
#&81'H?saJpL3l+$"@R_CMe$2EH,akBa&6dBOkX`ra>h_dA6d+rW0PPq#CI;\,=2D"8]Ve!r;lsU@eEb
YPnM(!$e-4q>LK6%0-J/!s8^%iV`HL#lX.c?;r<]"p4T#!["-/hYmPd(B+:7#ESWY!T>R,!!#pgrm1QP
rR@$>@:O+rI!g?eC@>R=@qf^sEH?5DF`)&5rbMpZDJEcqAR](XLsk\iT`+u*+o)*>*45Y5rmguMqS+uk
q>^Mso_nitr;ZmDU\afc"31rQ!r`<)##=+Sp\kHsm%[ue-4C([q#CLAVtL&HrW0PGrVus)P5"qVi@Om,
!*-l7"9$`6@0p@QDg6e^IsPm>nR2i8A8H.'F*)SKGB%S@rb`'_EG]B%An,7[M:8s5f)>]b,5D3?*4,R]
rWE#53s#3Y!<B=qrW'A)!!4FBqt^3naV"RTrW<6+:#PsDrWrJhUL[7L$jHe/!!4CDp#,fNr4aWX!!*M&
q#1Bo]bgbK!!++V_u9f9f2+"-rW!-("9eu6"Te#k!!3'#!!E3'!!<'!!WiE(qZ$[(.r57SrK.![qbI7g
!!"PNa8O'X"o\>kXsjDI!!&J[rW1X\r;Zm;_#4'."8Zs:!<!!%&;TfSq#1<fP63$2"p+As!YT_EiVioV
^F/s[!=c"&rW<&7)uTa;*Pp,%o_o!jfMX71rVus#"o\],"Tn)l!s&H*"9&E("U"Z("9S`-!<N-!":6Vq
n,:N1`;Ti8<rr*s!\)(dc2RV>"o\>kXt'PK!!&kfrW1aer;Zm<_Yj90"8[$<!W<-'&;BZQq#1HiNZeH.
!VHEo(4u#6rW<#4-iF#G%]oI)!r^(Yr;Zj>_Sc?Uqq4n!&,lP0!sSZ/!<rVn!!WK,!sA`1"TS`%!s/N)
!W<!$#qTo^rKmN[rW;t$!Vl]s.)c))rWW8uorp"Lq#CDso_nmG(&\+6*5qdOrWE"<!!)s"!tU+UrV6?q
oo(!q"p+As!Z$L[iVil2/,TAK$(1\erW2CKqu?anl/Vd'rW<&a<Q>(@#BoXqrj)M)rJC[O!!4^mrS[\>
rWMuABdEuX!!%68rW;t]#lO`)#Ij[.rWBVC!!3$#!^>0-qu-`srU5[Zn,NM!S,;dUnbrRD/c5SM$C^qh
rW2CKr;Zm";!Gsu!r_Ffli>f@!XEu@WrD5]!r\/^p](@E`VmmW"SpJe0F7CQ!.jeA!;cea$2ji*#Isa/
rWKeI!!39%"9La:pA=glrVc/>'(>l&%\3FUrW1b*qu?d*Sc/B`!U`2N!!30ulLt5(rW<&a=iULD#C,h2
rh'/krK79X!!4RfrU^$>rWN&HGr,j%!!%fHrW;tb$N0r+#eBp1rWBhO!!3$#!^,$,qu-`srU,@NnGiXk
%\3Fbrq-0j?30p'!C?)JrW0#,r;Zm-[/.iB"T6iA0F6nCh>dTcJFof>li$qO<VHIp1=,p@rWD).,Qm]>
!+PR!!psn2r;Zjrkkb8]kYhH]!r`9'-HGcUrWDl5B+F>0!FYc`rW-L0qZ$Xfn+lq`XUP..!XuX9oD[;>
"T6iB0F5Yu!Y'\Qnc#9^!UNq_!!4gtrUBg?rWD,3-j0,B!,V9+!q:::r;Zjsl2(A^lWX>h"9&E)--#WT
rWDl3@gh])!+5g'ir/si!W)it9CVcV!Nlk0!!3SAqT&R<r77Gn#lF\G!!3U]ot14UrW;Fh!VcWr0$F48
rWD28/-Y_I!<@03rW;V5#lXf*!EJF]rWMRq!!!*"!s0dgpA=gkp;18HmJm8qqW%PU])ha.!>:RlrW2L]
rW!$#!&X&^rW:bC"Rc<n#W+q20E!C'/L^i)m/R+fp](Br!e0a)rW0YPpAb2-!UK^-rWE,[?O-3'!<R!,
rW<&Z@f69-(UNu;"Sn5_!!<-%![,M\rr*0!bFN]/#64c'!!s&[<DuUh<E`rnqu?b*qW%PU_#aB4!>_+"
rW2Oaqu?aWma(n-rW:bD"Rc<n$9CmJ1&WU)1+NP1m/R+gpAb6rJ+M"c`VonQ+SPj;B']E?rWW<#rT7Sq
oDempDY*i/rT7el!!*tFqYgWoQid<jrWE9E`Vf`7"o??/DCu.k!!s,a?!164?Y47?qu?b*qW%PW`W6&>
qu?a6T_eWgnPB&_!B]ejrW:eE"Rc<n%6mWW1B&d,/Mes_!qlWh!!!/r!!34OoU5^UrW0bWpAb8*li#$+
"9%Cs$M4<!"`a/5!r_7tr;Zj9\,-(*qO7Tg!!<-%![#AYrr*)taHp`p#5eH-%kD*q>[M&ZF[#^'!FYcb
rW1k>p](=NmectafF7ZX!2nfTkPbP]l9an=!X4G2q>LHbRO@h0"!(T$"T8<&%kprnpAb70]_pghZi1%$
9EOth!XcsGhu<'C"T82iI0fEE!=/,arW1k*r;ZjYrVHKqW<3,%rW<EG_>O<3rREM*qZ$^!)3!_TrW;B-
/H#PL@/BHnoDSdJ621E\4R`1H!S\7b!!'(?rW<&c6LFgT#`mU:rqu`sn=(j#!!=HS3<]9\!tmRt'))A-
'tjIHrosC`peV(f!!3AArQP6Dr;?8B$1e,t$ha,j"9/;V.fB>J48o$T"0_t0"9&E/)o2CNrr(7o"oA9%
!umHequ-Z`bVK+s!FYcbrW1qEp](=\n,*(bgD0Vd!3YtneG]OJmR$=A!XY%Aq>LHbS1414""%PB"T8<&
'Koe:pAb70^&7U'T`,#g;Zldp!X6F=o)@DC"T82kM@9"U!=eenrW1k*r;Zj[rVHKqZ3C:1rW<EF_#432
rQutqqZ$^$*LH!erWMT52#mUY!!$F'n,E(\!rA](p](@#N;<DN!S.VU!!0D#ao2A>h)bE5%fm"m.k2nq
/MSdX!!3IKqYL3jrZ(n(^eGFP%hKBh-!/mqfN\OZ!"t1RoW2RI*=i8M!!319orA#XrW0,8pAb4]p<3F;
n=XP$o)JdoNq!#Jr;hNXrVus+X8;etZ3C:1rW<?9V>:,hl!XDh"T\rmQ0A#=rW<#7./j2I@/B!a!rA](
p](@%OSShR!SJ(_!!0P'o)@;@!rUk8qZ%--$T0Xl/1r\:/HPnS%!h^DrZ(n(^ePOR%hKEk-sPL$gL:9c
!"t=XoWDmS*t\YR!!31:p%/0XrW0/;qu?]tr;Zj]p?qq:rWDYfFU%F;!=+hXrW<%Q$N:#+&$,R+"1SX;
!r`<,&Z#7%rT@D_!!NB25F1R/q>LHn`%:lf!+5g'jo,>XU_*;$!XY"br;H`N'Dqh2](jDH!rUk8qZ$^!
$o]sM1+tC?3\:C5!tBYSp\l02mD)L2%hB6e)(JnHpY9?a!!!^qlh%E!-6X!)qu?d!C\>C?g&;#V)>jI7
!W<!!3qgbr"7`I=#P.oq#QU.ZrW<%S$N:#+&Zbd-"1eg>!r`9+&>].$rT@>]!!NB36C@'6q>LHn`@h,i
!FYccrW1V4p&G+Kbl%G@ed26T!rr=Cfua3phbX@N!"L`5f[SBsdam-8*<6E[a7K92m^rJ.(V@E&p&=sg
eJ/&a2<b#<rpn4NS6u^)!<)s!*P.R9!SAFj!!30,!WE'"HiD7g!r^"_nc/^m:#PL>!V((+!!+>2qu-]L
('"C7!sT!\o`"TS%fHA/#:P3*iViKL!Td&T!!-L(jo,;74SAaU1X,dr!SJ"]!!.K#ci3h@!oHfTqu@6.
2hg&?f[\U.i0YVf%iEI\rYk7;\@B)_^rl?LrqtFa!!"qCrVlfecH)Yh&,ZD.*kfr"a8Q+m,5_EB#n@+;
!!%,arW)lt_^Y-V!Wl-Tn,<@XDZ'P9,jtR/"5=Xm!r`<,#_2IFpR2Qi!!EZZL>r1*rW2.\rVut,qW7\W
hE:`:q>^OQcM[YBfb+,^!JB+JrW:tR!W2p.!BQ(ogY1<7hW((L!>-<poDT'c]XYJ_^;8"crXf),g_Kki
2sgMBrpnCXU1P#8!!+4WRf<9b!SSgs!!3QA"o\K%EQe=_rPL/V!!33ti:$XGnS\:*!@@74rW1dk!<<0"
!sT!ZoD\NR%/g//$n[=rrV$3kk#hT_!FYcdrW1h.o`,!oGPqF@fb"&]!XFbZj8S9A!'L)X"&7bOrVQQt
k?A&j%IN?X"jIVZ!%6=orWE,mW"](/!)V_T[Jg3h9`"ek&/YWN!!&&8rpTgfpjr_@!!3r#rU9^erR3.n
!!*D.qu-]rCB+D7!sJg@n,DK;qu?hRhu3NGrW#[l!!-L(o)A=]!T,X)!!*1Or;H`O(]477#E\Z%rW#(W
!!?-\qu-Ek"mTS'!tFYqrp9Ufdh;]].G4Os"9%qq(]475=fq\hrW;:[!W<!#!?!$erVuqSbPhS<Ig,BC
!Z(&!o)AXf!r^RqrVus*Xo&)"rG_f=rWEB.BCGia8c8Vl!fZ(9rUg'h;uQat@/B$b!TGs/!!*1Tr;H`Q
)>jI9#EniTrmguJ4Sf$[=6BDYqu-cbB*nePmH=HPf+\2b/)'n""9%ts(]475?M=AmrW;:\!W<!#!Zi]s
rVuqRnG_5B!r.3Jnc/_,l2C)M!r^RqrVus+Y5A2#rH/)@rW<<,BCGic9Dnhn"HMF=rUg'i<WE4%!+>Zl
rqZNoi^s%J"s$dCXF2c'rVurfrVci\2#@7`)_J4gSXHeFrVlfpl.XqjgAV-0:&=nl"$$#LrWVRh!<<Sr
q>Tj^"g/.3!$9/TrW/>jr;Zm%P5;9Zn,<CLA-2Z/!t$h,$2so*B)U!R!rLD+q>^R&*";`F!@@X1rW<)V
2#[IV!FYBnrW;^(!<!!&4jEf?*rQ'>>3bYW!(Qqf!FYcerW2%Pr;[''*aGqXLb]&2!!)TgrW27EqZ%-G
1:!jQS?q>Urr2l\g>)V[rW1kMqZ$["5kb!P"moUs!"J>YrWT_<!!".`q#1;a#lO`)"df)YrhfYrj_"_o
!!<`s.h)CW!G)/sro!bWqp77t!!3HJ%K$2,-i<90!T5m8!!312nGE1doF_3'"9^m3q8OQU!!-EmnbrM`
rVuq+!;bmX!TZrQ!!`NG?a[M.1]mXV!;$0g!U;fE!"U&-[B$'nZfV/brr)*8h#,n*!T$QJ!!36ip\k*h
rWV[t!<<SrkPbXs$ig8NbP;&;SdG>q!XG1j^]*$f!p42"qu?g27kbDO!!-X/c2IeAco(Y"!XTnXqu?dI
qu6!^!T?$;!!314nb`:eoFh6'!sCa1q8XZW!!-KonbrMerVut,qWRn[qj.Zh!!i^"]BB1mjgcrA!!%6A
rWN1s$NL2*!"T\S#m:8C8V<IsJQ4HhL>gqe!S^?F!!3e.r:p6pj$WkI%diHY"fVb-!#WHFrW2U]r;Zp#
18=?1rWDr(9EG%k"9^ep+T_QB!@6mTrWN2n_cI-?!!??9M@][d!XXkbm/@%K6N$lb8F-0P!Vp@*!s9!=
d9->I"9H"/rr2Ng!'U;]!FtuirW;tb$iU,3"AHJlrr2)o0E(qOHi<pFrML)$!"TeY$jZtM8VEb*JQ4Hh
LuI7jrr)rQ:&4hk'WCs)rWV@P!!*SskPbXi$31&E_"dm0oM#2`!s1?Yo@*]^rWDr.:'1=n"9h27/-GkO
!A3Q^rWE,n^Jk1<q>^V(^Prp+!!3OlrTsLakXGFM!D)PRrW;n0"oSQ+%U@=`r;Zm"]DV3u!(-Yb!G)&j
rW;tc$iU,-"\u`7l2L\G^GGih!.XtH!r]#+qZ%-C(Cg]R'M3tQSUjcr5)J:SrW1bJq>^R4Wr2Yk"m&8T
!>"S^rWiH%[L3'8)oDCL!VB7f!!<9]X7Vt^"8KQ+"8i-%#"j:t"9&9$0Bpg^"TA)1;[<.!"(8p*(&e17
%$pkYrW27Sr;ZjhlhgY]q#P77r<!-2>gHUP!!327r:0ad7fEAgAbtWi!Tc!5!!4Y&rVc^"k=c3_!$gn0
rW2@HoDngjrW!*&0Tl)&p%J%So)Sa]rW2mfq#CJ"mJZhZ"k5%&!"J>YrWT&%!!!hIp\k3B(]479"@CK/
pA4F[p%7nRo>gh;rV#jSo^qhMp-^)#!!=$`HRJ^k!M]JKrpp$inp:f@!!um,rV_HR!!"q7li$qG3W/pY
8F-0P!rSc'qu[!.B+4_=!D*1ZrW2sYrVut/qXXX[rW2.<r;ZmMg\q*M#3Shl!!"83rVcic5kG'T!WE'%
!B$5;pAO[Xo_n@]rUg'iqb-_b!aP0lq#1HH.f]PYmJQtMrWTA/!!!nNp\k3B)>jI;"\dD>pAXaaoDnR_
p&OdVo`"I0rqHBqrV#jSo_&4W!Dt';!!=-rM_b21!N#\?rW;\:$MaZ.CAe&/N<T@_3T9H+rVciZ4oG?]
8aH9Q!rSr4qud'/AISM;!F5TnrW`<a!!!%3qWRnZk;`D?!\N7,rVd#a;[i^,,ObU1!U`DK!;uou!!`K(
!B?SCp@e@UqXjaX!<)Qh!W,Rd!!6KqrV6?qe1:S"%IN?X"gJC7!#iZIrW1Rkqu?j):t576r:U*_rV$9a
oCW%Ra8QGEp@InKp%J.S=!mbD"!*Sj2Z*OUVYfr`hu3]KGma?I$$#nArK.9a!'K9,rW2.Hr;ZjilhgY_
r2Lb7!s/j@%/g/,Ac;/u!rY@a!rr@7qX=F[rW`(H#650*iVNNWX9S_*%B]R-"5\&R%dj<$"!Sd('bCoS
$ig\7$3CJ<#Q=]*#_TnIq#1?gdoH/C!DhnQrW%oV!!*Prq>Tj^"f)A'!#<'=rW1Rjq>_$J.NfQ?&.8gP
&JuB))&!PT$4dFK#6k81!dD)ucJ%=:m/>Q8rVd6(lH+o3!!NiH*$-U5q>^[ZNmGCN$2ji*4idHKrWE#c
K+[q[!WuQgrr*)[(B=G"jQujIrlubf!!3@hq"jslf1#`ArW<0(#5eH$T(2d]rPTEL!!-U+kl(e\L'[hh
:#c$K"g813!"H.0rWD)$1(isT#QP)Y,T[j='GLHXrX]DI%L`aI!!!=\^Y\bb!qt,Gp](=olM(8XN;`eX
%IN?X"fqt0!#E6ArW1[tq>^[D0.7hV'`J^G(a'#++s7a:&.eUK&.]9]$jm4@!dV6$ce[aCmetW6%/oJ5
N%"`4'H/,@0a.=Q"[/.#`Gc1_!!5:(qsaUGrWE#eLD0La!Wu]mrr*)[(B=G%jm2mHc6N;g!XP.gqYgTL
:B:Rs"9AZ1qu?_snbrak`>&@Q!G2?.kl(e]M@'=n:ZVBO"gJ@6!"Q:3rWD5+1D9*U#72q/+WVC9(&epH
'+,?a%h8^B!""Irht[0Qp=3:Hq#CFslhpb[rW%oV!!*PrkPbXg$31&C^%_L,gF2mu"XZ#V+;bpo'aPa'
,pafW'b_5V'+bcg&.]0T!Wm_Wd*UY5jRE-5rp'IkrThRc.KBek*[E0l"Sr*%5+'mBEsqpH!^Fd'e,BIH
o8+1X!!370li-kgiYMRp7-=LJmJ[.3,lRcF#atMbrWCkQ!!<-%!<`Z*!!':orWiDA('"=8BDUik"oH]&
*fAkNrWT,$!!!S>r;Hcrn_4&Jq47Rli;`uc)ap1kqu-ZnB.`iX!D);GrW%oV!!*PrkPbXc#QOi=[eKb$
eGpN@!!iWC,UP?33_4GCrWCGI*XhN=#@60Zrr1eX!WE'!#6IT=qpkZJqR]f<q#CI9eGT=F"hY?G!'oW3
rW<"c"o\K&+Q`Fu#MD9@!!36)!rDrtJc5T@rW;Ua"9&9$@J]3e"oQo1,*CgZrWT5(!!!VCr;Hfsn_CJH
ScE'T!!EQH8Y#VRrW)crBeBG]!!,gVp\k/OrVus.mH=HPZjHd5(:j2=!SALI!!iZD-R^o?4\L/#rn%,O
c<DA!nc/o#htI'Ki`lN`!!<Ht_Y_m_"8]]7%fQJ+!!4.jr;Q[!^CUAF7HWt9!rSGirVusBkP>)^gI2)C
!sA`/qZ$VWnbrU[:BURr!FkohrWW5OOX?CRrr2ip"fV\+!#!!CrWE,hgpHmK!+"O`":,r>Sb`0^"8Zgf
!VcWq:[%QP!0$mW!=eG\rWiH%[L3'8(:s8>!SJ[M!!iZD-Rh&E5>?LRrWCJO+:S&Gq>^b+htR-Lj'Mle
!!<Hs_Y_m_"8]c;%f$)+*7audrWU+L!!#LOm/@(aR0EQi!?pY%rWh4L!!!'&!s8?"!1WNX!qB.krVut.
qWIh\rVZKhrV?ErUB:Jr'>jVFp\b-b>3Q%]!!*<3r<36.(DcZD!C,N:rW%oV!!*`"kl(VUC&S)5'=IT6
!R_\>!:p0k!>*cb!=]2$!!5FDrVlctr4!46!!F^1h>$s0rqHBoqVQ5pp](@Dq#10j"dB5l!'fQ2rW2?l
rW!!)=T/'p#2D0<!!*-&q>^M<nbrRA$2ji)@/BHnpAP3nr;$9hq>LPp"TSN;a85f0r;lOqhZ*Z`%K-G3
$R->Y!!,IHp\k/OrVus7mJQtNrW2\.rVus6\G,t'eJcg8!<Etj"oAH(&d7\(!^P]Brr)us\e"]="=/fX
q#/qG"8h)'#l"B$./<c>rWS\q!!#CKn,E=c!UL-l!!3L3rV?EshE1c<!<N?!!!%N=rW1a^r;Zk+qWIh\
rVcQirV?ErVZm,$(<cRRp\b-b?Mjfa!!*E<r<362-5lIV!Cc&CrW%oV!!*r)kl(VVD>jM9'tF#;!S/7]
!8mhX!?9Pm!>Pb,!!5FDrVlctr4EX>!!FL$g\CaAroF%\qrE,1p](@Dq#10j"eH##!(>u9rW2?lrW!!.
?N'^!#2_TE!!*-&q>^MNnbrXH%0-A1!!$F'n,D\Q"f)8$!#jGXrW2n\aoDH#h"UdJN;`eX)".5!nGWI2
+8u6@'=IT6!RVLV!:Bgi"YP\ar;?NplTY1G"V*J4X2rWdc3;SAce%XalM_"bm+'>(Ou2n5!B&.!rWRZN
!!"t:m/@%Q$iU,,0^e`8!SB."!!$U$rW2e1qu?b*qV(oPVZd&#*8Bu^!W/,W!7CiJ3SjH/!0$mW!?LXm
rW1:frVus4[J0Y$dhV<OV#UW%08eBZr;H``62LWf$o;h"`QZQLbPo`hf'iS:rp9Uhqs;nZcBU?ip](=P
cMRSEIf]TM4Q>`,!UUBr!!+nFq#1<J2Y@%MDY!c-q/Q<4!+5g'gAV8T#64`DhXLLFqj,A)!B]09rqu`q
N;`eX+ReOn!RN%i!!*b@p\k3C(qBY$!!EHYN7\"*rW2CSqZ$a,12`u-rQ>Ahbg"c/rTa@eqs2k[c^-]p
p](=PcMRSGJcbuQ4QHG?mf!7S&H2Y12"CA?!S]U,!!%35rW2h9qu?b*qV(oXW<N>&'=RW6o@KPBf%^D`
gtqu-rr)upi)B=L!Y$%OfDkqjnFun^N;`eX&D?=I!pjS&rVus4[J0Y#d/XdV!!<WG&H\L'"!(FqqYL0m
rPB9J!;um!";<*[.gR[W.l(eYnbN%Zr"T&'mc!6noC_kQq"OIMf:H"s,:!Kf!!4dsqtp?mD#OD8.b*ha
"mlm%!!/2UrW1S&p&G+8]D_a&rW0\Xr;Zm)LAT^(%'9a7!#3!;rq"j=\^pc8!oEkRrr)uqi)KCM!Y67S
j8eiQ!HR](rW%oV!!*_dl2CbNC]s_;!>Dm8rW1I_qu?g/(_Qo#!6G3C+BI4mqYgQp`#SUR!Ws#Yr?qt%
.4I&ia7/p$qu-F,qtTU;j6Z@0p\=LWp$^G"<%oUG#Pe?&!!"Xqqtp?mD#OD8/Cj+d"n!-+!!88VrW1\.
p&G+@^@M7(_'o6^!XX_\hu<QQ%'Kp:!#3'=rq,!D]@Qu:!oEkRrr)uqi)]OO!YHFWfDkqonFun^N;`eX
'AD^M!pjb,rVus4[J0Y$e//#_!tQ7_!hTGr!!"0CgA:[F!r^+Zq>^R!&0_!"#Uq2N1iLG(q>1!c'DUtQ
j6Z=/q"XUWp$U=t;DBOI#PS3"0$O4irW$g7!!+Y$m/@1V)#sX=P5"qVfeiC&!@ttVrW0ncr;Zm+MYl-,
%'p6?!!+p>b[`"%"U=r2#S;[Frr2J?5QUTZ";u[1M*Uh9irB*%^%VF*N;`eY!H.f"rW.BMr;Zj3[J0Y$
d1H6V"X'8`^2Y.W!4W"2+F)T8pAP*)*Uj%5!@29BVQI!"XpM+l=Y_s1A:9Ap"cSCmA2Oee!!+Y/q>LA1
rVus&OmN&JmMZ!(!1!<X!S9"!!!*@:o)8^hB*/#3![l@no)@nQ%(QcH!!,-Kc>"g2"U=r2#S;aJrr2JD
5lp]["<30@Ma?%s!@#5NrW%oV!!31?qu-N^rW.ENr;Zj3[J0Y$dM2W["X]qq_K-d)!:Kmj![2jCq=adg
],gA@&HO"_OJ8\QWiE%qN`.Me876]ALBN?\?82fY!!+Y/q>LA1rVus'PjeVNrW2I/rVuq`p\k3I2"ptN
$#T84!rZs<r;ZmJdf%o!%(ZlJ!!,6QcYY6:"U=r2#S;dKrr2MF5lpl`qu?j?Nm<VMg&M."^%VF*N;`eY
!HJ#%rW.ENr;Zj3[J0Y$e/%u_"Xg,#`H34"!2]`!"<i*Fq=adg]H-JA!!*oZ?]LhXVl?VnUl82&1e1kr
LPCP;HsA<2o)JeCi;*?PD#OD8#F4ZT!Uh01!!&;YrW1_2pAb4$Eq922rGVl<!!<3Ne,Ab7mJ[1cYmLC0
!s&Z?!r2g"!>Zau)[$'>";X=%*sMTC(,*8oqrXfAJokd??t!MN>Zb*/;c-=ape(fg?#G.C5m7,d!<Pgb
rW%oU!!*nSqYp-d"9%PI$2ac()oD@K!R_V[!"T^Jq#:9fj\K&f@:s7cAn_0UraGS2$".+H>Zt6/;c-<<
9DV9g9Mnbj>?+KoK]E"&rW;nm&ao]$!XB,2$j$eB!r`0#!X8K,!!Mim!\2Loq>LDK"TAB&,inmlrW)lt
`$YH`!1!<X!S/pu!!*h3oDSgi`=r.L!DiUHrW<&)$iU,.!XTJ@q#Cp,(Ejh="98E&*DBW\"onW?!!"gh
q>9<ZTo",:Ch@9nAn5:U>?Fj'9__6b<Fg6-M+%RG!!*-mp&4rMr;Zj:`pNa-rToUPqu?a;_tX-2e.qr_
%McMLrr2]T;.O<TEH5o5#&S9uEGK3#qIp@OBP(je@:3DF=B/3lbY&::<*3@5>#S7Uj8AQK!r8]*mf3@i
#65)-$NUJ5rW!0(":#,9#6k;$!!4e"rV?EnLB[YW!\*:0n,<Ce`@Lof!1!<X!SK=(!!*q<oDSgi`u"XR
!DiUHrW<&-%/p5/!X]PBq#Cj*(F't@"98E&+Ac>g#Q4W<28T+ckIIUTIs5jICMdj#A78eJ<DuZg9*\-m
BR,Su7g/bj!<Ysjrqu`qN;W_W)oq@F"9%SJ$2ac(*Q@dP!Rqtc!"9[Tq>UBgk##`+DKU.%DZt0'FDbi/
q.pFSC2%<l@prVH=&DZR9BSqT9iYA'A6`)4OQ??3rW;nm&ao]$!=&r/$N^Y?!WE'"!<i<)!!Dcl!\_q!
q>LDQ"o\K'/*?curW<&;0)bhNQ1t7Yg,8U)!?&'3rW<&?)>jI8;#AuG!V:!s!;6Bs23Qko]5%TL!!<da
m/>oB"6n9K#lXf)2XL,9!0$gU!`%YOn,<CUE!H1>!ESgdrW(@H'E.t4BCq,]!rK5GbQ%\JK)59A!S]"#
!!5d>r:'[emS3i_!!&;YrW1\/pAb47V#:5frW;])3W&jX#/8di!V:0m!!YBOiqpK/#6"T)&VfZNjSo/X
"7+KQ#lXf)3plV>!0$gU!`._Pn,<CVE<c:?!F#0jrW1OdrVut=p<ilOrW;u%+j9od"TaASq#1<N.fB>K
9[`k.rW;Lc"9&9#Q1t7YgGej,!?\94rW;`,3rAsY$GP?qrVciiE9R?,2k]7/_/fn]!!<ghmJZ#C"74TT
#lXf)4RVnA!0$gU!`._Pn,<CVEX)C@!F>EnrW1OfrVutDp7)'OrW;u%+j9of#)N0OrW2%2r;Zmne,8_7
!q0+krVuq`p\k3J3;3CR+KP/6!qa8hqu?a)^=iJdb96KY!!Dop#;tW?rr2llO8T%[%B]U'rp'IfrMM.G
!!709p&4rMqu?d!:%RiQ!L4#g!!)!OrWU^c!!!YJj8PqT!P'6.!:Kmg*o6Si!W%0A!!30ujRN3NqecT9
!!&;YrW1_2pAb6sE4Y`A!DXC,!!.'9nG__P!RN(b!!!5s!!bCCqu6TnqN:^V!Y)=2i;Nu[WA4GR"*FA3
rW%oT!!E<uoD\aZrW/8kq>^NUpAP6G)ZTjR`NB-prW0PMbl@behtR*NqL/;B!Wc0[o)8ajqf<#@!!&;Y
rW1b6pAb6tEQ%PL!EL$6!!.3=g&;$#,kh9>!=8B!"Z>E=rr2isqNLjX!Y)@3i;Nu[X#9qX"F'\7rW%oT
!!30to^Db[Pm[?f!9NqR"kF[o!#WfNrfd<^\fL>Ag].?uiV3<Pqg\PE!Wc0[nbrUeFpS$H!1!<X!Som4
!!3:Eb4Y`7>8d;<!Hn;,rpKaej'r/e!!`oSB=cBU+q+5I!=cC4rW;k:$2so+"e>AFrWQX/!!6p1p&5!2
-2RZCLAUrKpAP*_PPP7[)6EQ2!W8/\!!+D'WrCoT"8eK.#hT+\!>-kc*s2EA!EeserW;4V"8r3$:YYg@
rWMrUaCG;L!!+4Wp\k3J3;!7[WmgA*n)hW3$lL?J*r5j;2Wrcm!omhnq>^a0,&G'DTd1$B!!*V?qu-Wk
GlS3N!!3A$ptu&SB)ho6D>El(!Qcbf!!3=_qss^enWs"O!?&$5rW2q`rVusJi:Hr6rWE%c*shB:kPtbe
&hdW9!r`0#?hF'k!p<;\r;Zn"hYd*H"8:itAGcE.,fBBU!Soj1!">mXmdfo1`c_q:/NkHW!!>4Grr1[O
!omnqq>^a2,B(QOVBlWH!!*YDqu-ZlGmaNN!X>_#hu3dq!!!.@q>1*grW11kqu?d%Nr/DH!V2ZT!!*t>
pAP*jRJm0e/E+;Abl._AR3)^e!!NE;0k)@/rVut2p%J@dkYD<Z!!6?^r:^*lp>sA+qu?aE`qTH5h`g]5
%'%nHo^_1bG8);W5qMj4!BTT$rW;(W"8W!%/W[j7rr2]pa,a0r!!,@HqYgN\I/O$G3839h!(-Yb!@?au
rW2FkqZ$X?p%/.anqRMJ!!3h%o_/7b^)m7R!>jIFrX/J=Kdm'-$kX-f(A&IC(B,'J'`&ON()n8:-_/QU
Zm,JL!E&I^rW<#G;#C:p9%j1<rWD;66Ql:,!WcWqp\k3K48]'Z.1uFW""e,!AHG@C!qlTq!Ijq"rW;(W
"8W!(0TjE@rr2`8O&YuV!CZ)HrW2;3r;Zj\gZAG3rW#Ri!!+J-p&5$]?30s(!@%4.rW;YG#l=T'':SUf
rW0karVus=gsH&1rX/J=Ke*64',MQ,*V:EP*WI,V)uLZ^*?cRP/tpee\0_+S!*B6npAP-ke5cDH!_h;G
q#1BYKL?s\!!310n+Ze^h`q#=!A,#_!!Y)hDe_ib"SMfs"+g@)rWN6"i_fmT!!tHEamB$+qT=juqZ$Xd
l2(A[l?rO1!Bo2prW#^m!!+P1p&5$^?NL')!@.:/rW;YH#lXi'!!3h'p%J@c`%(`d!?U'crpKapq87q<
!=T\^*?ZIJ+sR"0q]c%`ruh=`q]>YW#p:N?.5@UKosuOM!!-EupAP-kelhnN!`%GIq#1BYKg[']!!311
nFun_i'@2?!A>5c!!Y,jF)=Pk"SMfs"+pF)rW;:>!Vucu)Y3e(rVcotqsIeg!!-U+q>LE^3rT*[!cIf4
kl(Q7r;Zg*p&5$kkmmRj!)iFf!NlS%!!:7;rV$3kGldmE!=[T?rhTMrrV?!Omf)\<nG2PXnaZMTrVZ'^
!!,sgp&5$kmUH+p!WbXJq#1:%"8W!!!eC7DrW1k=r;Zp_N2KVO!<*&k!!5:JrU9aQrW;=@!Vucu*qK4,
rVcotqsRkh!!-U+q>LE`7K*8f!cHop!&XWS!"8K!!r_BoqZ$Xtrq-0jXp"S$!m(6:pAP)E!WE'"&D4,a
gAV9Sq=<tBn)*X6nHJL]rVcZ]rVut"o_&1brU+1o!!30ijnSfV$NgD+!!34PrV-9li'I;A"$MpN>l+O#
!qQBn4mN"#rW;@A!Vucu+S,F.rVcotqsRkh!!-U+r;Q]p!Urb]!!*.=hu3U8r;Zg*p&5$klONdl!*Jjl
!NlS%!!:7<rV$3kLB7AS!>=)ZrfR0_rV?$Pn,DhQnauAKnG)MWo)/Ibr9aI`!F,6irW<&eAGlK0!D)AJ
rW*B0q>^QuJGo6A!T?HF!!>ESY[dP1rW;Zk!Bo`KrTsOSrW<&K7f!)d!^593rWi.f2$3g[E;fS2!O!"4
!!$`jrW"/?!!0Y.p&5$<2ZipX":g48rr2cn!qa3[q>^R8V>U&d!r^Cmr;Zj$e>iMMrW%lU!!,7Po_npj
gJ.SG#tCoTrr)TLLgghj!<)s!5kXjM!T$!=!!X[Squ5Gl#jqZo!BA]crW<&K8,<2e!^bZ9rWi.f3<K6`
EW,_4!rfD6rVuq4hu3U%qu?c.r:U$jdl@O/!!3[ie+inDoY?.V!!4+:r:^*krR!+n!!*AUoDX@@j8K%J
rVusenaue^rS1<K!!u8sjSo,Pi/D+Sp](=^p@eIdi'I>B"t$qYro&#+mJm:h4kT`4hu3]UeOTH9!WtjG
p\kEkSN?oR"EFD8rW087rVuq4hu3U'qu?c/r;?QjrW:Y4"8r3$&<>67rW;c/K_bZM)lEQ,rW<&H/H#PL
$.cfhRf3;_rVusjnaue`rS:HR!<)s)9W@+PrV,90@L`)4!CukWrW2"HrW!-O]_h]gGmNg<!WkR=g\q9M
5R$ua!\M[oqYpEl"j/Y(+Lh=ErW2CRrVuq4hu3UVqu?aok4S]Tr5U_n!"Bf<ObA.*E,]uJM/478qZ$[8
W:]c^"879M!<)s!+PqnQd/F#\rVusQmdpDZqpoEX!!X*+J:)N)"SVls35tUj!r^4jrVuu1q#:6nn='1R
o`,%ecMZGr!r5+cq>^RQd/3M8"jAq2-G06OrW2FYrVuq4jo5/V!*K.!!E81SrW<#A3;`ac*)DoXK6hQY
H%V0!+p.WA!ZA!0p&5$eJd;5S!@6OKreLIQG5_IA2ZW=<rW<#OB`%i7'1RY,Hp@o1!!,(!pAP-lat*Gk
!PS:-rW;SX!Ug!i:"&sorW)`p5m@)b!]AC&p&5->4:<XPrV6?mmnE]\!,:?i!*T4"!EJ@VrW<&C3rAse
*E&DdL3mr^HA7T*,6RfC!ZA!1p&5$eKa7PV!@H]mrk8:2Hi=!G3q)\>!rUnhqu?p77tubI63d/a!BA*m
rW)ltb:W\n!PeI0rW;SX"7H3k:=T3rrW&>]!!341rUg'mrNqF1q>L*f!V]^q!!$a.roj=^[0lj4!A<$s
rW<&P+T)3A!sA]-r;cs$!s8<!!t)++rUp-jeJ%l]!WdE;j8OZ0oDS_irVus&MXp`KrU3tmquH]tp&G.4
WVuPi#5jSi!!")=r;HcpS/1Yq!s;?SrTsOPrW&D_!!377rUg'mrO/*Hq>L*f!Vg%$!!$`jrW0G8r;ZjQ
g@Y@GrS8as!"&f3!s8T*!<N?+!r;m!$EX.'p&5!C(B"47!I"4>ri5qt?2ag)"cW$O"9%[q!rN&t"8W#r
!!4.ArV$3pr07Wi!$D1;rW;te(@hG-"B!tQgAV)Aq#CI!B`7T&"oYp(h"q!Irr)fspga:'!,:?i!OiL9
!!+k/o_npjh^A=%$3UM8!s/K(!WrQ-q>^U)Xo&(irW1Udr;Zm"G5(_0K)X^-!+Z!.!="YVrWE,f?j$<,
rWDio!ZnQDpAP9oR1'&q+oV?<!rJK(nc/gs;Vh<Nrp0RTrW1Omq#CC8nGWF]p&5!_:&Y+mC#Amjm8Nr`
!A)jorW;u20DY\?!!4(*p@S=bpg<q!!Y`$?WrB."!'^A^!WtpPo)8^gd7`p.![XZ8p&5-[/cYkQVY^8q
qTO=I3Bd=0#XUjC4ZYT/Y3t!B!S8Ok!!"85rW)]drW<)j<;ljtC#AmjmT'2c!A)jorW<#>2=(;E)jp?k
rW2e$qu?d4\GYstK)Xg0!(["g!X)*Uo)8^hekPT5![af<p&5-]1&q:VX8;f!qTXLM3C*R8#td]Z6p<[m
@Bf7tro!bVfHU+k!%@@9!;H0c!VBLn!!$`jrW2Ihr;ZjMfDPXCrW<#C3:$VH)k$HmrW2e$qu?d4\bs/?
Rf3:[rW!!&9]YdD!WC^P;==Jd-E?e4rWVXG!!!/(qYh-(c%.l95tjsH:.e2L5Wh&;Z16NH!N?S*!!*IT
p\sU[!r^.YrVuq4hu3]RU(%#$!Yqs;oDSjh^c2Jc!!4=?p@S=cpRr&q!!<3$=6529d/F#$r;Zj1^[_:*
r8CujoDf"!(O!sspAP<qk[+>j!$okbrW)]lmJu_Qn,D_UoDR>@!N?V+!!*O[jSf5Zb8pQ^!,:Qoqu-Zn
W"Aq.!Z&-@oDSji`&Ing!!4@Ap@S=cpnA5q!!-9bci/_!!'U8\!>33=rWE)X@gho/":#`db5(c1#Q<mq
!WW3LdJ3\Cp[7J<rU9mWnF-AE!V?9BrW0#0q>^O+L#i47rQQD_!!$`jrW;qu')hk4(UX/4rWE)=3<\dN
![FT:o_npeUCI,$!F=iUrk8:255bH^'#a>>"8q4k$hOE%#8_R,q=adhrTR_n!WW3OdeNeDp[7J<rpU3`
nF5o8mdB]Ff_toL%f-/+)nP,0!qpL9rVuq4q#9LV!r_(.rW!!*@JTKn"8q/5+SGd@&-W.9(hqIqrUp-k
qP4i'!!3e.rSmg.rq$*h0DkeN?hj-i!q`T_qZ$Tsr;ZpSRHXM>rW;Cu!WE'">O9`9nGWHd%f-/+*kgY6
!qpdBrVuq4hu3]Uj":61!XWN8o)8dijG>5apAbI5"pP&GC"W:\p&5$hV%ih-!YqO0XT#7!!''oW!Wcg,
nGWL^Y=\Tk!<WB%!!"hWRcsV?rW;G!!WE'"?1#E+!N-G(!!+.TkPkJ[!qpmErVuq4hu3]UjY-T5!X``=
o)8ahjGGAZ!!jAH#QPcXgA:d@rW;qn'`7q4(T76)rdt.-rW#.\!!314qXFIcos.<i!!30)!r`0%1n*\*
o_npYBEA)4!FG3Srp0RTrW/o,q>^ONhW4Y:fF.WX!,:9g!*fC%!=[cPrW(mTdgU[W'bM*(=jkjNe(jik
rW14`qu?d"D#:11Xo8<bqu?a5g[>%@m/,63eG[hrk5PAQrW<"f#Q=])"Jkt1rW/o,q>^OOhrOb;g(+&]
!,:9g!+Gg+!=muTrW(sVdgUg](D@N2@FWlZe(solrW1:equ?d"F8PM,K)Xg0!La&f!!+%pmf!4SqpPSr
eGdnsk48KQr1"#k!!3>'r8@S4rW/o,q>^OPhrOb;gCaAa!,:9g!,)61!>45frq$*hj8IF8LG0S\(+<\C
f%/=,qss^ec6<)c!WmQB]De8u!M9Dk!!++snc&Oe!:Tm8"4YiNeGdnskjn]SrLF2m!!3A+r4i43V[iP'
!A`O+rpTgephBX+!,:9g!+5X(!F#9`rWV/gZF%pQmJ[1\C'4A6!@-9Nrm:WFqD/!L!=%*&rW2.<r;Zj$
U%83-rW/o,q>^OPhW=_;phTd-!,:Qoq>LA.qu?b(q!.h^iOcM-eGAS3!qpI5qu?aDgWf_QrW2jRrW!!"
$.dQ(!Tu?=!!*8%^A\/2%f-/+1Z%6m!VpU1!!$`hrW$j6!!-L&lM^tI^:1Z)qY:'`rW;h5"8i-"-JOmd
^&A'/2uN^W$eNi+"6h]D!!<3$#-,E:!T#+!!!347o&foQrP]rY!!*Caq#9FT!.=\E!=c`hrW1[mqZ$Xu
mbn(rrq$*irJLLQ!7TEr!r.$Ar;Zj$T?mN+rW1k$qZ$[!B_(<b!r^.`r;Zj*O59d8LAV#P%DD3/j8K)6
+o;6?=RW9hWr<%tMu<VV!Rp$,oDSgdHNF'F!<oC8rW1k$qZ$[!C@^Qe"9/8@,lI]D$^'9E!0-mV!=lij
rW1e"qZ$Y#n+6O1ro!bVrJUUS!<LZurW;kD!rW*""f^M\li-MT"87`l"9&9%#W:#lrW;TC4o>9\-.1NI
!$1t;!\M[omJc;J!V8#B!!3Y*qksFprW1:mr;ZjVp>>lCrW0tHqu?a"SA+t)p66EsrW!!*38!Bm!q=r3
qu?aEdbOg%*rH!>/^F7BrW2XLqZ$[.V#0Z\K)Xd/!RE4n!!,:XeG]Kh&GuM/"/"KMi;NiPQl-#*!!3Ee
g?/A9nD$D/!!+Iqh#79pqu?gNcMRUjrW2XNqZ$[.VYdt(RJm66.fB>J620sLj8K)#')V_1"/*@,!r9*;
r`fJRe+N_5rWW5qUnDTjqu?d#Jb@gt!M^8)!!4sfqpkZIqjn2n!!*+0!8`A-ci+"<JI;AV!Y2=0f)>^E
BDVZ0#-7=obl.\>ZY]VG!Ir\brWW5qUnD]oqu?d#K_OU-q#1;i&c;V11qWY8rW;ti$iBu+"(L-2reCCS
oS*bS"98E6YPcuN!V^7(!!*;+^&A$-!OZbC>QK?,l2Ckaq4s[)7Jm,e",?U+rW/l.r;Zp#27rbBrqQHo
qk+Aq!!3:5hj48SrW;_J%/p5.'!V;brW2e-r;Zp"!!f[?rW<&rp\sgdq#0LW"o[Rt#RCS1!!.97p\s:R
!qLR:qu?d0>kchK!SB+(!!<7,o)7JFK)Y??!r_^?r;Zj[iR[u/WX8P&!>Y7QrpTgfrVZEho`=jdlM_"d
k\g_4"TeN$!I+.irW;Y8!W2p!&7"u#roO+[fJ3:(!sE''rMfdqrW<&j.fB>J45o6!o_nlk$2X]'(%f3=
!r`&krq-<erTa@brTS8,#QY)0qu?bBo@s6Gnp(96!!3a<pt#EFfeWI*!sN3*rUTr>rnm\VrUhZ=!!,1?
f)>]M$2X]'(%gMbli,B4!rSJnq>^R)B(=RR!r$[GqZ$[A\bu!sli%"_aHQc(!!3C8j.u[SrW022r;Zjt
iSje3rW<#.*;]^:&]^IA!rSSrqu?j"!"<N2g&;'IE=i!I![>5Sg\q<OaHcr+!!3C:jR)quro!bVYmpX3
!EA%2rW<#.*;]^:&^9,2_#=E5SdYAp!Xrc6g&;'IE=i!I![>5Sg\q<OaHd#-!!3C<jgY5UrW0A9r;Zjt
iUm-3rW<#.*;]^:&^RETpAP-lT*P5n!X!r8fDYjLNY;3h!?@`erWDY61'@FS">c&$rr.NKc2Ie7M?j([
!CG2frW/W2qZ$X4Pjn[SrW<%l$2X]("G#[prq?<mr/MEe!!++4h#7EFG;9="!!<<\NTeL`K`2#CMuX+]
!!,F6gAV,F*;]^:(6uK1j8K,YU'^\s!X+&:fDYjLNY;3h!?Ifkrqu`tnTQ_kr;Zp%23-pbrjr(1nr3nQ
!!,F6gAV,F*;]^:(mUWj$iT7(#n.7P'ed]'rUp0LrW;kE#5\B%$Y7rKrWE),,QdlD!sj\LqqM+%rp]mh
rV2*NrW!!#9'4t/!mtB`qu?g=2!F_Zrm:WPrT\;0%hK<i0?X%ff)>aGJHu&P!Xr_qpAXCW"8oVR!rN$#
$]OKMV>dCl"9&"L"o\K'!DDS;rqQHodU<R^!!=<"kkUbJ"T@V*%1rdV&K3=Gp\i\B!r.?QqZ$[+B\MDD
"8oVS!rN$#%$'`Pmf%h;h>RNTpkAtO!!30ok2$"<dpijb!!=E&kkX09li,91"gb_N^!cQ#rW8T<!W2p#
"W!EerV$6YrW0VZqZ$[7PkUjMW;ZhdCA\&4:?(@6rr*'!ifjWQr;Zm"4gp[U"Lu4``7=q]dJa3>/-5YK
"9oa1kPaH?!P9iY!!4+,pZ_[/rndVTn8/"&!E8(<rWN2[Qj=#s!!30c]%[.srWTpP`Q6d,dJa9D/cbqP
rW!'+)OKXcj8K(k.f02I*Lc`/rg!Han8/4)!!-'[p\sLX"T@AL$4?_3!WbU#V>^Jns8B_3!rB8Uq>^X*
8;Y[hkl(\]jc1AY!!4:@p\XrArlY3@e/\Ad!^X6bjo,DW^2?1Dqu?g"5hc)%rji%-rQY?5rW;u-0_tbP
$;?H,qWRn\qra.`qZ$[DXSBd6K)PiNeK+Sg!s(s'oB#rSpV:]5%/^)-!Ckl@\,Pjqrr'V2!rKVcq>^X+
:6<p#kl(\]ka!7d!!4UQplGE`rW1Ulr;Zp#9"acWrWN#5EBt'3!!E<ph>7,JrW;!&SbeoX`T[<erWq>T
U8tN*^Y8YcrW;u/#5J6)"Z_Xfa25X'[/I35Z*:L;Ybh$jrWVl-\=tbaqZ$[1Vu#$ESc0P!TqeWiY-+n/
XKAV+[(3f]]tCtfYHG%5[C6LQ['[-H\$WE7XRZ)b!V:U7!!iTI=2DPXY-dT_rW;e1'_q_1)p8-ArWVhi
Vm<\<rj3!>\$iWEV50d3r:g3GrW;0+SbeoX`R=_kh5.!P[CF33rVlctqn*11!!rZ04I"=?aMkm'rNuj=
[^WWNW:g)f"nT[FW&b7^!!3h9qP!o;rXYTpV6@54Za-m@Z*LUE^VTod!PuMLZiIT7]Eu-Y[^s,^[%jhp
q#1<dK)>TS!?kdi`OrRfmI1&RrW;e1(ARq3*7"NFrY"b$X1#UP\[]/[]=YVYWMcK=r6kQGk0BOoScHb,
rn.2Uh57-V\\-)CrVlctr4N@3!!rZ15F9sMbfIW4rO<'B\[o8ZWV-2g"nT^IX$-pg!!3k<qs+0<rWf$j
W3Wh>[Bp.FZEppD]YXQc'#_Vq[^N`\^q[Lm\@fPf[\U.uq#1<eL\q,X![D-ra1f!omd0oSp2:fD!!44i
rT=(cnZ8h&]YD(i]=\E_]tC_RWM@o>o`!hK"8pS<*;KR@'k#)3j8/]OrVbXQ')hCHOs^;2"pkYM5'>o]
rVb%ZpAbC))&<ku%LW1A&.&[M$4."@:7U5,k.s\0%Li.5!Z8`NT)RLD$iU"RVEk1^!X/f7#l=iH$k<dZ
&J,H_#m^eD$k3[S$OR:P$OQn@;R>$RrVlcurVbS3q>^j('+bQX%PYZLq#0ja"9&&CU&ZtC!!<I^oDS"S
$2sePYYG9'$4@=B$OdFQ%13=B!WXF%bOkbbrWE)J:)s'0#o-jgfBE,0r;HTOrY#2$c]os^!soAG'h<]7
q>L9?+85a>$QU0&'bLrS%/p\E$k*;>T],;$_GM?c&,?2,)T)F8rf[6frVY3E8,rYm#n%.?$3:G?!t#AF
&c<:B&cN.M%1j*_%LrpX&.T*L$WXOfrVc`p"9&2U3Vi^_!uD[`$5#/3f_GF;rWN2qd\ASl!!<I^o_n+T
$2sePYYkZ1%1WsJ%K[.O%L<CF!s'a+bk:qdrWE)M<#k]6#o-jgf]rA3r;HTOrY,8%c^$-c":>VM(efYI
qYgB@+9;0:"q;[q)&Enrp^RW7=eXjCl,6RE&J=g=!ZT&UZ2ViD'E.j[W(R*l":>PH$k!FM$4I7Q'DrRF
'E/FQ%M9<c%hB-]&J#<P%9KplrVc`p"9&2U4Sf$`!uMdc%21Y<f`CmHo_o!lqU2/ppAb:#M"LZ3rX&Q$
eZ`!Y#7_:Wr=98J&J,?U"Tg'1bk:qdrW;eF!;6C(!?F:<EHJ;+jl>7Qg=Y$-cMl&mcI:7me'uqHf)=;0
g"+^)f%Jj*G8C>U!!PEQf&h8\jT#Dc1eU+<o`,:'G3])&o'GGph#Z9aqptr&g"4aOeHjj`gtUQ:g"G!V
e,\%ued0mZg"Y98f?sKNrW_l;dF$Inec"+rdg+=KdaHOjd*M^<'$nhIcHaece^`:&e'umte^rL.#2J(n
dZGjXf`2:0VVC(jkNgDfnGi\BFk,7#rm_D+f@\a/f@ep(Iiegd!!WONbhh"$cLoEacdL@r"P;5SQRV>&
%06id\D5cgeC2^gcd'hprW2_Io`,O(,"6<gGI#QXjl,%Ng=b''rlkerf%/I(f%8U.g=cJ\#i"+ef@\d2
hpVXR)?om9"[S[0k^Wiu!!EKb:IGE[!"B3[mJcqPmcWWghV6`:rRqk<gY193f[na+gu%#Ggt^W<g&9P%
fEg3agYU`?f[9Throj=cn^#\5f%8OQg&Te%eHaUQeC;srdEqm?):-XScHjnff@S^.e^`7%f@ep5hVdDC
QRE!i!!Y<^hra.fmK([/nGikIGM(d-g"4j,gA]h2g=tK2K-CQn!!WOPdbrj/ch>TicHt+ng=b*.R4@V)
%06ok]AMAre^VpjdEp81rpfshpPT(G!"]/W95S]o[aOI'j58_Jg=O[MbmMhKf@\^,f\5'6g]$%;h;$`;
g=kB@eU8>?p](IdS_!"V#3>gf#<>^Q$N:&#!"0'[n,E.Rn*/rni84Cd(#7U#gt:<6g"G$7iSi\Nh:p]<
g"=pTfa-<cgu$uDg=#lRrX/2AeC<+'g"Y98g&'>#ec+&'e^W*td*gCl):6aVcHjngg"G-5f%/I)f\5*9
hr<\JROSKo!!kQfi99Imn'Ol"!!t9)g>Cc@f\"g1rnI_4gu$P7,RF&C!s<r#ir[ucch>TicI(1pgY1?5
Rk3t-$3C]m^>[l$f@80nrmB^(!VC[,!"&`9-9jRK/Lr4r+oN)W(*4P@"s4s3,U4T]r[S=*-m^&_,q1Jg
"p+Dt!t-DG'%-ao#uGGJ=%ke80J+b$-7:,e-RU>i+T3Jj+Y#,u/M&D#-mnp:!$hIgs!@t"/hAJ!)g(#q
rYtgT>o"@t+<VjU-71#[*ZZ=E*Zc:?*??+=(`3/h!#GPJ'GVH+,9nK[*ZlOK+sn`g0/>F7#Q`udo`,6u
&2ZC26;/d0nGj1&"",ZN+sA*P,pt)i-Rp\j"9J)o"U?P5-QX#q'F5Ho+t"]_-40h@!!ifF0.A1h*>T@k
(D[eFrW2\Bn,Ngt%Osk22_cs:.3fZ.'GqW2,:4Z]-7LAn.PNP0/hJP#-n-c*,6e2B!!<TT9,-gpj8]l#
=DVJL:ddB'1+k%+.k3#"/M8P"r[/X3,qh,51+t71/L`"n,pt&g-n6\u0eY.-*-L2srX8\E@2Bt*,:4cg
.OkrW+sJ0T,9e9Q*ZlIF*ZGsq)]0D.'bqN'+X\We-mBl],parj/i,CH/dVR2!!iW=3^H2*:b2_=!"]/5
/MSq--7'rg/1iG(/i"XP"Te2p"UQqC.j5]$'F5R"-S$Vn.164D!"0#M1bC.$*u>\2)&_E4!VV6:!"/i=
/4`)h1GLL4-5ZXq(`4PF-mpAj.k<2'1G^d@0J"Y&.krt0#6FMu!t-DJ("*'j$!_:V=AhXR3ArTC/H.4,
/h\q3-n6\q-lOHg2`ETL0eP(/-n$Gk.4Qeu.k`_60Ie&ci8=MmrPi:_+<MpY.4m,&.4$5a,paf]+WqmN
+<V[B*?H7>)&<r()^-UZ/1Mql-71)j/hf.C4>7*DpAj1Q#QbZ&77g0O/HbMC&ci+f1bpO.-RLDu0J>"3
1aWD.o)Jq#1cm95(\SOL'cSAG/Lr8$%0H5'pAbR,*&fQ$-6O-@)]BXRrWE,`<?qGP":l1p2':*D!Y$@Y
jT)[g#ltT2f^\S(naZ,Imf;kImfr:Qo^(*g"7uSF!4W$frWE,b>9j(V"V;G"2'2kp!7q2P%OMDA!!!&D
!:'Ul!YeMco(;PEnaZ,Jn,MnJmfr=Rp$L<p"24be!:BjGrWE,c?mGU["V;J%2';qG!!3ZY#5A2d!!!&.
!"8oC;r$s9oCDJBnF,iEnFQ)KnHJRXmFO]-L]F7Ohu3W<!7h%H"feuhqj.W9!!<=9ejAO""9AQ+!s.?\
ec60d-#%42A78bF<)ck$='"ol"C5e`=sqVrJcOO*hu3Z@ebuEMXLdTlRgdjJqZ$^#CthMD!!E?*"9\b6
!"'&^DK9W.AR\eA<!6</>$+ht<!6TJG[2hf!0R?PrpTgem+)'5"g,H'qk">E!!<=AhFm#3"9AQ+!s/#o
_Z12T.r]TKC1h'\<E*+.>Zt5%<!?92EdD%EiW+Q1a8jfj!rJZ&q>^X!!<N<'o`41U!sO8R=Rc@k,l.N@
!W<*#!PSR.!<*'%!W`>g!!<6("9Pk/!=oD4!.k4M!7q,Nqkk2+!<3)u!WW8W!!<F^r+,<t!%RjG!<`H(
!rW6%!OMh."9\i+!rW*!!V$-l!<`Q.oDlW+!>Pp\!4;gXrW;tt)#OC6!<3*!!o*bX#*&OqnGiPBqu?g"
"T\Z&!rrAL!9=.Z"9JZ,!rW-!!V-3m!X&Z/^&[g+!>u6+!:'X<rWrJqfreis!!*/r!sSf=;/0c(-fY10
"(/Q)#kJ$%.Eqejr7Z]I"TAK'":Yef<.^6qN.#5+//JQnhuE`XZ2jOt$3:kkC/7Z#3&!!%jT#Ah-#r)C
rW:D9"82]p!qlU-)*aL[Q@a7#EHHP\LPLeBNf@inmf<(^#8B:TJTYR4>P;5'A;\ju*o-et&j\h:rX&Pr
fr\g!!!*0(r<3'%"p5N>Ec!ogirB2bA@kSDo)K%Hec,RGg4(@OrWE]7%OY/'N/`U:?:$(U#6E`_rrN#t
X8iS/(+jW0<D5;(/f<[M!X^5q!:BU]!mjaIp&G'pp&GaG6)(<MMLKu!H@Uj4O->ZmQ?+#,!!a9*ObnC#
A6nn4"_X+Mjs0uq!:^$j'L>%<rWrJqfWAa"!<E8r!sK?@G&TSqirB2bB"h7Qq#L9l#VFg1rqtK",6[uJ
%Km4f:je.YKlpZd-kusfhuE`X`;nlt$N_+tH<XKE2D-Qu!Tj@a$RKrbq>LHD<sJ?u!!N#r'*0(>VlcbT
Jq8>uKoV=]R?a>4GQ8cG!!a<-P`1*3AmP+6"_jFUk9g;e!!3m%6Jh_>rWMkh7N2^-!so,HE8^`pgW!b@
nc8[jqZ6`uqu?d$'F440#6A6+rqk,J'`A+J$U'<^iq3$@p@@P/b,B\Z)#sX;!q?9c!"Ar/!WrN.(F(=X
-R'?6Z2b.6/jW#i2&HW&p]CR!!Wi6"o)Jn(>E-c%q#1?iC'421!sBV[!Vucu&7qg$o)8jjih%%f!!2Ed
"U,-KSD3u1rWDu<BE6rj"=@oZkNCOt"S8?W)[c6@#mM/`hu<W0a^uC\!!!'!!r`9'!s/N%!!3<?#kJ$$
")IZ1qTrC[r<*Z>4G^f3oCr%Rn`euQV0Y]RrW*$$!U0Rn!<<0(!sKA\,pjlY'F<[ud/XFV0L88l2&HZ(
q#gd%!s/Mn!!WH*&n$mFqtU-lq/6E1!!<EP*!5s:!>&iDXQK*Q#5dGT)uos>li71n#B$3kr9sUeq9!^Z
huEm-CS^.Vnc%eP"S8?V)@?'=#mD&]i;W`1b%DR^!<3)r!rN$""rRa=!!`XHq#:-:=VL`9&ILXU^u=nZ
p\+.Ai5VO<8fe!7!!*/b!"Ar/!WrN.'HSMG,97F&Z2b%50gSDo2$+R#"S`'#!WiDm!!WK-'Om?NqtU-l
q/Z`6!!<HT*s29=!tf1KkOSTVqr=In!!!&d!!NT5DP>tcrr2Kf"8U,c"5j.^-YoO@kM#n;rPC5lpB(X*
%i7B2NS=7.rWW5lgf>RF#qe"g0J=dp)@m#M!rE'#!Wi)s'+-",LRtoT='T3C=]&Csq=qiq#lOi0%U[NT
r;HTkrX&Msk.4Fq!WiH)nc0"$6?J1,f\+f;$j-D1'L8A3e()g^Wet7E(CUWX$PH0mT@!_jDZot<!!2cn
!W``KpDX2\:1"+o!##MR>#A$d7n?$14[V_;:GamK$O6/(!!<-"#6m&QOJT1nde_Z"hX^L@q>LZuqr;&s
!!**#qZ%*7:I.$03\`!%*`12Tqu-*b"9&&M=oAC2!!>&Z<D#SC7ncTP<EB)p#;mhM;pG(5rU'Rcibnnm
!#Q/1Ebf,a;,0_Z<)lmi5Wq.j2_cWu;:G4=qq1lMr4k#jpB1^,%i@E1MV7k*rX\r!gfu0Y2*<lX2)$F&
'*e=9r<*-'!r2g0$n?dlV7<a7=^50/93J4ipq]9&r<*<8?-W*@rVcWm"oS,U\P`\3!rrDn!$qh@I$2S'
g!u/o!s8Z/5Fo^=d`oP'KO$>H$OI+H&lk-mdFE7Aqu?]tp&G*o&b[.G.U-Wjnc/[o*t_pc>#\F!:I[iJ
:g$LK1EHr0o*#'qrW!0-2l)nBZFeQ]g&p7(qYg6h#Q=P\Aek@I!r;m,&6qmu:dmN"*ZnD/o_\UXrXo,(
gK=RZ!s8Q+2dp&m8kDoa%U*.I@p</B5:n*Yc1h)5mJ[1IGm*jA)%]AfGAU_k<`E40@:3),6pa7*3@c%I
eb8mmrWE)60Eh1R#m187%i@E1MV7k*rX\r"ggDTe3BoYf4#ST7'aFU<q?$]uq#D':/Vomq]!>^G>$4Zn
=f_Do_*SD*!sT6@c1_)6rVQR#qtK0_;[3@*!s.rm$3j:WQ-%\3eW:7BrW<0bS/&oed`oM%Jm0rB$4."G
&m:X&dFE7Aqu?]tp&G-p'-?le""dr$"nDX,"s[V`?s-Q8<D6(_<F&<T1E?i-ncJjnrW!0-40,'X[_:/e
g&g$doE"geq>LNqqrDK/rW2iq%MNAN93+\O1*RiCdId>7o)8aiptK$O!Y#,34Cr#+:et5&@:Ek`ra?%"
0d]rGp\OjUrW;,0#58*$&Pn+/F(,kk>ZtEGB4Y4?8Oc6<4YIjVf(T"?rn@>Qons@[!tGPE'dYe&8RdUe
g[+G'r;-C#rVQ?WiRc>H>Ug<ho`G0qrW!`8!sT5aS&bF*rquN\nFQ8@mdp;P^d/2(!sB?3P2Q63rWMYh
>:BpW!s&W7rW*$$!W)j!'J5%*rr*<#pqSrp!s8`f\G#murWr)Ob.+^\ZdeOErX8\O=$\qj"9JZ-!<N0"
#6=l.!WaUDqY'miqp9$K!!WiVFkZfnrqlZsp7!]?q#^a)$OdFQr<ru>"U##<*^$7WrTa@cr91b8*<c<C
#6YGE%N@EgjQQRIrVcQSUdY[i!s/a(m.^MArWiE"p#k&YR0`cl#QXu,!!*fi`SeQ2!qh?[rWEK3$l10J
4\/t;"h!+Nn+HVTrX8]%p?gehbahrf&d@q2!!E0"('=dP/#15`rr2iinaH&>n*T]BqnG?"rWE?=8s%s-
p\k<`W*(MVr<*0(#R^P3!<N<!!!<rgM!b3@%Jfe43sGfj#<B6drVlfprWr&La0VkKZ.8FErX8\R>s:4g
"9Sc0!Wi9#!!<-%!s0gGqY'miqq$#`!!E]TH//AorWDe\/dV7U"UGJE$k3[F$jd7F"U>GX5c<]AnG`=a
"oRSqF<Cbb"9o5B%idWojll[JrVZKRUI5Lg"9Jj*m+hRRrVZ<Lg!cAt!<<-%!WW3'(cBUsqYnP7!qhB[
rW<W7$PasF4\&n:[+jp8p&+[c$iTtrmGQR>SQdNT"n_rt!rW*,!XB8gVp"u:rquQ^$LmWWmd9TAqn>9!
rW<9<8WVd+p\k<`W*(JTquZs)$N:&,!Wi3!"9B5iMs^NC$i0S23sGch"us'brVQR"n_;'hX/iJVoD\^s
rR>4=2]W#&!s8Q)rVup!rW<6(-DgS4rWE)SIK9$@":ZT'h>R0K"8&!5#PeH*#7:hI%1N4D#mgb<"q2S@
WTa<GrWW5`\o]%tr<!9-$4IIe3gSplrWN2tq<"CP6jrqq!XMWhh#7ucr:K+(e!gaH!!!'%!!!0?2q-d)
rr)g-pmDs$#Vp.PUr1g>i9L%5rV-9tr9C\IBLt07('aX<&d8gg-n-8^#R:\M.R@0TMQ#;&p&5Buqq+[N
!s8ZMQeh?4q>LQrr:Zg5#PnN'#7150#6kkW&Iq.8huNBIrX/PI8d>G#"[B`prV6?lrVcTnrVc^!rUJOD
?Q/kF":,YE!<W0$!\(h[p\kBqqs9ma!<N0$#ltAu2_H(1S)!N.rWE#;1'IIV'*]48E/0@1NJrgSMh#&#
>F!OrrqZQmrUp-nrVPZ(/.MLZ#6[2MS#+9hqs+.drVZ<JaI?HX#5nW+#qi+Mh>R]Yq9b4'4Z"8brW<'$
":'1Xj8Hal&GMM.":6esM5.r>gY_;hqu-9g$2j(qLhB:<//AKf"9o&A+"/N[+U\Sa%2^]c=`B>"g\(7=
%/p(T:'q+,"X02ep&+Xb"o\AmT.($A"TJc,!t#/5#9"R!&js(bo_narqohV;"9\om^%VF"rW)oqqZ-Tn
rWW8kfr\Ksr<*60'*\L?r<*3*.D5QPrW`>um%Y'l!r`9.!XhI[1E\fMh=14="8]tl"oAE.#8TC>Ko(_H
MuJS<ITo0BPL/Lfrr2lhrWW8tj*`Hfqud6.4,fT,biS`prq?<srVZ<J`gU-T#Q4c-$8&(Kh>R]Yq9Y(#
4>S)arWE-&":0I_jSd[/lM_@hQP]f10PQB<_UdK!lLk&Qp\kKslEl@Z82i%7#5\K8"V;_&-m0W=$P"(/
7p9kkXPELArXAc&f1cPR!sBd5h"CU@rWW8up7E`;rWE*$!=&o.!sf/Q*ubn_[c$fVrX/PG8-]5!"[9Tm
rV6?lrVcTnrVc^!rUS[D>T*JB":,VE!<W0$![t\Xp\kBqqs:0k!<N0$#ltH,5rKrOS_`i2rWE#90a.@U
!!X#N4)Tb/MMmCMMMZdc6<TQ"kkP/VrUp-nrVPW'/.MLZ#6[,HRB+Toqs+.drVZ9H`gU-S#5nW+#q_tJ
kPk5T'E.aRN)_tr+9hoL!WrN-#_BADrP/=<rRl?aD8u,@qu-$`"8.^(%0-V-!tc"qBr/hrda,hPbLG>.
lgXTEo)8se[7(<&!sC3Pp@nOiqt8R",m<fA#7+,Ch;-lOrVZWsqqk`erW<3T[.s%f!<!&kba:?uqu[!'
"pFf*!t%`PqtU-pr:@pN-O0_O!s]-@iTTC]kkk)Q!r/Q,r<!9-'L-rKg@P+9q$$HUh<"G1p\k6kqu$0e
"T7]&>nQu:!XBH*"0(edrTa@gqtBUH`-FNj&I&+8"VOCNYO)5ErWW8nYsT'*p]CRMT_IUJfDZ*Tf5sGs
`UWa#rUBdhoo1@/#P\E6%P;@i`QurV_T'dKh<!tmpA=F[$M(Pl#Qt86/Yr(=q#1Hoo[\mF"nMj%#Yr:p
hqdVsr;HfqhH^He"9L3^q!J%arUJ$q2[oTe!X/f4qZI!/9%<b5rW`;l`cEL4"8r?-$=MoYk2GS%rr2`m
!r&E(r<*H2'L$fFg%+q5q>(!a"nh-9jnJ`Jrr2ihrWN/d]j)0I"9o,H5GmrHrTa@gqt9OG_KS-e&I/1:
"VOCMXm>r^roO+_rUd9Z&-_h3!\Bu<]`&<;f5jAr`UWa#rVlferWMnQ-O^4S!tbtoB;<GkdETSLbLPJ3
m.'fHo)8sdZpY-$!sC0Mp%SFhqt/Er,R!]@#7"#Bi8EJXrVZWsqqbTbrW<9UZhXP!n,<Lhn]@%T$iC).
"9o#+!s8m&eGK%?"oRu3F!h7k!s]-@j6Pmfl212R!r&E(r<!6,'0^]Eg%+t6"nh*8jS/WIrr2inrqlZt
r9_1%&c;_8#8KJ#nG<+KrX&Jpo'=,94Wt@?r<!398Tq6%rSIMWrUd6X&-Vb1!\Bu<q>T^Zg&;-NlJ(V$
m/@(I49YK_#RD8%=d@;(qYfXW"o\>\N@+l.!s:*OoDSXerr*-#nBmqL3XkW_"pYY]=hse1qu.$&n^jgG
&-E";.B<"<mf!@fn<l0Go`GF',Y(dR^%VF$rWW8ma`oKHqu['+&4<i$pAY!h$i8%3%1kHrC89SXqqM)R
rUn0G-O'JO#6YT#HE>TfrTa@er9gq>@SS-QqZ@$/3M#=)q>L$dkl(\^dQRj1!sJrL8u(_M]D_s0l.PA!
q#9sc!ol?Gq?.'0)),-Vc1:`0kl(_`qrWhbr<*3RV=XZ^rW`;hd%G>=%J0c-#7hqZ^\7X'rXAbqf;`!c
"9\lVW:Tucrq$*lrU?14&G6/2#:)`8EP(oBqYgZso>c#-$N(#0"qX)+qXOOmqT1o1&2m?uU"o><h#7NW
rUn0E-O0PQ#6b]$GcK3`rTa@er9^e9?qhjOqZI*031T+&q>K.K"8pP0#5JB*#oZC/l2:8S`r6,;l.PA!
m/@(H3X#9]#R;2#=-Lo"qYf^Y#QF`$qrWha"TAK*/>_t:qYg]sn'I_G3=PN^"pYY]=24J-qu.$&n^jaC
&-E";-`HY8mf!@fn<c*Fo`GF',=PIL]Cl.!rWiDna*'*C!sAN)"9f?&ZMO+j$i7t.%1b?nBV=/RqqM)R
rUn0D-3aAN#6YT!GcK3`rTa@er9^e8?q_dMqu[0+#rnI:o_JIArWE)G4U(W`"UH#;U$;KjrqucorTjFn
k=u?e":#>H*BSDGeaNA5jo,AXa^Gn_!sAcRU@eE\rWW/IHSl<:pB(a*#7_\2C6u<dq>L6j!<!)qeUfq"
"o\T+,+J<)mJ[1a_^b?^#m:VZ=17;XnbW4[rWD_[1'da[#6YA]?'WM%rUKjorV!gUP1&^fqYgB\rpB[e
qS><"r<!9<6\j.ar;HTZrWN,QGT[=g!sJuSC!$/KgAV0O^EWXZ!soGO+pTquFKXa#rVaA-rVc']&*HXp
"9f&>&03fRXOQ\7rVHN[rWDu;?kiSC"9p-Fo_nXc"o6Pl1_9ib":>;<%N@<>Q*T?DrVZX!rV+fm4Vn>%
"9Tj9pAOCX!rKh`p&kR'$mAZYk3E*=qYg6h"7hj7#Q4c1"Uc\^PK*.knbrmop:,^:dd-H"rVbIL"8]eq
#lOl2'1.H%p&+den,E7a"T-qs*sq`G"UZDda8#VerW<#2,Q7fR#n@Xn1eVnmjS8]Pe,JV2rVc']&*?Om
"9\r;%idWPXOQ\6rT4"\q8cqXrW<9,,bal/qYgZod<RMY"Si-.!s8Z2%N@9=Q*T?DrVZX!rV+fl4;J,"
!s9a8pAOCX!rKe^p&bU($QrKWk3MR6rV?EpnsM3;r<!9-$78u@`ps#trX/Vt[t9ailgaiMrS%5QqS52u
r<!9;6A<k\r;HTZrWN,QFrq%d!sJuRBZKoHj8SiQ!rT_VrW<N7%2:!C8oh)qq#1/brWDr&<AXtLCk\%U
f(8e;ir0#DBF4Y?!sUT[oD/@frSqAtp&b[4-q.m/X3pA2qu-KjrWMi!8IYh$!s9$Yl2C#K!r_P9!!`6$
#Rqe-9RX;0q>L!c!lcYlr<!9;6\)f3q>C3ZrWN#ep&+d>rW;\H%fHJ4++r5;r;Q][rW;>,')D\8#oGL6
ZKqGeg&;KZg/\n!1NSMG][c'5qu,RS]`&?7ZVrVHC4hYOf(8e;ir0#DB+"V@!s^WZo)8RdrWE,Y@Lr/8
$P"RQBo8q;mJ6YXrVQQso!([p"oSQ+%sR::mJ[4dm<o68":,GW/P:DrjSAcIrW:"e"oSQ/&j_#Yk5"rR
q#:$e"ShN[r;G4G!qV-Wr<*6EK%BPkk5GGGEteBQ#725'BsHt#rUp0OrXSk[<>,s!EJp?ueDp)rrN6(i
rXAP-;_g[SK9<=foDALGrW;:q$2t#/"uE.Iq>LKpiaE>j!t,Sd6tqLXd-^Z+rVcWm"S/ff%Ku_4!tKM=
rVc`crWE,dI0TKL#Rqe+8pmr*q>L!c!lQMjr<!9:6%?K.q>C3ZrWN#dp&+dBrr)fto7[\Q!sBZrf(8h%
rW;8'')D\8#o>@2Z0M5bg&;KZg/Sdt0l`)@]%#d1qu-6fli+Zu$2s\_h<=S/qu$EMrW1qLrW<91;8W)+
qYgTrr6$\c!s]$:cfk#tqu-<h"9%\M+oDEF#8hF=r9aIcrSiMTrW<N>1F=(m?)>g$lhLDKrX5\<!s8`?
4.kX1r;H3cb5M_>N"Q6t&kfS&rT=(]rUG^ZrW<H1#7D>?R*+@XqsXOJrX/W"dZg-Np\OgdrMKSerX&Q!
k1o.nqYU3hhu3Z69)\qr$W+_7rV?EoqoLD_":#0:cKFirqu-<h"9%VJ+T)?F#T7O<r;$?brWE)VK-L9t
$P5'?*@k?hbhVLYr:9gpW"B.8#80(gjSA`P]`&9;o84.a#8'S6o)7_M"9%_D(&e=B"U>DO8X@HUo)%#;
$N9eIOd4PlqYU3hn,BEf$2s\^gue>,qu$EOrWE0!hb!eL":@rAp\jpe!rL(ip&bO(>gDO)qYU6drWE,d
O!+?&":#c]i;E!A"8q)/+oVQO&2GRP.pJdmgZnS3o)8lm&H`+>&NZHbjSA`P]D`-.M@p$r&PBA"rT=(]
rU>OUrW<E0#7D;<QH8"T!;k@H$N9eJOd4PlqYU3h\c0&:#OmEg'.IbGqY0slr7tKe#Q=f+#6k&.!ZR<p
oDSge\L%4W"U#>f@B8b]rX\u#NYhm$!t':u^phVVqYfj]#LPpP*`\HUq9/d)rWi>EANWkYhtlF5!rL(j
rW<BA8R[%LjSAc%rW;ukp\b#Brp9Uhmt2Yp-u73+p\k<ngfG'nrWE6-#5nZ+)j'^`rW;o)-2n#N"V31l
WU&pM&,l-Y(^1$F$?aV-[ES"6rV?HdrWge;&ft&;ebHWQ#PuSQ4AhI%qWIkWrW;u;.fKPU(Iqh[XQ0-T
dJa4Ep@lT+U](MeK,kRPC=)hOrWN/S<Y,N8!s&W1r<!$<!KcsFrW;o)-2muM":m%jWU&pM&,l-Y(BagB
$?aV-[ES"6rU0XicpA?c<0Yo-hYu7.#PuSQ4&M@$qW.VWqo:2c!s]T3?[Jm7q>K+JpAP-jp@j[Jg&;6R
k-UnukPG/OrX&PuaaZ_c!sBDCrW<6GJDC(orX8M")$9sD-%j2!q>K[Z"T@^r"9So3"$,06r;6Ejm/@4a
c)%u2p&2>u#6";Ve)9ruq>T^Z$i7LY!s9'Zg["G,rM9FSrWi>^Z_G1rqYg<jrVd*$pW%YK$3UMKr<*3G
IbO_krW;kk)?'aB,_<kpq>K[Z"9%Uq"o\W*38=H0!W;o_rW`/@Uq#IXrUBg,rW`>qj3llZrT!kbqRI^O
":ob3lLOcLmJ__:`r65?jg(VojnerMrX&Pt`dC,[!sKJDrW<6FIbO_krX8Lt)$9sD,Cm\nq>L0hoDT$o
m9g&!!sCU;rqc`orTsLfprfJCj7WA^rr)g#rV,@#i:d-0rX8S5*s2TTGh_NRq>If%li*+I#Q*YjUVH!g
rV6@!rr)W6ImjYG";_4?!s9]sh#-dC$i$Y<!s8ZPK>m!KrTsLcrU""rrW<?bh#%$Hr;H!]#5HH>\`<A]
mJb9-#6";Ve)9ruj8KG_]H@:Y%scpqo(r=Mrdt-krWi>^Z_G1rqYg0f#lXM<Hp\5D"W.+?"!N-Ir:Bmh
pn\l-"9g'%_r^^mp\smc"9%Uq"o\W*38=H0!W;o_rW`/@Uq#IXrO;b2rr)TOdbsitj8KG_\KD"X%sZjo
o(i6krdt+Urr2fVZD,%oqYg0f$2sV<Hp\2B"W%=@!s9ZpgALRA$i$P9!s8ZNJA^LErTsLhrU!tq!s8Zc
gA^sMr;H!]#PcK<\E!8\rjVk2rV,@#i:d-0rX8S5*s2TTGh_NRq>L9kV>bu~>

%%EndBinary
grestore
np
gsave
-156.833 352.87 mo
563.167 352.87 li
563.167 -187.13 li
-156.833 -187.13 li
-156.833 352.87 li
clp
29.554 39.9761 mo
29.857 39.7181 30.279 39.7571 30.819 40.0941 cv
31.039 40.2281 31.4 40.5201 31.903 40.9702 cv
33.073 42.0182 34.14 42.8601 35.104 43.4981 cv
36.083 44.1461 36.604 44.5081 36.668 44.5841 cv
36.808 44.7481 36.86 44.9412 36.824 45.1642 cv
36.786 45.3682 36.691 45.5352 36.538 45.6652 cv
36.235 45.9232 35.825 45.8982 35.308 45.5891 cv
34.216 44.7781 li
33.656 44.3911 32.9 43.7951 31.946 42.9901 cv
32.138 43.4702 32.429 44.2321 32.819 45.2762 cv
33.222 46.2571 li
33.377 46.6482 33.482 46.9882 33.536 47.2772 cv
33.609 47.6612 33.513 47.9662 33.249 48.1912 cv
32.987 48.4131 32.656 48.4291 32.254 48.2391 cv
31.36 47.6612 li
30.537 47.1342 29.706 46.5511 28.866 45.9142 cv
29.124 46.4712 29.527 47.3001 30.076 48.4012 cv
30.291 48.7611 30.505 49.1172 30.72 49.4721 cv
30.942 49.9641 30.9 50.3401 30.594 50.6002 cv
30.402 50.7632 30.195 50.8271 29.973 50.7911 cv
29.783 50.7602 29.624 50.6682 29.494 50.5151 cv
29.11 50.0652 28.739 49.4341 28.379 48.6222 cv
27.84 47.4081 27.536 46.7382 27.468 46.6132 cv
27.185 46.1161 26.902 45.6182 26.621 45.1191 cv
26.244 44.4221 26.046 43.9142 26.025 43.5941 cv
26.004 43.2732 26.105 43.0182 26.328 42.8292 cv
26.581 42.6141 26.876 42.5832 27.213 42.7372 cv
27.53 42.8852 28.071 43.2781 28.836 43.9171 cv
29.576 44.5392 30.423 45.1661 31.378 45.7971 cv
30.992 44.7011 30.515 43.5442 29.948 42.3242 cv
29.365 41.1661 li
29.177 40.6401 29.24 40.2432 29.554 39.9761 cv
.137422 .122799 .126081 rgb
ef
37.8362 36.6626 mo
37.1142 37.0396 36.6782 37.7126 36.5292 38.6806 cv
36.3882 39.5866 36.5262 40.4377 36.9422 41.2336 cv
37.2222 41.7716 37.6592 42.0996 38.2532 42.2177 cv
38.8232 42.3316 39.4152 42.2296 40.0262 41.9096 cv
40.7392 41.5376 41.1502 40.8777 41.2612 39.9297 cv
41.3652 39.0636 41.2042 38.2246 40.7802 37.4117 cv
40.4252 36.7316 40.0262 36.3387 39.5832 36.2326 cv
39.1602 36.1317 38.5772 36.2756 37.8362 36.6626 cv
37.1492 35.3466 mo
38.2782 34.7567 39.2602 34.5736 40.0942 34.7966 cv
40.9282 35.0206 41.6162 35.6526 42.1592 36.6917 cv
42.7342 37.7926 42.9382 38.9547 42.7702 40.1797 cv
42.5782 41.5946 41.8922 42.6107 40.7142 43.2256 cv
39.7562 43.7267 38.7962 43.8766 37.8352 43.6786 cv
36.8092 43.4646 36.0512 42.8896 35.5622 41.9547 cv
34.9882 40.8536 34.8082 39.6696 35.0242 38.4037 cv
35.2652 36.9796 35.9732 35.9606 37.1492 35.3466 cv
ef
49.1394 30.8613 mo
49.5234 30.7574 49.8884 30.9734 50.2334 31.5083 cv
50.3744 31.7243 50.5754 32.1423 50.8384 32.7643 cv
51.4474 34.2113 52.0514 35.4294 52.6504 36.4174 cv
53.2584 37.4233 53.5744 37.9734 53.6004 38.0683 cv
53.6564 38.2763 53.6204 38.4734 53.4924 38.6593 cv
53.3724 38.8273 53.2144 38.9384 53.0204 38.9904 cv
52.6364 39.0943 52.2764 38.8963 51.9414 38.3963 cv
51.3004 37.1964 li
50.9594 36.6064 50.5304 35.7444 50.0134 34.6093 cv
49.9814 35.1243 49.9184 35.9373 49.8244 37.0483 cv
49.7694 38.1073 li
49.7424 38.5273 49.6924 38.8793 49.6174 39.1643 cv
49.5194 39.5423 49.3024 39.7763 48.9674 39.8673 cv
48.6354 39.9563 48.3294 39.8293 48.0474 39.4854 cv
47.4854 38.5813 li
46.9674 37.7523 46.4654 36.8703 45.9784 35.9344 cv
45.9734 36.5483 45.9834 37.4703 46.0084 38.7014 cv
46.0494 39.1173 46.0904 39.5313 46.1334 39.9443 cv
46.1244 40.4833 45.9254 40.8053 45.5374 40.9103 cv
45.2944 40.9753 45.0794 40.9443 44.8934 40.8174 cv
44.7354 40.7083 44.6304 40.5563 44.5784 40.3633 cv
44.4244 39.7914 44.3584 39.0623 44.3804 38.1754 cv
44.4124 36.8463 44.4244 36.1113 44.4164 35.9693 cv
44.3724 35.3994 44.3294 34.8273 44.2894 34.2563 cv
44.2464 33.4653 44.2844 32.9214 44.4024 32.6223 cv
44.5204 32.3243 44.7204 32.1373 45.0024 32.0613 cv
45.3234 31.9743 45.6034 32.0733 45.8424 32.3564 cv
46.0664 32.6253 46.3874 33.2123 46.8054 34.1173 cv
47.2084 34.9963 47.7064 35.9243 48.2994 36.9034 cv
48.4194 35.7484 48.4834 34.4973 48.4914 33.1523 cv
48.4594 31.8553 li
48.5144 31.3004 48.7404 30.9684 49.1394 30.8613 cv
ef
57.0439 29.4238 mo
57.9619 29.3589 58.7039 29.4128 59.2689 29.5848 cv
59.6129 29.6888 59.7969 29.9088 59.8209 30.2438 cv
59.8339 30.4328 59.7799 30.6058 59.6589 30.7608 cv
59.5249 30.9388 59.3459 31.0349 59.1199 31.0508 cv
58.8879 31.0349 li
58.2859 30.9158 57.7069 30.8768 57.1489 30.9158 cv
56.8759 30.9348 56.5839 30.9778 56.2739 31.0439 cv
55.9639 31.1098 55.6349 31.1989 55.2879 31.3109 cv
55.3219 31.7958 55.3569 32.5158 55.3909 33.4728 cv
55.5939 33.4438 56.3019 33.3268 57.5139 33.1198 cv
58.2049 33.0018 58.6429 32.9359 58.8289 32.9229 cv
59.0439 32.9078 59.2329 32.9628 59.3949 33.0888 cv
59.5579 33.2148 59.6469 33.3898 59.6629 33.6158 cv
59.6939 34.0498 59.4799 34.3118 59.0209 34.4028 cv
58.7309 34.4458 58.2989 34.5128 57.7229 34.6049 cv
57.2099 34.6998 56.4349 34.8258 55.3989 34.9828 cv
55.4059 35.4478 55.4199 35.8218 55.4399 36.1058 cv
55.4899 36.8199 55.5609 37.2228 55.6519 37.3159 cv
55.6949 37.3598 55.9259 37.3678 56.3449 37.3378 cv
56.5709 37.3218 56.9109 37.2928 57.3659 37.2498 cv
57.8209 37.2068 58.1609 37.1768 58.3869 37.1609 cv
58.4599 37.1559 58.5659 37.1378 58.7069 37.1058 cv
58.8479 37.0739 58.9519 37.0548 59.0219 37.0498 cv
59.2329 37.0349 59.4179 37.0829 59.5749 37.1928 cv
59.7559 37.3148 59.8549 37.4988 59.8719 37.7428 cv
59.9009 38.1508 59.7049 38.4099 59.2849 38.5198 cv
58.9249 38.6148 58.1719 38.7029 57.0239 38.7838 cv
55.8359 38.8678 55.0509 38.7628 54.6669 38.4669 cv
54.2449 38.1418 53.9929 37.3908 53.9099 36.2138 cv
53.8749 35.7258 53.8589 34.9898 53.8609 34.0068 cv
53.8629 33.0238 53.8469 32.2899 53.8119 31.8048 cv
53.8029 31.6779 53.7719 31.4898 53.7179 31.2428 cv
53.6639 30.9958 53.6319 30.8088 53.6229 30.6819 cv
53.5839 30.1278 53.8199 29.8329 54.3299 29.7968 cv
54.4899 29.7859 54.6409 29.8208 54.7819 29.9019 cv
55.1969 29.7668 55.5929 29.6588 55.9699 29.5789 cv
56.3469 29.4998 56.7049 29.4478 57.0439 29.4238 cv
ef
62.5349 29.5953 mo
62.8039 29.6253 63.0749 29.8903 63.3499 30.3913 cv
64.7359 32.9273 66.1489 35.0273 67.5879 36.6903 cv
67.6049 36.5743 67.6369 36.2993 67.6859 35.8633 cv
67.8849 34.0733 68.0009 32.8643 68.0349 32.2363 cv
68.0389 32.1303 68.0369 31.9313 68.0289 31.6403 cv
68.0209 31.3823 68.0249 31.1803 68.0419 31.0353 cv
68.0969 30.5343 68.3899 30.3133 68.9199 30.3723 cv
69.5119 30.4383 69.7059 31.3843 69.5029 33.2103 cv
69.4979 33.2503 69.4629 33.5363 69.3959 34.0693 cv
69.1689 35.9113 69.0299 37.0563 68.9799 37.5063 cv
68.9599 37.6883 68.8969 37.9713 68.7919 38.3573 cv
68.6669 38.8173 68.3759 39.0213 67.9189 38.9703 cv
67.6649 38.9423 67.3939 38.7673 67.1059 38.4443 cv
65.8489 37.0293 64.4679 35.0883 62.9639 32.6203 cv
62.8379 33.5613 62.7619 34.1393 62.7379 34.3533 cv
62.7059 34.6403 62.6649 35.0723 62.6129 35.6513 cv
62.5619 36.2293 62.5199 36.6623 62.4879 36.9493 cv
62.3689 38.0203 62.0479 38.5263 61.5249 38.4683 cv
61.2599 38.4383 61.0569 38.3333 60.9149 38.1523 cv
60.7899 37.9913 60.7389 37.8073 60.7619 37.6003 cv
60.7779 37.4553 60.8139 37.2373 60.8699 36.9453 cv
60.9269 36.6543 60.9629 36.4363 60.9789 36.2903 cv
61.0029 36.0763 61.0459 35.7563 61.1079 35.3293 cv
61.1699 34.9023 61.2129 34.5823 61.2369 34.3683 cv
61.2629 34.1393 61.2959 33.7933 61.3359 33.3313 cv
61.3769 32.8693 61.4099 32.5243 61.4349 32.2953 cv
61.4589 32.0773 61.4739 31.7503 61.4779 31.3133 cv
61.4829 30.8763 61.4969 30.5493 61.5209 30.3313 cv
61.5459 30.1133 61.6609 29.9293 61.8669 29.7803 cv
62.0729 29.6303 62.2949 29.5683 62.5349 29.5953 cv
ef
72.1505 31.1869 mo
72.2365 31.2159 li
72.3565 31.2609 72.6245 31.3769 73.0405 31.5639 cv
73.3735 31.7099 73.6465 31.8159 73.8595 31.8829 cv
74.0725 31.9489 74.3915 32.0449 74.8175 32.1699 cv
75.2435 32.2949 75.5625 32.3899 75.7755 32.4569 cv
76.0405 32.5389 76.4325 32.6809 76.9505 32.8829 cv
77.4695 33.0849 77.8615 33.2269 78.1265 33.3099 cv
78.3355 33.3749 78.4895 33.4969 78.5885 33.6769 cv
78.6875 33.8569 78.7055 34.0469 78.6435 34.2459 cv
78.5815 34.4439 78.4585 34.5909 78.2745 34.6839 cv
78.0905 34.7779 77.8935 34.7919 77.6845 34.7269 cv
77.4125 34.6419 76.9945 34.4909 76.4315 34.2739 cv
75.8885 34.0619 75.4705 33.9129 75.1765 33.8249 cv
75.0665 34.2269 74.8935 34.9499 74.6565 35.993 cv
74.4495 36.9149 74.2635 37.6379 74.1005 38.1609 cv
74.0645 38.2799 74.0215 38.4599 73.9725 38.7009 cv
73.9245 38.9419 73.8815 39.1219 73.8445 39.2399 cv
73.7635 39.5019 73.6345 39.7199 73.4575 39.8939 cv
73.2305 40.1179 72.9855 40.1889 72.7205 40.1059 cv
72.5285 40.0469 72.3785 39.9329 72.2695 39.7649 cv
72.1485 39.5779 72.1195 39.3819 72.1835 39.1759 cv
72.1985 39.1269 72.2305 39.0559 72.2795 38.9619 cv
72.3275 38.868 72.3595 38.7949 72.3765 38.743 cv
72.4265 38.5819 72.4905 38.3359 72.5685 38.0049 cv
72.6475 37.674 72.7115 37.4259 72.7625 37.2619 cv
72.9085 36.7949 73.0695 36.1509 73.2445 35.3289 cv
73.4465 34.3859 73.5955 33.7379 73.6895 33.3849 cv
73.4175 33.2999 li
72.6405 33.0579 72.0405 32.8099 71.6185 32.5559 cv
71.2605 32.3409 71.1385 32.0519 71.2515 31.6899 cv
71.3065 31.5119 71.4195 31.3709 71.5895 31.2669 cv
71.7645 31.1569 71.9515 31.1309 72.1505 31.1869 cv
ef
81.0418 34.4497 mo
81.2188 34.5437 81.3458 34.6837 81.4208 34.8697 cv
81.5058 35.0677 81.4978 35.2617 81.3968 35.4517 cv
81.3018 35.6317 81.1548 35.9027 80.9558 36.2647 cv
80.7578 36.6267 80.6098 36.8997 80.5128 37.0827 cv
80.4318 37.2347 80.3028 37.4587 80.1238 37.7567 cv
79.9458 38.0547 79.8158 38.2787 79.7358 38.4307 cv
79.4758 38.9197 79.2928 39.4057 79.1858 39.8867 cv
79.0548 40.4607 79.0668 40.9167 79.2228 41.2547 cv
79.3028 41.4307 79.5958 41.6567 80.1028 41.9337 cv
80.9478 42.3987 81.9068 41.9777 82.9808 40.6707 cv
83.5388 39.9947 84.1808 38.9707 84.9088 37.5997 cv
85.0048 37.4197 85.1498 37.2737 85.3458 37.1617 cv
85.6088 37.0167 85.8748 37.0147 86.1428 37.1567 cv
86.3618 37.2737 86.4838 37.4417 86.5078 37.6607 cv
86.5278 37.8247 86.4998 37.9797 86.4228 38.1247 cv
85.7468 39.3987 85.1598 40.3607 84.6618 41.0107 cv
83.8968 42.0147 83.0558 42.7387 82.1388 43.1817 cv
81.7338 43.3757 81.3078 43.4917 80.8628 43.5287 cv
80.3198 43.5707 79.8328 43.4777 79.4038 43.2497 cv
78.5818 42.8137 78.0528 42.3337 77.8168 41.8107 cv
77.3198 40.7057 77.5018 39.3427 78.3638 37.7197 cv
78.4458 37.5647 78.5768 37.3377 78.7558 37.0387 cv
78.9348 36.7397 79.0658 36.5127 79.1488 36.3577 cv
79.2138 36.2337 79.3158 36.0507 79.4518 35.8087 cv
79.5888 35.5667 79.6898 35.3837 79.7558 35.2597 cv
79.8908 35.0067 80.0638 34.7917 80.2768 34.6167 cv
80.5608 34.3857 80.8158 34.3297 81.0418 34.4497 cv
ef
94.1493 42.9667 mo
94.4523 43.2247 94.4803 43.6477 94.2343 44.2347 cv
94.1373 44.4727 93.9063 44.8757 93.5413 45.4437 cv
92.6933 46.7657 92.0313 47.9527 91.5553 49.0057 cv
91.0703 50.0757 90.7953 50.6477 90.7313 50.7227 cv
90.5923 50.8867 90.4093 50.9687 90.1843 50.9687 cv
89.9763 50.9647 89.7963 50.8967 89.6433 50.7667 cv
89.3403 50.5087 89.3003 50.0997 89.5223 49.5407 cv
90.1493 48.3327 li
90.4423 47.7187 90.9103 46.8767 91.5533 45.8077 cv
91.1113 46.0737 90.4053 46.4817 89.4363 47.0327 cv
88.5313 47.5867 li
88.1703 47.8017 87.8513 47.9597 87.5743 48.0597 cv
87.2063 48.1917 86.8903 48.1457 86.6263 47.9207 cv
86.3653 47.6977 86.2973 47.3737 86.4213 46.9467 cv
86.8493 45.9717 li
87.2383 45.0757 87.6813 44.1617 88.1783 43.2317 cv
87.6693 43.5747 86.9143 44.1047 85.9143 44.8217 cv
85.5933 45.0907 85.2753 45.3597 84.9603 45.6287 cv
84.5093 45.9257 84.1313 45.9437 83.8253 45.6837 cv
83.6343 45.5197 83.5383 45.3257 83.5383 45.0997 cv
83.5383 44.9087 83.6043 44.7357 83.7343 44.5827 cv
84.1183 44.1327 84.6823 43.6657 85.4263 43.1817 cv
86.5393 42.4557 87.1523 42.0497 87.2653 41.9627 cv
87.7103 41.6037 88.1573 41.2457 88.6053 40.8887 cv
89.2333 40.4067 89.7033 40.1297 90.0163 40.0577 cv
90.3293 39.9867 90.5973 40.0457 90.8193 40.2347 cv
91.0723 40.4507 91.1493 40.7377 91.0513 41.0947 cv
90.9563 41.4317 90.6533 42.0277 90.1443 42.8847 cv
89.6473 43.7147 89.1633 44.6507 88.6923 45.6937 cv
89.7123 45.1377 90.7803 44.4837 91.8933 43.7287 cv
92.9443 42.9687 li
93.4333 42.6997 93.8353 42.6987 94.1493 42.9667 cv
ef
grestore
gsave
-156.833 352.87 mo
563.167 352.87 li
563.167 -187.13 li
-156.833 -187.13 li
-156.833 352.87 li
clp
37.6924 50.4427 mo
37.7614 50.4007 li
37.8604 50.3437 38.0914 50.2267 38.4554 50.0477 cv
38.7444 49.9027 38.9724 49.7757 39.1384 49.6677 cv
39.3044 49.5597 39.5504 49.3957 39.8774 49.1747 cv
40.2044 48.9547 40.4514 48.7907 40.6174 48.6827 cv
40.8244 48.5477 41.1444 48.3607 41.5764 48.1197 cv
42.0084 47.8797 42.3284 47.6917 42.5354 47.5577 cv
42.6984 47.4517 42.8694 47.4157 43.0484 47.4497 cv
43.2284 47.4847 43.3684 47.5797 43.4694 47.7347 cv
43.5704 47.8897 43.6004 48.0567 43.5594 48.2357 cv
43.5194 48.4157 43.4174 48.5577 43.2544 48.6637 cv
43.0424 48.8017 42.7014 49.0027 42.2334 49.2647 cv
41.7804 49.5157 41.4414 49.7167 41.2144 49.8687 cv
41.4274 50.1717 41.8234 50.7007 42.4024 51.4547 cv
42.9164 52.1197 43.3054 52.6557 43.5714 53.0647 cv
43.6314 53.1567 43.7304 53.2887 43.8684 53.4587 cv
44.0054 53.6277 44.1044 53.7597 44.1644 53.8517 cv
44.2974 54.0557 44.3734 54.2677 44.3924 54.4877 cv
44.4174 54.7707 44.3264 54.9787 44.1194 55.1127 cv
43.9694 55.2107 43.8064 55.2487 43.6304 55.2277 cv
43.4334 55.2047 43.2824 55.1127 43.1784 54.9527 cv
43.0854 54.7657 li
42.9904 54.5747 li
42.9094 54.4497 42.7774 54.2657 42.5954 54.0247 cv
42.4134 53.7827 42.2804 53.5977 42.1974 53.4697 cv
41.9594 53.1057 41.6104 52.6297 41.1474 52.0437 cv
40.6164 51.3707 40.2574 50.9017 40.0694 50.6357 cv
39.8574 50.7747 li
39.2504 51.1687 38.7404 51.4387 38.3274 51.5837 cv
37.9774 51.7067 37.7104 51.6267 37.5264 51.3427 cv
37.4364 51.2047 37.4034 51.0477 37.4294 50.8717 cv
37.4534 50.6907 37.5404 50.5467 37.6924 50.4427 cv
.137422 .122799 .126081 rgb
ef
48.1788 47.3427 mo
48.7808 47.0997 49.2438 47.3787 49.5668 48.1797 cv
49.6288 48.3337 49.6678 48.4347 49.6838 48.4847 cv
49.8428 48.9557 49.7258 49.2707 49.3348 49.4287 cv
48.9548 49.5817 48.6868 49.4627 48.5288 49.0707 cv
48.3228 48.6237 li
47.6888 49.0057 47.3438 49.5487 47.2888 50.2537 cv
48.2088 52.5237 li
48.2778 52.6947 48.2768 52.8607 48.2048 53.0217 cv
48.1328 53.1817 48.0068 53.2977 47.8258 53.3707 cv
47.6388 53.4467 47.4708 53.4447 47.3198 53.3647 cv
47.1798 53.2957 47.0758 53.1767 47.0078 53.0077 cv
45.8148 50.0497 li
45.7768 49.9557 45.7238 49.8157 45.6558 49.6277 cv
45.5868 49.4407 45.5338 49.2997 45.4958 49.2067 cv
45.4278 49.0377 45.4218 48.8767 45.4768 48.7227 cv
45.5328 48.5697 45.6538 48.4547 45.8398 48.3797 cv
46.1748 48.2447 46.4428 48.3367 46.6438 48.6547 cv
47.0168 48.0417 47.5288 47.6047 48.1788 47.3427 cv
ef
53.2831 47.1837 mo
52.8521 47.2787 52.5121 47.5307 52.2621 47.9397 cv
52.0131 48.3477 51.9381 48.7747 52.0351 49.2187 cv
52.1291 49.6437 52.2751 49.9457 52.4741 50.1267 cv
52.6741 50.3067 52.9251 50.3637 53.2301 50.2967 cv
53.4261 50.2537 53.6051 50.1797 53.7671 50.0767 cv
53.9291 49.9727 54.0731 49.8407 54.2011 49.6797 cv
53.9401 48.9457 53.7681 48.3917 53.6861 48.0177 cv
53.6631 47.9157 53.6451 47.7977 53.6301 47.6637 cv
53.6161 47.5287 53.6051 47.3777 53.5981 47.2097 cv
53.4141 47.1777 li
53.2831 47.1837 li
52.9711 46.0607 mo
53.2721 45.9947 53.6401 46.0027 54.0731 46.0847 cv
54.5971 46.1837 54.8891 46.3677 54.9481 46.6377 cv
54.9731 46.7507 54.9581 46.8577 54.9041 46.9587 cv
54.9001 47.0907 54.9101 47.2547 54.9341 47.4477 cv
54.9591 47.6417 54.9991 47.8657 55.0551 48.1197 cv
55.1871 48.7197 55.3241 49.1417 55.4681 49.3867 cv
55.4841 49.4127 55.5921 49.5607 55.7941 49.8287 cv
55.9771 50.0717 56.0731 50.2117 56.0811 50.2497 cv
56.1181 50.4157 56.0841 50.5677 55.9801 50.7057 cv
55.8761 50.8437 55.7401 50.9317 55.5711 50.9687 cv
55.4261 51.0007 55.1631 50.9107 54.7841 50.6977 cv
54.5231 50.9017 54.2891 51.0637 54.0831 51.1837 cv
53.8771 51.3037 53.6961 51.3807 53.5411 51.4157 cv
52.7761 51.5837 52.1581 51.5047 51.6861 51.1797 cv
51.2141 50.8547 50.8891 50.2847 50.7091 49.4697 cv
50.5411 48.7057 50.6801 47.9897 51.1241 47.3217 cv
51.5691 46.6537 52.1851 46.2337 52.9711 46.0607 cv
ef
56.9255 45.216 mo
57.3505 45.196 57.5895 45.4401 57.6425 45.9481 cv
57.6495 46.001 li
58.1005 45.502 58.5895 45.2411 59.1145 45.216 cv
59.7275 45.188 60.1625 45.424 60.4205 45.9261 cv
60.5915 46.2621 60.6935 46.773 60.7255 47.4571 cv
60.7415 47.8021 li
60.7455 47.9521 60.7485 48.057 60.7515 48.119 cv
60.7635 48.372 60.8135 48.696 60.9015 49.092 cv
60.9895 49.4871 61.0395 49.8101 61.0515 50.0601 cv
61.0605 50.2411 61.0025 50.3951 60.8785 50.5211 cv
60.7545 50.6471 60.5965 50.7151 60.4045 50.7241 cv
60.0065 50.742 59.7745 50.5561 59.7115 50.166 cv
59.6505 49.834 59.5885 49.501 59.5275 49.165 cv
59.4625 48.811 59.4225 48.476 59.4075 48.162 cv
59.4035 48.0771 59.4025 47.933 59.4045 47.7281 cv
59.4065 47.523 59.4055 47.3791 59.4015 47.294 cv
59.4005 47.2721 59.4015 47.2141 59.4035 47.1211 cv
59.4055 47.028 59.4055 46.9531 59.4025 46.8951 cv
59.3895 46.6251 59.3185 46.494 59.1885 46.5001 cv
58.9115 46.5131 58.6465 46.704 58.3965 47.074 cv
58.1455 47.4431 57.9575 47.906 57.8325 48.4611 cv
57.8315 48.571 57.8245 48.718 57.8125 48.902 cv
57.8005 49.0521 57.7985 49.199 57.8055 49.341 cv
57.8095 49.4341 57.8055 49.575 57.7935 49.764 cv
57.7815 49.9531 57.7775 50.0941 57.7815 50.187 cv
57.7905 50.376 57.7335 50.536 57.6115 50.6671 cv
57.4885 50.7971 57.3305 50.867 57.1355 50.876 cv
56.9415 50.885 56.7775 50.8311 56.6455 50.713 cv
56.5135 50.5951 56.4425 50.442 56.4345 50.2531 cv
56.4295 50.161 56.4135 50.0221 56.3855 49.8361 cv
56.3575 49.6511 56.3405 49.511 56.3365 49.419 cv
56.3215 49.1021 56.3245 48.66 56.3435 48.093 cv
56.3625 47.5261 56.3645 47.084 56.3495 46.7671 cv
56.3445 46.6681 56.3325 46.5201 56.3115 46.324 cv
56.2915 46.1291 56.2785 45.9831 56.2745 45.8871 cv
56.2655 45.7021 56.3245 45.5461 56.4495 45.419 cv
56.5755 45.2931 56.7345 45.225 56.9255 45.216 cv
ef
64.9172 45.5504 mo
65.2402 45.5864 65.4742 45.6544 65.6192 45.7554 cv
65.8202 45.8924 65.9032 46.1124 65.8692 46.4154 cv
65.8052 46.9964 65.6162 47.2694 65.3032 47.2344 cv
64.9842 47.1994 64.8062 47.0444 64.7722 46.7694 cv
64.6452 46.7324 64.5142 46.7064 64.3792 46.6914 cv
63.6012 46.6044 63.2002 46.6674 63.1772 46.8804 cv
63.1632 47.0064 63.3782 47.2024 63.8222 47.4674 cv
64.4282 47.8314 64.8352 48.1084 65.0432 48.2984 cv
65.4732 48.6894 65.6642 49.0974 65.6172 49.5234 cv
65.5552 50.0784 65.2502 50.4714 64.7022 50.7004 cv
64.2602 50.8834 63.7362 50.9414 63.1302 50.8734 cv
62.7002 50.8264 62.3162 50.7164 61.9762 50.5444 cv
61.5122 50.3104 61.2992 50.0174 61.3382 49.6654 cv
61.3742 49.3424 61.5842 49.2024 61.9682 49.2454 cv
62.1162 49.2614 62.3262 49.3324 62.5962 49.4574 cv
62.8662 49.5824 63.0772 49.6534 63.2292 49.6694 cv
63.8842 49.7424 64.2282 49.6464 64.2612 49.3824 cv
64.2792 49.2184 64.0722 49.0104 63.6392 48.7594 cv
63.0072 48.3924 62.6042 48.1334 62.4322 47.9834 cv
62.0122 47.6134 61.8282 47.1994 61.8792 46.7414 cv
61.9512 46.0924 62.3432 45.6934 63.0562 45.5444 cv
63.4742 45.4564 64.0942 45.4594 64.9172 45.5504 cv
ef
71.3923 44.3373 mo
71.9653 44.4933 72.1963 44.7773 72.0843 45.1873 cv
71.9733 45.5943 71.6513 45.7253 71.1183 45.5803 cv
70.7393 45.4763 70.4273 45.5343 70.1823 45.7533 cv
70.0003 45.9163 69.8303 46.2013 69.6713 46.6083 cv
69.6203 46.7413 li
70.0503 46.8183 70.3563 46.8813 70.5383 46.9313 cv
71.1233 47.0913 71.3613 47.3713 71.2523 47.7723 cv
71.1393 48.1853 70.7743 48.2983 70.1553 48.1093 cv
69.9603 48.0483 69.6573 47.9813 69.2473 47.9063 cv
69.1433 48.2343 69.0253 48.6563 68.8913 49.1723 cv
68.7023 49.9143 68.5933 50.3373 68.5653 50.4413 cv
68.4083 51.0143 68.2483 51.4583 68.0853 51.7743 cv
67.9213 52.0893 67.6693 52.2003 67.3273 52.1073 cv
67.1523 52.0593 67.0153 51.9613 66.9153 51.8133 cv
66.8163 51.6653 66.7903 51.5043 66.8373 51.3323 cv
66.8793 51.2173 li
67.0763 50.7903 67.2293 50.3793 67.3363 49.9843 cv
67.9783 47.6353 li
67.9203 47.6233 67.8143 47.6073 67.6573 47.5883 cv
67.5343 47.5713 67.4413 47.5543 67.3783 47.5373 cv
67.1873 47.4853 67.0443 47.3863 66.9493 47.2413 cv
66.8553 47.0963 66.8333 46.9293 66.8843 46.7413 cv
66.9643 46.4503 67.1693 46.3013 67.5013 46.2943 cv
67.6503 46.2903 67.9313 46.3393 68.3453 46.4383 cv
68.3633 46.3833 68.4323 46.2113 68.5513 45.9243 cv
68.8293 45.2493 69.1613 44.7813 69.5453 44.5193 cv
70.0253 44.1933 70.6403 44.1323 71.3923 44.3373 cv
ef
74.4359 49.6957 mo
74.1629 49.5677 73.8859 49.5497 73.6069 49.6407 cv
73.3269 49.7317 73.0429 49.9327 72.7549 50.2417 cv
73.1549 50.2537 73.5519 50.2657 73.9479 50.2787 cv
74.4289 50.2857 74.8219 50.2677 75.1289 50.2247 cv
74.9849 50.0207 74.7539 49.8447 74.4359 49.6957 cv
74.9359 48.6287 mo
75.4479 48.8677 75.8339 49.1497 76.0949 49.4727 cv
76.4369 49.8977 76.4999 50.3407 76.2849 50.7987 cv
76.1339 51.1227 75.8189 51.3237 75.3399 51.4047 cv
75.1219 51.4417 74.7119 51.4547 74.1119 51.4427 cv
72.3179 51.4037 li
72.3879 51.6227 72.5049 51.8167 72.6689 51.9867 cv
72.8329 52.1567 73.0439 52.3027 73.3029 52.4237 cv
73.6969 52.6087 74.0679 52.6837 74.4179 52.6507 cv
74.7289 52.6207 74.9579 52.6397 75.1049 52.7087 cv
75.4109 52.8527 75.4939 53.0727 75.3549 53.3697 cv
75.1979 53.7047 74.8249 53.8627 74.2349 53.8447 cv
73.7399 53.8277 73.2619 53.7117 72.8009 53.4957 cv
72.0979 53.1667 71.6019 52.7297 71.3119 52.1847 cv
70.9919 51.5827 70.9889 50.9457 71.3049 50.2727 cv
71.6529 49.5287 72.1439 48.9907 72.7759 48.6597 cv
73.4779 48.2927 74.1979 48.2827 74.9359 48.6287 cv
ef
80.9249 52.1731 mo
81.4559 52.5471 81.4729 53.0871 80.9759 53.7932 cv
80.8809 53.9281 80.8169 54.0161 80.7849 54.0571 cv
80.4749 54.4461 80.1479 54.5201 79.8019 54.2771 cv
79.4679 54.0421 79.4219 53.7511 79.6649 53.4061 cv
79.9279 52.9901 li
79.2629 52.6651 78.6199 52.6711 77.9979 53.0081 cv
76.5929 55.0141 li
76.4859 55.1651 76.3459 55.2542 76.1719 55.2811 cv
75.9989 55.3081 75.8319 55.2651 75.6729 55.1531 cv
75.5079 55.0371 75.4179 54.8951 75.4029 54.7251 cv
75.3849 54.5701 75.4279 54.4182 75.5329 54.2691 cv
77.3679 51.6602 li
77.4259 51.5771 77.5149 51.4572 77.6349 51.2971 cv
77.7559 51.1371 77.8449 51.0161 77.9029 50.9341 cv
78.0069 50.7852 78.1389 50.6931 78.2979 50.6561 cv
78.4569 50.6191 78.6189 50.6581 78.7829 50.7741 cv
79.0779 50.9811 79.1469 51.2561 78.9899 51.5981 cv
79.7059 51.5782 80.3509 51.7701 80.9249 52.1731 cv
ef
grestore
gsave
-156.833 352.87 mo
563.167 352.87 li
563.167 -187.13 li
-156.833 -187.13 li
-156.833 352.87 li
clp
53.3668 55.5884 mo
53.6528 55.4854 53.8878 55.5864 54.0738 55.8894 cv
54.2058 56.1084 54.3288 56.3744 54.4418 56.6884 cv
54.4918 56.8284 54.4968 56.9704 54.4568 57.1144 cv
54.4048 57.3044 54.2778 57.4354 54.0768 57.5074 cv
53.8238 57.5984 53.5898 57.5324 53.3738 57.3094 cv
53.2718 57.2034 53.1888 57.1484 53.1238 57.1434 cv
53.0748 57.1384 52.9608 57.1684 52.7808 57.2334 cv
52.4278 57.3604 52.1188 57.7814 51.8538 58.4974 cv
51.4828 59.4984 51.4178 60.3334 51.6588 61.0034 cv
51.7688 61.3094 51.9658 61.5344 52.2488 61.6794 cv
52.5318 61.8244 52.8168 61.8454 53.1028 61.7424 cv
53.3798 61.6424 53.6358 61.4684 53.8688 61.2204 cv
53.9508 61.1304 54.1138 60.9164 54.3598 60.5784 cv
54.5258 60.3534 54.6648 60.2214 54.7768 60.1814 cv
54.9448 60.1204 55.1108 60.1304 55.2728 60.2114 cv
55.4228 60.2874 55.5248 60.3994 55.5788 60.5474 cv
55.6378 60.7134 55.6168 60.8834 55.5158 61.0594 cv
54.9788 61.9874 54.3108 62.5944 53.5128 62.8824 cv
52.8818 63.1094 52.2668 63.0704 51.6668 62.7674 cv
51.0928 62.4734 50.6978 62.0274 50.4818 61.4274 cv
50.1438 60.4884 50.2098 59.3824 50.6788 58.1084 cv
51.0778 57.0274 51.6418 56.3564 52.3708 56.0934 cv
52.4948 56.0494 52.6068 56.0134 52.7098 55.9864 cv
52.8128 55.9584 52.9048 55.9404 52.9858 55.9294 cv
53.0658 55.7644 53.1928 55.6514 53.3668 55.5884 cv
.137422 .122799 .126081 rgb
ef
58.2807 58.2147 mo
57.9157 58.2437 57.6417 58.4347 57.4597 58.7878 cv
57.3067 59.0847 57.2457 59.4217 57.2777 59.7987 cv
57.3087 60.1547 57.4337 60.4197 57.6517 60.5917 cv
57.8247 60.7297 58.0187 60.7887 58.2317 60.7708 cv
58.4897 60.7487 58.7067 60.6417 58.8817 60.4497 cv
59.0807 60.2267 59.1727 59.9388 59.1567 59.5877 cv
59.1127 58.6287 58.8207 58.1707 58.2807 58.2147 cv
58.2377 57.0347 mo
58.8307 56.9837 59.3227 57.1797 59.7147 57.6247 cv
60.0657 58.0247 60.2687 58.5407 60.3227 59.1737 cv
60.3827 59.8617 60.2487 60.4657 59.9227 60.9837 cv
59.5577 61.5627 59.0277 61.8817 58.3327 61.9417 cv
57.7837 61.9887 57.2957 61.8407 56.8687 61.4977 cv
56.3997 61.1227 56.1257 60.5917 56.0447 59.9057 cv
55.9677 59.2517 56.0967 58.6507 56.4327 58.1047 cv
56.8317 57.4607 57.4327 57.1037 58.2377 57.0347 cv
ef
64.4087 57.2565 mo
64.9987 57.3365 65.2407 57.7695 65.1347 58.5545 cv
65.1137 58.7046 65.0987 58.8036 65.0897 58.8506 cv
65.0017 59.2986 64.7657 59.4966 64.3817 59.4445 cv
64.0107 59.3936 63.8507 59.1765 63.9027 58.7925 cv
63.9407 58.3426 li
63.2627 58.3586 62.7407 58.6356 62.3767 59.1715 cv
62.0787 61.3995 li
62.0557 61.5675 61.9787 61.6996 61.8487 61.7946 cv
61.7187 61.8896 61.5657 61.9255 61.3877 61.9016 cv
61.2047 61.8766 61.0717 61.7975 60.9867 61.6665 cv
60.9067 61.5475 60.8787 61.4055 60.9007 61.2395 cv
61.2947 58.3395 li
61.3067 58.2485 61.3287 58.1125 61.3587 57.9315 cv
61.3897 57.7505 61.4107 57.6145 61.4237 57.5236 cv
61.4457 57.3575 61.5137 57.2265 61.6277 57.1295 cv
61.7417 57.0316 61.8907 56.9955 62.0737 57.0205 cv
62.4007 57.0656 62.5727 57.2596 62.5897 57.6046 cv
63.1647 57.2856 63.7707 57.1696 64.4087 57.2565 cv
ef
68.3928 59.752 mo
68.2178 59.685 68.0238 59.658 67.8118 59.672 cv
67.5988 59.685 67.3698 59.739 67.1238 59.833 cv
66.9388 60.419 66.7368 61.001 66.5178 61.577 cv
66.7348 61.752 66.9668 61.887 67.2148 61.981 cv
67.5018 62.09 67.7598 62.072 67.9908 61.927 cv
68.1998 61.796 68.3638 61.575 68.4818 61.263 cv
68.6248 60.887 68.7078 60.621 68.7288 60.463 cv
68.7778 60.093 68.6658 59.856 68.3928 59.752 cv
67.2448 57.732 mo
67.3998 57.792 67.5108 57.894 67.5768 58.041 cv
67.6418 58.187 67.6468 58.333 67.5908 58.481 cv
67.5708 58.521 li
67.7968 58.486 68.0148 58.479 68.2218 58.499 cv
68.4298 58.519 68.6278 58.565 68.8168 58.637 cv
69.4578 58.881 69.8218 59.33 69.9108 59.985 cv
69.9748 60.478 69.8828 61.05 69.6348 61.702 cv
69.4028 62.312 69.0368 62.751 68.5358 63.019 cv
67.9988 63.309 67.4168 63.334 66.7908 63.096 cv
66.5508 63.005 66.3098 62.881 66.0658 62.725 cv
65.4138 64.427 li
65.3518 64.588 65.2468 64.701 65.0978 64.766 cv
64.9498 64.83 64.7918 64.831 64.6248 64.767 cv
64.4578 64.704 64.3398 64.598 64.2718 64.451 cv
64.2028 64.304 64.1998 64.15 64.2608 63.988 cv
64.3108 63.857 64.5108 63.339 64.8618 62.434 cv
65.1238 61.762 65.3338 61.212 65.4898 60.784 cv
65.7108 60.18 65.8878 59.654 66.0228 59.209 cv
66.2088 58.594 66.2928 58.312 66.2728 58.362 cv
66.3608 58.131 66.4878 57.953 66.6538 57.828 cv
66.8438 57.687 67.0408 57.655 67.2448 57.732 cv
ef
grestore
.137422 .122799 .126081 rgb
%ADOBeginSubsetFont: PBAAAA+CambriaMath-Identity-H Initial
Adobe_CoolType_Utility begin ct_MakeOCF begin ct_saveCIDInit
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2019 Adobe System Incorporated. All rights reserved.
%%DocumentNeededResources: ProcSet (CIDInit)
%%IncludeResource: ProcSet (CIDInit)
%%BeginResource: CIDFont (PBAAAA+CambriaMath)
%%Title: (PBAAAA+CambriaMath Adobe Identity 0)
%%Version: 0
/CIDInit /ProcSet findresource begin
14 dict begin
/CIDFontName /PBAAAA+CambriaMath def
/CIDFontType 0 def
/CIDSystemInfo 3 dict dup begin
/Registry (Adobe) def
/Ordering (Identity) def
/Supplement 0 def
end def
/FontBBox {-1475 -2464 2868 3117} def
/FontInfo 4 dict dup begin
/FSType 8 def
end def
/CIDMapOffset 57 def
/FDBytes 1 def
/GDBytes 1 def
/CIDCount 7614 def
/CDevProc {pop pop pop pop pop 0 -1000 7 index 2 div 880} def
/FDArray 1 array
dup 0
%ADOBeginFontDict
4 dict dup begin
/FontType 1 def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
%ADOBeginPrivateDict
/Private 7 dict dup begin
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/SubrMapOffset 0 def
/SDBytes 1 def
/SubrCount 5 def
end def
%ADOEndPrivateDict
end put
%ADOEndFontDict
def
/GlyphDirectory 2 dict def
ct_GlyphDirProcs begin
GlyphDirectory
+
0 <001C60D8A8C9B6472030318CD4127C796377DABFD8006FC8CD7AAF1086964
F20EE651118638C13AC909581621FA1FBAC552E6A16F7B4972529EBE8A80E782
DD8AB05FDEEBDFC49979639D0FF68DCB6E7F422169AA9A2DB1DEF4F4B413623F
5F563C56D612D674F82D41A71448843BD967EEE7B9B5E5851CDE54BA3652F7BD
EAFCDD43D27FDE0DE42D02A7D2B502434D5DE03C37B40825A9A0E097F17F7836
8B6C52A18DA8C4E8168AC56AD15BCF0B69C17FC31C7A04A95D974197259FB36A
E72A5300CDD86C2372DFF50F7695D6D8E6898504FD1B1E5E543A89FFBE60F42D
9B97A8DA995D7DC487489AC6073B6078ACF7C0324D45E66DA26D3EFF3411DA7F
D9C5DE33005> |
1865 <001C60D8A8C9B6BBBB4CE52FD48B04492F7E2C4553CF0682951AD3A11A
ECF5831A24A87C656A0D69E6B3A251121847A5EA1C42A3D4422CDEA588338B32
9750F0A21E389D7D04917B8E0ACA60B7997D45B0836F74AFD6FDE4233E53F1F6
127E777380EEE7D644B44B14EC752B448386E02915FE5315C2CFB862ADF5307C
3ADF3535657C54800CA813541B5D904AFBFB775874DD86710268602C0E5BBC31
0A11B1D779465B97010A9B5C439F33CE26F763FF4EE9D0BB02390100AEBF7198
900CB69F81F2486BB82B1A92109E77D3BCD82CCA2A769CC7ED004C622FD636E5
D01CC548E1471CF36E70E39058B430208A1E3AF422D6C443EFD472954ED4BB47
FBBDDD475260AB8774591ED7869BB582A2B98C39A83C4FBC10EE32BB74D4A526
8EE261014DECA557D409538090630A4266CD16A5F399EF2B8A5C9DF935D4F2D5
C755543176CBAD27E7678CBF00EBDB643D350F6E0628D52A63084D51D2658892
04740B8A96BFD413C7F2E23CEFF78D9DFA2C7B8E1F058071> |
!
end
ct_AddStdCIDMap
%%EndResource
ct_restoreCIDInit /PBAAAA+CambriaMath-Identity-H /Identity-H 0 [/PBAAAA+CambriaMath] ct_ComposeFont pop end end
%ADOEndSubsetFont
/REWEZT+CambriaMath /PBAAAA+CambriaMath-Identity-H findfont ct_VMDictPut
REWEZT+CambriaMath [11.04 0 0 -11.04 0 0 ]msf
105.304 60.1835 mo
(\007I)sh
%ADOBeginSubsetFont: PBAAAA+CambriaMath-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2019 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/PBAAAA+CambriaMath 1 GetGlyphDirectory
2869 <001C60D8A8C9B7F88C2B780E4DB2544561CAC9A20C6BB0B13699B706C1
363010DB765FA6C43655301BE09B2CC3CD96E1857F37F0C3A41E09A4894AF051
9685AD3CAD001A338BFE95F6F1AA62102D91F860C1C48E32F88B27AAA80BA221
C6190705435530756B753E8A19A3D6B6F9D6F69BDA4DFF70963E5D7172CEA8BA
E2A62723B33714F423A266021272A7A831450ABD0A86799213944A73BBF77865
49680961C310707B73A46D81D67FB83359220776A5236469A2820155406C9947
84A4020BC578B6FF849EE8BAFE5D3039B602F31D2CBA08D4C984BF04> |
!
end
end end
%ADOEndSubsetFont
REWEZT+CambriaMath [8.04 0 0 -8.04 0 0 ]msf
114.304 62.4635 mo
(\0135)sh
1.56 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
144.427 65.2897 mo
186.083 65.2897 li
@
1 lc
0 lj
180.083 61.7894 mo
186.083 65.2894 li
180.083 68.7894 li
@
%ADOBeginSubsetFont: PBAAAA+CambriaMath-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2019 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/PBAAAA+CambriaMath 1 GetGlyphDirectory
1318 <001C60D8A8C9B72B39B1E5C623D7902AC7D4066310D60EBB92C92AC94B
0E20E5A36AE41DA906B75B9EEA1518> |
!
end
end end
%ADOEndSubsetFont
REWEZT+CambriaMath [11.04 0 0 -11.04 0 0 ]msf
189.42 74.5015 mo
(\005&)sh
%ADOBeginSubsetFont: PBAAAA+CambriaMath-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2019 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/PBAAAA+CambriaMath 1 GetGlyphDirectory
1874 <001C60D8A8C9B79B8E966D626B3E0F724BB5CDD5E0AE75AF982FF2ADE8
8398970F4ADD713405CC0B0C34BE66DD1E7F8BBAE59190B967A7568469D60C52
6E1157FC39CDE33ED4C6F33551F7F1C5A4ECBCDB577E49B5D99AAB1198E73AE5
0299B94E0792A756D3EF2A17D5C5121D4494E714DB5BD7FAE4971485A8069388
0D75B424015DB0BA68A855C004D6AD5E952F85FE7E9173AB0943F52FAF551B24
745D4D7125A9CBF0EAF60712478D9F26A82CFB3A6F9830A69CD17CF30E6081EB
C60FBF6BA59FD6DA6496342EA99A246B4C720FEB6C2C8874D60D2ADF5815EF6D
D721EDE133C0E7272FB6F8F19459C4493260A13FC8F1179E628E58E9B50B0929
FF26E977A4B850743CBA53503A01C581BBEB3F91C2AAA3F11A5807F6D8C64EAD
D5E59F7E6024BE37A636A6712C3CE5D06C448FB99C126297E13A975EE8026450
DD966701CE565B8A1248142B5CE349A3E4B19E25A0871785DF4E7C5990D0F1EE
84596ACB13F71D3B7E7685386DB890A4F222041F571EC6B5B5F57FCD1EFDDC98
3727EDF6CA1AE84A7227D40E> |
!
end
end end
%ADOEndSubsetFont
REWEZT+CambriaMath [11.04 0 0 -11.04 0 0 ]msf
187.499 74.5015 mo
(\007R)sh
%ADOBeginSubsetFont: PBAAAA+CambriaMath-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2019 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/PBAAAA+CambriaMath 1 GetGlyphDirectory
3398 <001C60D8A8C9B61E1368B22F78F4F884FCA6DC0E2A1689> |
!
end
end end
%ADOEndSubsetFont
REWEZT+CambriaMath [11.04 0 0 -11.04 0 0 ]msf
177.794 45.9631 mo
(\015F)sh
REWEZT+CambriaMath [11.04 0 0 -11.04 0 0 ]msf
187.995 45.9631 mo
(\005&)sh
REWEZT+CambriaMath [11.04 0 0 -11.04 0 0 ]msf
186.074 45.9631 mo
(\007R)sh
%ADOBeginSubsetFont: HIBBAA+CambriaMath Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2019 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /HIBBAA+CambriaMath def
/FontInfo 5 dict dup begin
/ItalicAngle 0 def
/FSType 8 def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 47 /slash put
def
/FontBBox {-1475 -2464 2868 3117} def
end
systemdict begin
dup /Private
7 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
2 dict dup begin
/.notdef <1C60D8A8C9B6472030318CD4127C796377DABFD8006FC8CD7AAF10
86964F20EE651118638C13AC909581621FA1FBAC552E6A16F7B4972529EBE8A8
0E782DD8AB05FDEEBDFC49979639D0FF68DCB6E7F422169AA9A2DB1DEF4F4B41
3623F5F563C56D612D674F82D41A71448843BD967EEE7B9B5E5851CDE54BA365
2F7BDEAFCDD43D27FDE0DE42D02A7D2B502434D5DE03C37B40825A9A0E097F17
F78368B6C52A18DA8C4E8168AC56AD15BCF0B69C17FC31C7A04A95D974197259
FB36AE72A5300CDD86C2372DFF50F7695D6D8E6898504FD1B1E5E543A89FFBE6
0F42D9B97A8DA995D7DC487489AC6073B6078ACF7C0324D45E66DA26D3EFF341
1DA7FD9C5DE33005> |-
/slash <1C60D8A8C9B751D507F323B8895D52746EBFC546063D69544AA147> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/REWEZU+CambriaMath /HIBBAA+CambriaMath findfont ct_VMDictPut
/REWEZU+CambriaMath*1 
[47{/.notdef}rp /slash 208{/.notdef}rp]
REWEZU+CambriaMath nf
REWEZU+CambriaMath*1 [11.04 0 0 -11.04 0 0 ]msf
192.434 45.9631 mo
(/)sh
%ADOBeginSubsetFont: HIBBAA+CambriaMath AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2019 Adobe System Incorporated. All rights reserved.
systemdict begin
REWEZU+CambriaMath dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/two <1C60D8A8C9B7917E850769C7DA5ED9DE76CC5C828D99B70F78AFB0844A
581D94D46BC958355704AD1E0AA64BC7E5D1A651807459E5709BCF5848932752
DE6696096C08A1C99CD6B09F1B7AD5AA99149859C21CD8E6C267E73A4F87D3B7
86FF87D1542304DA09DB17F4FAE27026018DD2B42B51B0A5FB4DD6C355F0C388
1A8E15E2B1FF65A6BFAF599826DC82DF5806E599BF4A45F57193D4B113F0A424
16365225AE62C55DAB11DEBC647C3E54C3027B734D58B5EDAEB0F6435BEF4E65
FD7055B19BE26F65> |-
systemdict /gcheck known {setglobal} if end {end} if
end
REWEZU+CambriaMath /Encoding get
dup 50 /two put
pop
%ADOEndSubsetFont
/REWEZU+CambriaMath*1 
[47{/.notdef}rp /slash 2{/.notdef}rp /two 205{/.notdef}rp]
REWEZU+CambriaMath nf
REWEZU+CambriaMath*1 [11.04 0 0 -11.04 0 0 ]msf
197.832 45.9631 mo
(2)sh
0 lc
1 lj
179.603 38.6497 mo
159.547 38.6497 li
@
1 lc
0 lj
173.602 42.1494 mo
179.602 38.6494 li
173.602 35.1494 li
@
%ADOBeginSubsetFont: QJJAAA+Calibri Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2019 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /QJJAAA+Calibri def
/FontInfo 5 dict dup begin
/ItalicAngle 0 def
/FSType 8 def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 32 /space put
dup 49 /one put
dup 98 /b put
dup 99 /c put
dup 101 /e put
dup 106 /j put
dup 111 /o put
dup 116 /t put
def
/FontBBox {-503 -312 1240 1026} def
end
systemdict begin
dup /Private
7 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
9 dict dup begin
/.notdef <1C60D8A8C9B7A086528E2CBE7FD4F03CC1C545DFC3C53F52C69233
4252531335C4AFD91E9493A7B9787114ADBF50CAD0D8D8F4E0FD112CA0EDC244
BC77AFB35E52902467E4B7D65BC23E8AB084EE08EDC3C9FE17948A4E93ECA5D5
D8A99AF099DAB98A96A7EEC3487AD5909F63F36A9F52E364FE794F0586CEACB0
693AEA3E3B131EDB924E9018AC085D5D058B3A8419D5096479413ADE107D9F53
02816818EECEB683CD82FAAA79E358EAA71283CC02664EE09C62BDF6E0D9BC98
D9F308DF8AEA61A9B7C090BD7FD96A3223C7AE0D3D1A8F2E623FA6B7C467CA6F
ECDBA0B792188DFEEBD3D01BCE6CC077D778842DE1B5E36F7F8EB4C68A439269
E0981B28AD1790AA058065E4B6AD27A659E12C7322A5BE1E7DF9729C0030192F
3688A380035351BB0945D5DC7515959F458727E2B8854977E466D6DDC900E997
B52F6BAB4C73A178A3B47EBB3C3FC842F51CC6E114336F3E4E5E72B20D8F94A7
BA3BA965E83BF37BAA664C34B8502BB9E9B9BEDD7EBC5DCBC4FFF5EBCA9C0324
49885D42A9DCCBA2A816B59D7978373DF4208E5608F69A2EAF492AC156CC637D
5A11AF573B17CF9F38> |-
/space <1C60D8A8C9B888C146> |-
/one <1C60D8A8C9B7A0860A305D7D1540DECC7BE2F83965065BA1F58088FE75
1F51768999AF3CB0CBD98712B4A20A30CFDD23F3D718AE6664545AA64C90E87A
977C061638AE7B9844BD53D39E1CD919540EC0AFC0ADDD639213BAA3C2156ECF
4D5FEFDF4B77C92C9A62F21FEF596A47F254F30F662D97990A276CD1E50761DD
9D07D78B626617E74128BC5D647B42ED807FE6DD0588AD25D211834DAC9410A0
AEBD06E6565C1DCBD86013B11A7BE0A2010B12635869FAC3323D92D6BCCC10D0
2550F431D6753E5E6C65DB63D883AF6BCE4C75C5A66BF9AE47A5570BA4B61C57
63C152A7FDEC11C0C748631E999D604A7F2938BB57220CBE02AE758E60183316
61C475AA9DED7C59> |-
/b <1C60D8A8C9B78E05EA9D9733F4614DDE4F3CCBD772458631C06B9585CEC3
067196C085285D4EBCA830523DBA980A7903E7CCB9545952E933EA287D309550
0A08B5FF1250FB2472C48AA643F9948B713834174A32233FFD00CE8E2A02CD92
CD0EB36D86747ABA3C4EE4A7096B26460185FCF827CE5E1862348B87101A5C9D
384541120A40C8C71F0748956E48EF5E095EAD17FBE5B28249366E6BEAFC298E
E015C31B731D6166501448A2851B390CD5E1032DCB65F726222BA5085B034CFC
917DC36E2C73558D1FCD108B1B305D16C97136B39697A594C46D2F068CC61EBC
8B61EEBACA2E9B9971F359DB93A6910B3669C04870AE086A03B453BCE1E9F2C9
24C2B94631466A458EB1B3FD708C18C058A8B05845E2D231DD130E2BCA4DCE6C
A2C90256ED106A2B8A867758EB2E1D464AB1AA657324F30AFED658994E772592
420FD616D7BD6885B5350E3F2A59010B037CCEDD5B3D83A476690BED59BBD82D
D2D74F> |-
/c <1C60D8A8C9B714A578818061920CBD3BB0F0FEC7EB28869C0269DBFC0262
5554E339FA8F23FF202BF6BBA51F73386176CF41E41162B391BD65C46864E1ED
BE38C4A175836382F89D1B282918F37F6A98A1C310371E84DC05CA4D214BBF40
D0904F28663CAA2B1AF41B75D4680E3731D792C10C395648F8CE6283B6D2EA4E
A25EB0077385CC26E37C0D4F9F091C8BC196661820383DC1CFC26D318A92B139
8AE8D24532A475AF0A93A6DC660BFF9F07C9678F9C3412071B0DAC612FC7D6B5
FAE3214E7C7AB18E3145411FCE0CA8B75D2C8C25C05252A375257E1693A2B9D1
1EE377C95BA1746CBCD896C9D8284A96EC1B8BEF12D6460B6828EC26350E91CC
593B47372BD95FFBF8C2322BFC435A5494ED398AAAE3E6E4293369CDCFAC0147
8225F7C60BA6A2722907E6FF92F4B9457F52836FAB37F27C55593B43AB457EA2
91D6DE23> |-
/e <1C60D8A8C9B7A9C0DC897A849B356D31E2254DD2E5BDA9320580C3E0839C
715C00D9D27B634D4BEEF0FE1F6AD3CCFBCCE9FDE38A84A563FB744619F62FCB
F09ACBF7337FE050BE068BCA744FAC4471C4195B7CEC353B3CAECCCEC91AAE22
E8955469041D97A8837F9398CE520ABB35C688EEF4229957FD92C79439BF99D2
4AD4D8B3CAC5B975D966AB01856E8FAEAE3BEB03E1CC76DF299391134BFB02DD
61F6D73B2AAAA0D725ABCA9FE504FB3A1EC1E2449C5D921F0DE45A9278013CF0
832F39E3771D2B318D27AFF5849066ED5A64AA8E3E404B520DE5F08BE74DD8D5
8BD1B0FA461EBCBB4DC632B680CFAE62B61DD4FC04FC017D59147CB2E0FBEAAF
A402B5BFBD0C4F13F4BD9227D1353527A23B3EF7CA3E7F599CB51DDAF43A5674
78E4C81011D9D8D5DAD9CB1F948F5FCE67> |-
/j <1C60D8A8C9B87DE052CBE8EA1F435A396D74A156D684A1B719256AFD088D
E495AA86AB7CCD817A938296CF0F8399FCEE3662F575F22BC642EE0CBF88CC1C
A4E7C552C32B03DACABF153EC87432328A1B586B939F59CFDC9731F30AA1A68D
B84B1EFDC126626FAA4641C6597CC22073BC4D69999C5D6D474DD6908804D154
4FDE037D86AE8A6C3A9927A20091D90229324CDD9FA2941F8BE3C5B43DD929A0
6AA1AD6E0B73E9E2E606C9A69DE2B4F2C6A9FE4A4F1F9F102378426C65CF9936
58CBD59E49F9CFE61F443718943CF94BE0B4F9059A84581CE3CF237B076901A7
8460D8D22ECAD343A9B673E5DB1B8CDBC20B31ADB6632AE6BB266CC352037837
A50F2914B3EF21D046A7AF8296D6E8210A2059C31E> |-
/o <1C60D8A8C9B78C66ECF3075BCC0F7D87F2E9EA9E473D66D53E6D1735C12E
AC0562A2F6FB428E7F7051A3A7B2D4CA6ED90F77808579359B7E539B5388F6F5
4555E1422B5F329989100C1CD5239E87FECD85E14E914ADC27391A1F5624B31E
E69A68B9016D73D6A01A100E004523AC53318A2FC2260E74BA80D4ABD1433EC6
7800CC9F77763DCF8156EA5CA478ABF1FAF7864EAD55939BE7FA4A9E8660CE98
DDE8CBC35F3FFF4E5C2DA4A292CE30D82057E70A8562AFB17C90FC331A4C46B4
8C7BBCED55DB7F94D559D534C59FF211B5A85F0207876BD8D6B2C7BBBC06964A
16F72BBAE841F001B71209E6C81DC64817ADE625E8FF> |-
/t <1C60D8A8C9B81D89610FFBFD2F87712D18AB3F2201A6640C86A2CD8B533C
9E9613B748962BD3321D998A13FF4A410946A55D4AE3CDBD806BF0BBD38F8435
DE762245288A30426FF012946D0E2E36D4EBD7E81C44D06926164FB6F91AA67E
EAF9AC4BC77C470E117D4634F7F90C1771292F30769DD575DD5B3F0D104730DE
CDCF41E7D59747B6A2D0EF143B06FA6BBA4F9E744BD6E4827C627C6619571415
1061BE64BA6B45A36E91B80557E1CF613697CA2B60F02790B7CBE3BBB5ABEC19
0F88D2844D8139B7D141D834706D11BA3108576C531B823977B908AC9FF80DF3
22060C351BA43A8EA770319D1AF8085E209B940EDEE1B85419EF87F01EED1C4E
0307B2BC95989AC0998A9EA8A0DFB99539E7D0B836F4EB9E9D6147AFB55082A1
E63F64D57A8E7F63465BA308FA03AEB2787221627AF8F99523DB260C> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/REWEZV+Calibri /QJJAAA+Calibri findfont ct_VMDictPut
/REWEZV+Calibri*1 
[32{/.notdef}rp /space 16{/.notdef}rp /one 48{/.notdef}rp /b /c /.notdef 
/e 4{/.notdef}rp /j 4{/.notdef}rp /o 4{/.notdef}rp /t 139{/.notdef}rp]
REWEZV+Calibri nf
REWEZV+Calibri*1 [11.04 0 0 -11.04 0 0 ]msf
60.5706 16.9794 mo
(object 1)
[5.87982 5.75951 2.64075 5.52002 4.67989 3.72057 2.16382 0 ]xsh
REWEZV+Calibri*1 [11.04 0 0 -11.04 0 0 ]msf
184.859 12.5193 mo
(object )
[5.87982 5.75949 2.64078 5.51999 4.6799 3.72055 0 ]xsh
%ADOBeginSubsetFont: QJJAAA+Calibri AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2019 Adobe System Incorporated. All rights reserved.
systemdict begin
REWEZV+Calibri dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/two <1C60D8A8C9B7A0860A3F41F4B5F8C84A302144D2A68052268BA33C08F1
4E9024203A43F9861DB1372AE620C85B5997156713B3D52B841947202E77B0C2
CB414A698B86ABC8A4E75821012456D5020DA227DFEF8C5D8DB95EBE919EE715
28F7186EAF21E351CBD957516793A596628548012B490542857EE9AD26B93BE0
9822488FFA92D417AEC74A1F7CD3F4086D2106FC51C85A2037F2B9A0C7F20F95
265886609863A1C5F24DF7B0A900E498DA2F78FC8847FC48711DA5F7718C543A
B1317AD922AE297322A814FAE4926A273690C557D10E81AE194D331B49C1AE8C
81F09FF9C6C0138B7CA170F398B4828657BCD8F518515EBEE88F3E7CAAF8D53D
FF51CD8B58FC43A0393FF3BAAC61C4C54BAED846AB03C5029732B46B642E71B9
F477640318C582068EEDAD42004E409178DCD37800E9D052502DD85B334EBD67
9CA70294673E8EE8A3969E138989BAAC7D6DF5921118D0D203FDC015CB80084F
99BE2DC9C90C6E2171BED79C2858C6> |-
systemdict /gcheck known {setglobal} if end {end} if
end
REWEZV+Calibri /Encoding get
dup 50 /two put
pop
%ADOEndSubsetFont
/REWEZV+Calibri*1 
[32{/.notdef}rp /space 16{/.notdef}rp /one /two 47{/.notdef}rp /b /c 
/.notdef /e 4{/.notdef}rp /j 4{/.notdef}rp /o 4{/.notdef}rp /t 
139{/.notdef}rp]
REWEZV+Calibri nf
REWEZV+Calibri*1 [11.04 0 0 -11.04 0 0 ]msf
215.219 12.5193 mo
(2)sh
%ADOBeginSubsetFont: QJJAAA+Calibri AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2019 Adobe System Incorporated. All rights reserved.
systemdict begin
REWEZV+Calibri dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/parenleft <1C60D8A8C9B83D5FF27DA8D8E6046A27BA23CC1486AB72A59E47
AACC8161CC74CDD95CC2A654D5856D60A8DC5F8C184EC1ABC4D1D2160575FE6D
70949B41A6CABCFACD73360CFC5DA53716AD56E7BCBA30E5CBADDBCE536F92B4
EFC10AF93D5AA400F7912003F9E093421F683C28EAAC53C2248A1C92A4ADDC6F
6F189A13C295B6CA124F9A4CA4E40FBBF41FDD3287A0301EBE9D805D7A4030F8
18C18B05D8592B2DBF59F7F26BA45EDE7B24A816E6CC3105B053A64C91913E22
DD3F66D2B695F53F3F722E2F8096827FF689C16601C625CCC1> |-
/parenright <1C60D8A8C9B83D5FF29F44B652980D05B9EE187D926BB2CE034
E7CDFB42233F20EA0B6A7D3053EB0C035C6C189F4DA6B49B40A0EB0636B7ACA2
CF42792FC2164693E9F6F7B6636D9708884EE48CE23B1AFB94FA912772ABED4A
B22E20E0410244F282681ABF0BF3F1FF921D275AD5C6D7F8F439D5D0B2BAD1CB
D8078F961EB6B7FB4BFFE77692BCE19880B8A84987A61F63B3F03252C231FCBB
5CB61DBA6789BB581DA0ED1802F2C6AAE0EF2092080B688E21E45FC07A90B21E
AB8701889CC58EAA06C962B> |-
/i <1C60D8A8C9B887F0644B8F9A77200B5B21E7A46843656F48CC872DF3AFB5
8D86B9B1B70DF0F8BF4F1A9D845350075385C2FAC40F64A57A633024956B42D2
D155265D68692B1DD96FCB1CFEA6F03B67B191D75D9251636A71B366F484AC7D
D61A648087A690F42FCD56728047D5F145B28180BC49A70304D616C17E08688B
C2AB34D235D029750826D6A02D57888DCAF080A15DCB2D8AE91CB7938E088D74
26B3BCAD6531F243F29763FBDE3F087E3965B6148DD52590D1BA20021D15293C
FC> |-
/m <1C60D8A8C9B6D24F7D3842850F4949AEB6B9100F2B78F4C8889450CED823
786FEB32A1B63E88AD56EE02413123CB64791A93EF92133FE4595DA2691E3035
F9F72C6031AE554C5E100D6D83A5170AEAC660F3CD2D2E423C32E393EEDCE69B
38CE6373F6B6777FFB71A30474298882FF21A6474EA00B23874CB701D4949FDA
B683EF52B401CF01FBFB5320858391C36D1B0A5131B6AD88B31FBA5AF7369B53
8683192205F94F973772FC0D1A80750F5CA55E65F4A8760D9FFB5A3E462EB76A
F894987A3AB123C31C6F61A2DE381C11A73194BB9FA663DEB4E0E047953FDCCB
40254C512459EA81EABD29705BEDA8917220B4CD736962EC932D0F91B2A5DC80
8623631D3854D7B6297589945BF94293721596CC4C62C71F5A8040654672D59A
8C73FC39F2C6919502A1FD8EB49A6BB72701DD42520B2F6CD223AC11A22A5CED
8614ABBE01C624D0AED39BB3AE4E8B513F61C37C6BA440280E139545B39C87A0
6867746DDC81F39BACA8E048A7276011988ACE081223D841AEA6DE2418F28BD5
9A30A454BE8DAE3786DDCC7D1BEEFB13E445F279EE7EA8CB61C194C9B25497E6
925AF3BEE4F64F897F4A57BD4C4A1E06EBC8223C35049061> |-
/q <1C60D8A8C9B78E05EAA3CFED1A062E7358B586AF05164722AD015C8CE0D8
BBE5ADC9B4274EF141088E8BC7A5519CC6F4CF8FAC14716641A1CBFC8A3C1FAE
730ABB73285F00C246C90485D48EE52326159584526EB20CF5ECF3A8F136119D
81E693D06F59FB756016DDA1809F71D795C46C230FC120FDA5AD6FA95AB8E6A4
70F36B3DA70C0CF52D582260ACEF64787A97848A2F116B221416D578037583D7
5EDF07A2E7D2CA285122F15F81D5EF1F5238BE09184291849770C6C0541B16B8
152F87E35B621861DD1ADF706153CA61CF27093B3F644FF3CBAA4800B11C9797
C686E616BE020290A908CE63875BF87479DA09514C9A037DB7C2932C55D8E278
F657B3659B5F0BD547DB1098867E70D8D3DFB6EA9C67031DD259213F55AFA344
4C26C4C5D57542F6262D7A38FB60D8D46EAA97637A896F0308BCCBA5D05A6252
320557ACE8E3075792F0257743ABCB84E60494B1F8AE8FDAF9A4A281D1> |-
/s <1C60D8A8C9B7347873EC11B675AA6F6B461106EA2C61A0AE571750A08267
9294B529694EFA74202690239BCD02BDE93B33BD8DE0F0F0056B04093EE6C4E8
3D6F00E22E61E0A53509E628E3614EF2EF2CA3A8502F22A560E46ED3E4AED0BF
D271CCE464114B6332D17C4A046EF74FFF1283283A642C8C06B85A0D72357B56
65CD862A8E3D30EFFEE242F88B9C12DF917A74252DB462B49970474974786963
8F8FD8E70AF4405F95B11DFD154B7101933A31068AA1E65CC021277CCB9EC0EA
A7B978A081D1A4252A6693984AAF2CEC4413666DCF8B310A71A67C6E7B1DB954
E186EA16C83551DD0516966C156876A3DE36ED7253FFBBC1504668DC98301370
300A04E6753189718288CD7EF0ED409765A888272FDB25977C8A74BC113E188B
3DF6A69F7851A7E60496291AA0B15532572787EAC7F32F09F1E72589E0E74E03
49313472D872E64E7DB78BAB05598FE04B70E52D818F2F7B0B56A5688299352E
62F16B011595A7D7701FD641BB2FCFCADB2E33263B8A208C4183E753AD5C2586
1BF542F2009EA70BB7A67B3BE61085D37469DCDCB97CB2B41A0E2B4DB3BE67C2
BA9A1482E51611AB708AAB8BC978B06758006F3287DD3A3CABA09A9F59A21B0D
386F88> |-
/u <1C60D8A8C9B78E05EAA3CFED1A062DA00ACB6556B6D2C444D52FE211DC36
88D13631F07F87D2F0851361DDE2CB13BAE303424A55D9BD107D56D22322818F
C76F125ECA1DADD7E1E8164E2DF3A65B67CFAE338C319FC7D07BDCC1CF896B70
8E125021996E87E6805D1416B537CED172F9478027FB9FD1A978C49E725968E2
F5FFC6B56799F9B1D16FFE2085471316923AC7BFBC4E3BBEBA71950AD60EAA4B
EA84B8EB89079B6BEAD01C4E2BC5BF11F5FD2CB41D465D8AD649D765F2A952E2
2AC4EF1DF8297E4E5405180477A9E4F70BB10D787681535F61379438A6888E4F
660E2B1CD68547F69ECDD808A3CD50B9FBBDA239A40EE62332FADD878CD5F875
BAC27E0BDDA94455E030928A249A166F13D134EF255F5783> |-
systemdict /gcheck known {setglobal} if end {end} if
end
REWEZV+Calibri /Encoding get
dup 40 /parenleft put
dup 41 /parenright put
dup 105 /i put
dup 109 /m put
dup 113 /q put
dup 115 /s put
dup 117 /u put
pop
%ADOEndSubsetFont
/REWEZV+Calibri*1 
[32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 7{/.notdef}rp /one /two 
47{/.notdef}rp /b /c /.notdef /e 3{/.notdef}rp /i /j 
2{/.notdef}rp /m /.notdef /o /.notdef /q /.notdef /s 
/t /u 138{/.notdef}rp]
REWEZV+Calibri nf
REWEZV+Calibri*1 [11.04 0 0 -11.04 0 0 ]msf
184.859 25.7231 mo
(\(mosquito\))
[3.3605 8.87943 5.87982 4.32004 5.75949 5.76062 2.51935 3.60022 5.76059 0 ]xsh
REWEZT+CambriaMath [11.04 0 0 -11.04 0 0 ]msf
154.157 52.4509 mo
(\007I)sh
%ADOBeginSubsetFont: PBAAAA+CambriaMath-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2019 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/PBAAAA+CambriaMath 1 GetGlyphDirectory
2870 <001C60D8A8C9B7F88C2BC3AB8E1F989FE2FEA0C513528CA7DFBF50274F
68AA0EDB4100DE0B777AA374FBFE005F9E9EC8F9AB3D41A4C4EFF0E6E0A6F09C
393DCFD2531BB9E18C9571E3369CFCC09837C3AFFF9BDC71DF68C6C16970B097
1387A247FC0E95B4CD1BF0393DA9D91E831DB41A58EDC8F542002489C4650700
0C58221626CFE029D1A273DB9655B154A4F77E74EDEC4BDBD21696CCC25245DD
284B8E8A8755FB79CBA587E858BCBF0207A46A656DC1D971C8B434EC954DEC60
E03836F96B4E5E97C756F5F5E35B009DCB3792DDAD78C622DFA41CE4F1BFB60A
A7FA02DDE47ACACF0C690E38A8B38D1C35A77E07F84B508A9324632067B36C09
27DD8183C23D330030C9A7F437249F853585AB625A22C3290B> |
!
end
end end
%ADOEndSubsetFont
REWEZT+CambriaMath [8.04 0 0 -8.04 0 0 ]msf
163.398 54.7303 mo
(\0136)sh
156.487 38.4697 mo
156.487 38.0717 156.809 37.7498 157.207 37.7498 cv
157.605 37.7498 157.927 38.0717 157.927 38.4697 cv
157.927 38.8677 157.605 39.1897 157.207 39.1897 cv
156.809 39.1897 156.487 38.8677 156.487 38.4697 cv
ef
.24 lw
0 lc
1 lj
149.527 38.4697 mo
149.527 34.1617 153.019 30.6697 157.327 30.6697 cv
161.635 30.6697 165.127 34.1617 165.127 38.4697 cv
165.127 42.7777 161.635 46.2697 157.327 46.2697 cv
153.019 46.2697 149.527 42.7777 149.527 38.4697 cv
cp
@
177.668 15.5497 mo
162.847 32.9777 li
@
grestore
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
] del_res
/REWEZT+CambriaMath-Identity-H uf
/REWEZT+CambriaMath /CIDFont ur
/REWEZV+Calibri*1 uf
/REWEZV+Calibri uf
/QJJAAA+Calibri uf
/REWEZU+CambriaMath*1 uf
/REWEZU+CambriaMath uf
/HIBBAA+CambriaMath uf
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
