%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: ang_mom_fig4_new.pdf
%%Creator: Adobe Acrobat 11.0.16
%%For: mtrawick
%%CreationDate: 5/21/2016, 3:47:37 PM
%%BoundingBox: -1 0 278 148
%%HiResBoundingBox: 0 0 277.9066 147.7371
%%CropBox: 0 0 277.9066 147.7371
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 1181 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.4-c005 78.147326, 2012/08/23-13:03:03        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:pdfx="http://ns.adobe.com/pdfx/1.3/"
   xmp:ModifyDate="2016-05-21T15:47:27-04:00"
   xmp:CreateDate="2016-05-21T15:46:59-04:00"
   xmp:MetadataDate="2016-05-21T15:47:27-04:00"
   xmp:CreatorTool="Acrobat PDFMaker 11 for PowerPoint"
   xmpMM:DocumentID="uuid:c0f75ce6-6e67-4d2f-9c3e-e275e1370b96"
   xmpMM:InstanceID="uuid:ff99440c-b015-47e7-9c57-8abe3ff7cc01"
   dc:format="application/pdf"
   pdf:Producer="Adobe PDF Library 11.0"
   pdfx:Company="University of Richmond">
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">PowerPoint Presentation</rdf:li>
    </rdf:Alt>
   </dc:title>
   <dc:creator>
    <rdf:Seq>
     <rdf:li>Trawick, Matt</rdf:li>
    </rdf:Seq>
   </dc:creator>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
Adobe_AGM_Core/ps gx
gsave
/0 
<<
/0 
[/DeviceRGB] /CSA add_res
/CSA /0 get_csa_by_name
/MappedCSA null
/HiVal 0 
/Lookup <~
!!!!~>
>>
/CSD add_res
grestore
Adobe_AGM_Core/pt gx
%%EndPageSetup
1 -1 scale 0 -147.737 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
-1.52588e-5 0 mo
-1.52588e-5 147.737 li
277.907 147.737 li
277.907 0 li
cp
clp
gsave
-.775894 148.415 mo
278.224 148.415 li
278.224 -.585008 li
-.775894 -.585008 li
-.775894 148.415 li
clp
48.3941 88.165 mo
48.3941 77.3289 72.678 68.545 102.634 68.545 cv
132.59 68.545 156.874 77.3289 156.874 88.165 cv
156.874 99.001 132.59 107.785 102.634 107.785 cv
72.678 107.785 48.3941 99.001 48.3941 88.165 cv
false sop
/1 
[/DeviceRGB] /CSA add_res
.862551 .867103 .872214 rgb
ef
1.02 lw
0 lc
0 lj
8 ml
[] 0 dsh
true sadj
48.3941 88.165 mo
48.3941 77.329 72.6781 68.545 102.634 68.545 cv
132.59 68.545 156.874 77.329 156.874 88.165 cv
156.874 99.001 132.59 107.785 102.634 107.785 cv
72.6781 107.785 48.3941 99.001 48.3941 88.165 cv
cp
.137422 .122799 .126081 rgb
@
48.3941 81.085 mo
48.3941 70.249 72.678 61.465 102.634 61.465 cv
132.59 61.465 156.874 70.249 156.874 81.085 cv
156.874 91.921 132.59 100.705 102.634 100.705 cv
72.678 100.705 48.3941 91.921 48.3941 81.085 cv
1 1 1 rgb
ef
48.3941 81.085 mo
48.3941 70.249 72.6781 61.465 102.634 61.465 cv
132.59 61.465 156.874 70.249 156.874 81.085 cv
156.874 91.921 132.59 100.705 102.634 100.705 cv
72.6781 100.705 48.3941 91.921 48.3941 81.085 cv
cp
.137422 .122799 .126081 rgb
@
97.5341 81.355 mo
97.5341 78.522 99.8441 76.225 102.694 76.225 cv
105.544 76.225 107.854 78.522 107.854 81.355 cv
107.854 84.188 105.544 86.485 102.694 86.485 cv
99.8441 86.485 97.5341 84.188 97.5341 81.355 cv
.944547 .946454 .948585 rgb
ef
107.884 86.515 mo
97.5041 86.515 li
97.5041 76.1949 li
107.884 76.1949 li
107.884 86.515 li
102.694 76.225 mo
99.8441 76.225 97.5341 78.522 97.5341 81.355 cv
97.5341 84.188 99.8441 86.485 102.694 86.485 cv
105.544 86.485 107.854 84.188 107.854 81.355 cv
107.854 78.522 105.544 76.225 102.694 76.225 cv
/1 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 162.776 147.737 ]ct
[10.8628 0 0 10.8 -65.5133 60.9821 ]ct
snap_to_device
Adobe_AGM_Image/AGMIMG_fl cf /ASCII85Decode fl /RunLengthDecode filter ddf
<<
/T 1
/W 45 
/H 45 
/M[45 0 0 -45 0 45 ]
/BC 8 
/D[0 1 0 1 0 1 ]
/DS [
[AGMIMG_fl 45 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 45 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 45 string /rs cvx /pop cvx] cvx
]
/O 2
>>
%%BeginBinary: 1
img
nG`jln`]<&kj7p6qYf=O$Ms;VlfdR!oC_tYhu=&[n`]<&kj7p6qYg3hkl2"dn`]<&kj7p6qYf=O$Ms;V
lfdR!oC_tYhu=)\n`]<&kj7p6qYgHSrt+n`ccOM`g>CuSlgF<7pA4dMrt+n`ccOM`g>CuSlgF<7pA4dM
rs&2VccOM`g'QZtkNhR+oCi%[kPl7gbdbF,bgP/"io]OonFQ>Hq"Xacl2MIibdbF,bgP/"io]OonFQ>H
q"Xacl2LbU'?mu$`QZc_h;[S^mdTi@pA"F[rp0S#q9Z@P]"uJ5e_8sBl0Rp1p%S7WqYU0gm/Imtd'0jf
_8spPg>M&Vm-sT=p\=R\qtp?^s8;m5q9Z@P]"uJ5e_8sBl0Rp1p%S7WqYU0gmJdpfY,JP3]Yhn>fA5HK
lgF<8pA"I[qu-EmrpTk%m&m:j[CjE"dF[46k3MI*o_/(UqYU6h!<2lqp&>cnY,JP3]Yhn>fA5HKlgF<8
pA"I[qu-Emrp]q'ihN9JYd_?cbgP2$jQPt"oC_kRqYU3gr;ciertaUhUT(K,^;\=Eg"tfRm-sW>p\F[_
r;QWrrVc`crtaUhUT(K,^;\=Eg"tfRm-sW>p\F[_r;?Knrpp(+f9r5+X0K1L`m*#ei8s7lnauPMqYU3g
rVQTcrt<qOStrEl\A-&.eCrjBlL+37p'(6fqu$Bjqu63e(tY1IUoUc1^W+OJg>M)Xmd]rCq"jmcr;HNl
o`#cdPaS/?X0T:Oa3N5iiTBFoo(DbQqY^9iq>U'e$fI8;T;ATo\\Q82eI:3kk3DF+p%S:Yr;?Nhrq6:.
i09Y%V5po4^rOaNgYq;[n+-/Gq>1$erV?Hdru(*dQ(">AXL#LSaNrGmiofXro(DbQqu$EkqYgNorqHEq
lBIR&T+n-'Zb!uocdpn2kNhU-p%S:Zr;HTjrW2usp\u,rPa.]0V6%#7_8ssRgu@M_n+-/Gq>:*grVHKo
rVlTl*;#__Q("ACXL#LSaNrGmiofXroChtUqu$Ekrr2oss8N&sqYqW:s7DeCQ("ACXL#LSaNrGmiofXr
oChtUqu$Ekrr2oss8N&sq#;?+Ruru)TVefs]"uJ6f%f9JlgOH=q"jmcrVc`prr<#ts8D`m*5.>oQ(">B
XL#LSaNrGmiofXroC_nTqu$Ekrr2os!ri2ts8Dcn*5.>oQ(">BXL#LSaNrGmiofXroC_nTqu$Ekrr2os
s8N#rq>VGJNKKKpT;J]r]"uJ6f%f9JlgOH<q"jmcrVc`prr<#trr)]n)siTEOHl9,V6%#7_8ssRgu7G^
n+-/Gq>:*grVHKqrVZQkqu7W%NfB-cR\-FXZb!uocdpn1kNhU-p%S:Zr;HTjrWE,squ-El)siTEOHl9,
V6%#7_8ssRgu7G^n+-/Gq>:*grVHKqrVZQkqu7>3M2dU]R@g=VZFRckcIL\.k3D@>o(DbQqYU3hqu-`s
rVZQiqu7V;M2dU]R@g=VZFRckcIL\.k3DC*p%S:Yqu$EirWN2ur;6Bgru8(sNKBBmT;ATo\\Q82e_B'F
lL+69p\F[_r;HNl"TA;sqtp<k%.&b+N0'9lStrBk\A&Tpc-tD(jlu1&o_/(Vqu$BjrVd$"rVZTiq>L9l
*UJQ<N0'9lStrBk\A-&.e(W^@l0\$5pA"L]r;?NlrW`?"r;?EerVca:m"^FVOHc0)UoL]0^W+OIg>D#V
mIBiBq"jmcr;HTn#6"Mur;-6frVm#;L5CkM(R(5WUT(K,^;S4Cf\YZPm-jQ=p\F[_r;6Err;6Beq"amg
*5[GeN/s0iSYN0g\%]f(db*F:kj7d0p%S:Yqu$?i"oS8pq=sdaruAn1M2[LZR%:"OYd_?bbL5&"j65ju
oC_kRqYU3fr<E2sqt^$_s8N$<Rtc`WO-5j"U8Y6&]Yhk<f%f6HlL+37pA"I[qtp9pqtp6bp\+Rc*1M\=
MiX$fS>)sb[CjE!d+7"2k3DC)o_/(UqYU0f"oJ2nq"OL\ru@M_Ll7=WQ^jeKY-kp[ajAVoiTBFnnauPM
q>1!dr$VF>qtg*^pAb0]mt?FOMiNpcS"QX[Zb!rmcICS*jQPt!o(;YNq>1!c-MmQ5p\".TqsX!,L5:bJ
Od;K0VQ@,8^rOaMg>CuTm-jN;pA"I[qthW7q=s^WoDAFRmt?FOMiNpcS"QX[Zb!rmcICS*jQPt!o(;VW
q"ad`q^;79q"OIQqtnaeKS>2=NKBEnT;8Kl\%]f(dF[14k3D@'o(;YMq"amb./E]6p\"1Kp\3%]KS>2=
NKBEnT;8Kl\%]f(dF[14k3D@'o(;YMq"amb*;TF*p\"1Kp\3%]KS>2=NKBEnT;8Kl\%]f(dFSc]iTBFm
nFH5Fp\=R_qC)18q"OIRnb;dn^k7>rM2[LZR%9tMY-kmXaNi;ghW*eamI9]=p%J.Xpa>h0p%._BoCKc5
K8#);N/s0iSYE'c[Ca8rcICP(j6,^pnFH5Ep@nL['DM4noC;;@o>&.oKnkMDO->s%U(aK.[Ca8rcICP(
j6,^pnFH5Ep@nL[-hm?-oC;;@o<kuYKSG;@Nfo]tTV\]p\A#o)d+6t0jQGgqn+$#Ap&4S4p%@qInF,`4
n$TQUKSG;@Nfo]tTV\]p\A#o)d+6t0jQGgqn+$#Ap&4Rmp%@qInF,`4n$TQUKH#Z%MiNsdS"QUYZFIWe
bL"hpi8j(dmI0T:o_&1V./!9)o'l,7n*d6TK7nr6MN*^^R@U+OY-kmXa3E&agu.8VlKms.nacVL-h?fr
mHa$&l`$k9KS>2=NKBBmSYN-d[Ca8qc-k5!i8j(dm-aB5o)/(]o'u29,O=U[l`$k9KS>2=NKBBmSYN-d
[Ca8qc-k5!i8j(dm-aB5o)/),o'u29lfma$SXk@bKnkMDO-5j!TV\]o\%T]#cI:G$i8`talg4'.rU;9)
md9B+kiLshSXk@bKnkMDO-5j!TV\]o\%T]#cI:G$i8`talg4'.nG_o*n*]T0lKI?lk+/&pK8#);N/s-g
S"QUYZ+%EaaNi8egu.5Tl0I^(n,;`(n*]T0lKI?lk,"o+K7nu8MN*a_R@U(NXg>RP`6$<RfA#3BjQGal
lhp)llfmWqj5K"WV58crKSG;?NKKHnSYE'bZamfgaj/AegBQQpjQGallhp)slfmWqj5K"WV58crKSG;?
NKKHnSYE'bZamfgaj/AegY_#OkNM3sr9Pitl0.9iiSrk$Y^qCYKnkMDO-5fuT;8Hi[(=#jaj/>cg>1]H
jQ5Rfrob6_k2kX^hq[5NYcr\1K8#);N/s-fS"HLUY7J"O^Vn7>dam..i8WhZkNDj..HfjTj5JnNio72H
JV&N.LP^tNP*VT0UoCQ)]"c2*cI1:th;I;Rjlbh+kUG]Wjl>=Wgu@>.^O^uhKSG;?NKBBlS=ug\YdM'W
`6$9OeC`L2hr*MRro4UMiS`SJg",6F^V>>OK7nu8MAM86PaIu7VQ6r/]"c2*c-b%ng>1ZEio9st.H9=E
hV?f8jQ+(jJV&N-L5:_HOHc-&Tr+lp[CX,kaj&5_f\50=i8Wbqj!`pGi838Bf&Yo8bCP7sKS>2<MiNpb
R@U(LX0B"C^Ve+8cdL@qg"Y<\h$Mlkg=Y!+dH0K5*m9+dJqSi5M2RCVQ'n2;VQ6r/]"c/'bKnVef@ep6
rS8mWgY1<2eC!C>bKGHgJqSi5M2RCVQ'n2;VQ6r/]"c/'bKnVef@ep6rS8mWgY1<2eC!C>j5Y]AJqJ`2
Ll..PP*VQ.U8P&r[CNue`Q??LdF6XsrRV)$eL&eod*9c#m,R,WJV&N-L5:_GO-5ftSt`-`YdM$T_8XO?
cI(+kf)=2Kf%&9ud*9c#m,R,WJV&N-L5:_GO-5ftSt`-`YdM$T_8XO?cI(+kf)=2If%&9ud*9c#m/R*I
JUrE*KnbD@NKB?jR\$7OX08k=]>)5%aND^.cHjl:d4*Ggc-4;M`r5l9s,_e_JqJc3Ll.1RPF%`0U8P&q
Za[Q]_SsU=bg+P]rm<1Accs\Ua2\)Vs8S13JV&N.L5:_HOHZ$"St`-`YHt^M^V[t2b08/Wd/ME6d*Kt\
aiDF"rVuo)J:W<)KS>2<MiEg^Q^XM?VQ-d+Z*h-T^VRk-a2uI&ap,u/a2Ps3d/Etc["*^ZK7nr6M2R@T
PF%`0U8FrnZ*h-T^VRk-a2uI&ap,u/a2Ps3d/Etc["*^ZK7nr6M2R@TPF%`0U8FrnZ*h-T^VRk-a2uI&
ap,u/a2Ps3d/EtPhgg9/JqJ`2LP^qL&s/<DR[p.KW3!2.[CEi^^VI\&rkf#Y_8*dt]&`nk+TMK!J:W9'
K7nu7M2RCUPF%`/Tr"]hYHkRG]=ktp_8?2h#/\3l^:_&<rVmqrJ:W9'K7nu7M2RCUPF%`/Tr"]hYHkRG
]=ktp_8?2h#/\3l^:_&<r;Rq-J:W9'K7nu7M2RCUPEqW,TVJB`XKSq:[^`lZ]=beg]*5dV\$`gGr;S.3
J:W9'K7nu7M2RCUPEqW,TVJB`XKSq:[^`lZ]=beg]=PP^[CZ>7s!O1aJUrE*KSG8=MiNm_QC489USb#l
YHkOD\@K2_]Y(kg]",;X])DR,);B[lJV&K+KnbD?MiNm_Q'e&4TqeKaX0&Q6Z*L^C['d9JZa-g=g\_!t
gOOg*JqAW/L5:\ENf]HiR%'\@USb#kXfo"8Za@*I['[0FYclgYs!HKNJ:W<(K8#&9M2RCUPEhN)StVpV
WN3/)Z*L^C['d9JZa-g=g\Up]W.9GMJqJ]0L51VDNK96eQP>jXStVpUVl?\sXKAY.Xf\\*WjDX"s!=Uo
JUrE*K8#&8M2R@SP*D<$S=ZFLV5L;mX/rG+Y-"h-X/`N(qYqk?J:W9'K7el4LP^qKO-5`oR@KkBUSXlf
WiN5'Y-+n/XK/A-r;-F!kCeA:JV&N-KbB,qM2R=QOcu&sR@Bb>TqeE[VZ!CqVP^2bjn\oqkCeA:JV&N-
KnbA>Mi<[YPEhK&S"61FUSO``rMKdqVPU'Lq>VDsKReW)JqJ`1L51VDN/j$aQ'[o.SY)UNUnsseVZ`lo
V5*/Iru9F;J:W9'K7ei3LPUhHNK93cQ'[l,S=Q7DTV2:X"/)<ZbkM,Vdsut"JV&N,KSG8<MN!OUOcu&s
R$sP9StD[Krh0FeTV'I&ru9F;J:W9'K7ei3LPUhHNK93cQ'[l,S=Q7DTV2:X"e_N\bl@_<ru&J"J:W9'
JqJ`1L5:\EN/is]P*D5uR$jD3r0m_U[e9Y<]RYN`JV&K+KS>/:M2R=QO-,TiQ'[l+R[X/D!LgIiru8V$
J:W9'JqJ`1L5:\EN/is]P*D5uR$jD3S"'DH!LgIhrtq\bJ:W9'JqJ`1L51SAMi<XVOHG]iPa.O3Q3!u[
o`#c,J:N3%JqAW.KnbA=M2R=PO-#KePE_>tr0@A_q"4S!W.9DLJV&K+KS>/9Ll%%KNK9/)OckomQ'M95
!NGkcrrTQXJGt*1JqJ]/KnbA=M2I4NNK0']rfR2C!O2@irrTQXJGt*1JqJ]/KnbA=M2I4NNK0']rfR2C
!O2@irrTQXJGt*%JqJ]/$\a=jLl%"INK&sZOT(CAOo_f^nc&U0rdYW4JV&K+KS5&6LPUeEMMmFPNK*pt
!5S('!6>(h&qPUcJqJ`0KnbA=M2I1KN/WaUrf-uon,EC.rdYW4JV&K+KS5&6LPUeEMMmFPNK*pt!5S%&
'Ao%)J:W9'JqJ]/KS>/8LPUbCM>iA5Q.t^+'Ao%)J:W9'JqJ]/KS>/8LPUbCM>iA5Q.u!3q>V,cP^n:8
JV&K+K7no3L5(J>Ll$ufM?0!sli.%4N.CnYs+:9's+LE+s+^N.!ftP%lMgq3N.CnYs+:9's+LE+s+^N.
!ftP%r;Z6c!mcgUrdk*$s+C?)s+UK-reCQ9bPUQ("8gECJGt-!K)^K&KEHq(c1gE$"8gECJGt-!K)^K&
KE?k'blIM$rr`/EW.=kurdt0&re(B-Us8Yprs\eR]V2$YJVp.p\^:*0rs&AL]V2$YJH^q)Tt/PEiVs>`
e%DBJNIct\Tt/PEiVs>`e%DBJNIct\Tt/PEir9JfqpW3OToFV\TqT$DpYl,\qpW3OToFV\TqT$Dp[S96
~>

%%EndBinary
grestore
np
102.694 86.485 mo
99.8441 86.485 97.5341 84.188 97.5341 81.355 cv
97.5341 78.522 99.8441 76.225 102.694 76.225 cv
105.544 76.225 107.854 78.522 107.854 81.355 cv
107.854 84.188 105.544 86.485 102.694 86.485 cv
/1 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 162.776 147.737 ]ct
[10.8628 0 0 10.8 -65.5133 60.9821 ]ct
snap_to_device
Adobe_AGM_Image/AGMIMG_fl cf /ASCII85Decode fl /RunLengthDecode filter ddf
<<
/T 1
/W 45 
/H 45 
/M[45 0 0 -45 0 45 ]
/BC 8 
/D[0 1 0 1 0 1 ]
/DS [
[AGMIMG_fl 45 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 45 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 45 string /rs cvx /pop cvx] cvx
]
/O 2
>>
%%BeginBinary: 1
img
nF?qRjkSbKgu.A[mI9$($LQs1hq[#FkNVC'hsq-AjkSbKgu.A[mI9oAkjf)JjkSbKgu.A[mI9$($LQs1
hq[#FkNVC'hsq0BjkSbKgu.A[mI9],ndt':`4s75cd^V%hr<b\l0\$&ndt':`4s75cd^V%hr<b\l0\$&
ncn@0`4s75cO&+RgY_#PkNVC(kOK>N_QUAZ_T0pLf%T!?jQGdllg+!/l1,PP_QUAZ_T0pLf%T!?jQGdl
lg+!/l1+i<'>gr\]>DV5dam./ioK:el0I['na#`^m)>m&Z+%Hbb0SVjh;IAVl0@U$mI'E3m.(tZ`M]`@
\%]c&cdg\(i8j%blKdg(mdBT7o)/%pm)>m&Z+%Hbb0SVjh;IAVl0@U$mI'E3mID"MV4XWdZFRcjbgP(r
hr<b]l0I^'meuSSnaH#`i2*'CXKoCP`lul^g>CoOkiqF"mI'rA!:fsWp$rjUV4XWdZFRcjbgP(rhr<b]
l0I^'meuSSnaQ)besi/%VlmD=_T0sNf\GEGkNV9umI'H@n,W"KneTfGS"Q[^[(F2qcI:G$i8j(clKmp+
n,DeXnF5u<neTfGS"Q[^[(F2qcI:G$i8j(clKmp+n,2YTnac5fb`S3]U8Y9']Yhk;e_/g=jlkspmI'H3
nGDbIne00/QCO\JYI2$\aj8MjhW!Y\klpD?mdKW6qsj:K(sJ,.S>)sc[CjE!cdg_*ioTCglg=-/n*p5E
o^WjLN00HtU8bB*]u/">f%T!@k3;0tmI0N5q=4.K$e:2uQ^skMYdV6_apcYJg>:lPl0@X&n*fcAnb)Gi
eVoWWSYE*f[_9T$d+6q-j6#Ukm-X91nG2VJnep;CNKTX!UT1T.^;S4Bf%]*Bk3;0tmdKZ7qXFUUnb;SW
hMdGWQP?!cWj0%I`66QZgY_&Rl0@X'n*oiCnH&.Lp[T3YN/a!eSYN3i\%]f(dFR(0j6#Ukm-a?3nG;YU
nF?;E*9`TDNKT[#UT1T.^;S4Bf%]*BkNV="mdKZ7naZVLs7--YqXP]uo&u9pNKT[#UT1T.^;S4Bf%]*B
kNV="mdKZ7naZVLs7--Yq!oEgPDY?_R%C(QZ+%HcbL+nqhrEnalg=-/nF5u<rpp*Zs7#gS*4(BWNKTX"
UT1T.^;S4Bf%]*BkNV="mdKZ7naZVL!qGgMs7#jT*4(BWNKTX"UT1T.^;S4Bf%]*BkNV="mdKZ7naZVL
s7-*Xq=5N3L5LtRQ_'tPZ+%HcbL+nqhrEnalg=-/nF5u<rpp*Zrp]dT)rQL+M2d[bSYN3i\%]f(dFR(0
j6#Ukm-a?3nG;YWnF,f7qsk]aLPCYFP*_`7Wj0%I`66QZgY_&Rl0@X'n*oiCnH8:LmdU,E)rQL+M2d[b
SYN3i\%]f(dFR(0j6#Ukm-a?3nG;YWnF,f7qskDrJqf,@OdDW5WN`hE_og?Wg>:fok3;0tmI'H4qsagY
nF,f5qsk]%Jqf,@OdDW5WN`hE_og?Wg>:iOl0@X&mdKZBnHA@Nn*]W@nf+BVL5CkOQ^skMYdV6_b0\_n
hW!\^lKmp+n*p5E"RtpLmdC#D%,cYfKo(bNQCOYIYI+qS_oU0Rg"kWKkiqF#mdKW6rUC*]nF,i5m-suE
*T2I"Ko(bNQCOYIYI2$\aNrAhh;RJZl0Ia)n*fcEnHSLPn*fZ1nGVnui.-E5M2[R_S=umb[CjDucd^Y(
iT9:flg=-/n*p;G#4V-Nn*TK2rUL*$ItEB1(Q=H@S"Q[^[(=)oc-t;"i8a"blKmp+n,)SXn*]W1lg4T@
*4UKMKnt\LQ(+GEY-bdVa3E)bgu.5Ul0@X&mdL&B"n1mIm-F$:nf5/hJq]#>OHl<.VlmD<_8jgLfA,<E
kNV9umI'H?n-8@Lmd09+o)A2"PCJ.:Ll7=YR\-FXZFR`hbL+nphW!Y\l0I^'mecGVmdBK.lKS9<*0Yl'
KSYPIPa\5@XKoCO`QQZ[g>:iNkiqF"mI'l?"n(gGlg!a5nf3jCJV8i;O-H**V6$u5^W"CDf%T!?jlksp
m-X6=mjISlmd9?*l14E*j*cE.KSPGFPF.r:Wj0"G_o^6Sf\GEFk32'qm-X]<-LL0clKRL"mc3>UIt<9.
MN3mfSti<j[_9T#cd^V&i8`t`l0I^'qsG]rm-Es$kO.cuj*cE.KSPGFPF.r:Wj0"G_o^6Sf\GEFk32%2
lg4$9mO.Dglg!`tmdA'5I=?^!L5CnPQ^jbJY-bdV`lui]g>:fLk32'plg4T;..$<dlKRNolKZ@-I=?^!
L5CnPQ^jbJY-bdV`lui]g>:fLk32'plg4T;*:3%XlKRNolKZ@-I=?^!L5CnPQ^jbJY-bdV`lnh<f%T!>
jQ>[jlKdg8m3q>flg!`ujm)->[X<OSJq]#>OHl9,V6$r2^;J(<e(<@2iT0.bl07L2lR1u^l0%0gkNB:^
I"$TtKnt\LQ(">AXKf7K_o^3QfA#0@jQ>[jl0A34'C+iHkN1aekI.gHIXm$(Ll@F\RM2<iXKf7K_o^3Q
fA#0@jQ>[jl0A34-L0j[kN1aekH(b4I=Hg$LPq1VR%9tNYI(mW`QQWYf\>9Aj5oIfqWT<hk2bR\j5[5B
I!pKqKSPJGPF.o8WNW\?_8XUEe_&X5iT'%_kkaNNkN:jci8`k!XF,F7It<9.MiO!gSYE*e[(=)mbL"el
gYUoLjlbk(kpGTUjQ#1Yj.N&mI=?^!L5CkOQ(+DBXKf7J_oL!Ke_&X5i8WhZk5=Bik2kX^hqd2ITV-[\
IXm'*M2[R^S"HOYZ+%Eaa3;r]f\>9@ioK4`r9"1Ejl>;Ehqd2ITV-[\IXm'*M2[R^S"HOYZ+%Eaa3;r]
f\>9@ioK4`r9#Hijl>=Wh;@+TQ$[n-J:`K2MiX'hSYE'cZamffaN`,_f@o'<i8Weqj=0-KiS`SJg"P/F
Q$[n-J:`K2MiX'hSYE'cZamffaN`,_f@o'<i8WeXro>Kfio/hPgtCE8Q'H]DIXm$(Ll7=XR%9tMY-Y[Q
_oU*Me^rO2hr*MSrT#Beio/hPgtCE8SXk+TI=Hg#L5LqPQ(">@Wj&kA^Ve.:d+$Y!gYCZCr87_8h;$`9
rmhpWSU5a4It<6,MN![_R\-CUYdD!V_oU'K#1V5VgYCZCr87_8h;$`9rmi0^SU5a4It<6,MN![_R\-CU
YdD!V_oU'KeCN:,gtprdhuqrngtLBZef^lgH@($gJ:`K2MiO!fS=la[Z*h0X_oKsHdacq$g"Y9\g_nl#
g"4g)dFQmHVg<];IXm$(Ll7:WQ^j_G&$)tC]"c/'bKnVef%A[1g]#tWgY1?4f$r*ueu,ElH[L9mJq]#=
Ng#g"TVecp[CX,ja32fWe^iC+gY;__.GNS0f@JI!f%.7:H@($fIt<6,M2[O\R@^.NXKf1E^Ve(5c-Ohf
e^i=Nf+HTbe^MpkbLkIT[<d1II=Hg#(P[d*OHc0)U8P)t[CX,j`lZKOdaZguf)F8Mf%/C#dE]qffX8,5
H[L6kJV/]6N0'9lSt`-aZ*h0X_oBgCcdL=nf%0iP.+Zu"e'ZIaf\"$VH@(!eIXm$'LPh(RQ(";=Vl[/2
\\5hta3)WOd*_g?$.7,Gc-+5Kg"F1__0UHTI=?]uKSPGEOd2B,U8P)t[CNue`5g$EcHsu;dO<MiccsYT
`nB%]_0UHTI=?]uKSPGEOd2B,U8P)t[CNue`5g$EcHsu;dO<MiccsYT`nB%sf6VaiI!pKqK8#,>Nfo]s
St`-aYd:gN^V[n.aND^)bQ5o0-HX<I_nk9hf@P=pH[L6kJV/Z4MiNsdR\$7OXK]%?]>)5#`lQ<GrQH\5
b/q]C_nk9hf@P=pH[L6kJV/Z4MiNsdR\$7OXK]%?]>)5#`lQ<GrQHV3b/q]C_nk9ho(%W`H@($gIt<6,
M2[LYQC=D>VQ-f([CEi_^qp/j`5V_q.E06C_S<dsnF6#>M0aJpI"$QrK8,5AO-5ftSt`*^Y-GCE]=u(t
_o0On`[SmF_ns1%]^YF]nqh[=H[L9lJV/]6N/s-fR\$7NWiiV7\@]Jj_Sa=2rl-"u`5BI,]tEk(o(&i,
H@($fIXm$'L5CkMP*VQ.Tqr*pXK]"<\%92b^VBc`#/@mc]=GAhrUM#1H$XgbI=?]uKSG>BO-5ftStW!Z
XK]"<\%92b^VBc`#/@mc]=GAhrUM#1H$XgbI=?]uKSG>BO-5ftStW!ZXK]"<\%92b^VBc`#/@mc]=GAh
rUL?GH$Xd`I!pKpJqSmlM2[LYQ'n28USb#lYHbFA[^WdG\Ho^S[^<?Ff^eSUo((:UH?spcI=Hd!KSPDC
O-5crSY)[SWN<;.ZaI6N\Gj#C\@8oRZE`'\nfH;+H?spcI=Hd!KSPDCO-5crSY)[SWN<;.ZaI6N\Gj#C
\@8oRZE`'[nfa*?H?spcI=Hd!KSPDCNffQnS"?:JVQ$VuYHY::ZEga?"gP;7XKh9mnfNs=H?spcI=Hd!
KSPDCNffQnS"?:JVQ$VuYHY::ZEjJ7"L,&1Z1.\^+-:boH@($fIt3-(LP^tMOd)6&StMjUWN3/)Yd(I=
ZMq*3Ycb(4nGMhpd!9n_H[C-hIt<3)LP^tLOHYuuS"?:IUo"R!WN*#"XK/D%WMcW?qsl)\H$O^_H[L9l
JV&Q1M2[FUPEqW+StMgRVPpJoX/i>&X/`.sVU552-I@$`H@(!dIXcp#KSPDCNKB?iR@Be@U84ZbWN*#"
XK/D%WMcW?qXP2iH$Xd`I!gBmJ:`H/Ll74Q'TnWGR@Bb=TV8*TUnso`UnaZXWpffT-(fI/H@($eIXcm"
KSG;@N/s*cQC455StMdOUSO`_Unjc[TrRSXng0oRH?spcI"$QqJqSl7Mi<^ZPa7`,SXuLJU8+N\V50o^
U7nUUqXOpHI<g-bH[L6j&V#=_KS>2=N/`m\PEhK&S"-&GScYIPg%k1WgO4?nH@($fIXcm"KS>2=N/`m\
PEhK&S"-&GScYIPg%k1WgO4?nH@($fIXcm"KS>2=N/`m\PEhK&S"-&GScYIPg%b+WaE`&WH@($eI=Hcu
K8#&9MN!OUOHPinQC!u+rg<kUR$Y\anf,YqH$Xd`I!g?lJ:W?,L5:_GNK90aPa.Q$R$dl@".5IB_Y<U?
aE`&WH@($eI=HcuK8#&9MN!OUOHPinQC!u+rg<qWR$Y\\o(_bnZ?^_AH@(!dI=?ZsJqSi5Ll.+LNK90`
P*5a,!KsSXnen`YH$Xd`H[L6jIt<3)KnkJAMi<XVOHG]hr0%/EXnD6(Z?^_AH@(!dI=?ZsJqSi5Ll.+L
NK90`P*2#mrf[AGXn;0$T6Y^.H@(!dI=?ZrJV&Q/L5:\DMi<USNVne;T^27@(nZ)!H?spbI!pHnJ:W<*
KnbD?MMmFPNK*jr!MJcNne.R?H$Xd`H[L6jIt3*%KS>/:M$8cpN/WaUr/LfNlgsZKX*K!iH4P@MI!pHn
J:W<)KSG5:Ll)+gregfTlgjTJX*K!iH4P@MI!pHnJ:W<)KSG5:Ll)+gregfTlgjTJX*K!iH38MAI!lBO
It3*%K7nu6LPUfdMZ/M7VsEmD!58AW&pekNH[L6iIXcm!JqJ]/KnY89reCK^n+$Ilrco-&H@(!dI=6Qo
J:W<)K7nr4L5,\_!4M@e!58AW&pekNH[L6iIXcm!JqJ]/KnY89reCK^md_%@N-T\pH@(!dI!pElIt*!"
JV&LQK)ptYmICq?N-T\pH@(!dI!pElIt*!"JV&LQK)ptYp%%qL'@_tdH$Xd`H[L3hI=?ZqJ:W9'K)UB'
NR7"^!lTe<rd+Tks*Xips*jutrdY'+_=$UZ!lTe<rd+Tks*Xips*jutrdY'+_=%6ln+$OuKmEZDs*Ocn
s*aors*t#u!f4\\l1+rE`1M>SHN&9kI/\NrI[n=@kOJ`C`1M>SHN&9kI/\NqI[n:UlK@^?m_k`Crd+Qj
s*Xfo"+HcXlK%LEm`;]%R>-$?R@1:ulJ_:<m`;]%R>-"kK:/.3`TlFQ%.;3BR@/eUK:/.3`TlFQ%.;3B
R@/eUK:/.3`TlIR%J&r.ZC.,8H@qWRYf5ndndOs-ZC.,8H@qWRYf5ntnpg~>

%%EndBinary
grestore
np
97.5341 81.355 mo
97.5341 78.522 99.8441 76.225 102.694 76.225 cv
105.544 76.225 107.854 78.522 107.854 81.355 cv
107.854 84.188 105.544 86.485 102.694 86.485 cv
99.8441 86.485 97.5341 84.188 97.5341 81.355 cv
cp
.137422 .122799 .126081 rgb
@
2.28 lw
102.484 78.1885 mo
102.484 9.65448 li
@
105.724 82.675 mo
140.972 94.952 li
@
.48 lw
[1.92 1.44 ] 0 dsh
140.944 94.9636 mo
214.355 51.4746 li
@
140.944 94.915 mo
240.412 129.992 li
@
2.28 lw
[] 0 dsh
140.944 94.915 mo
246.583 94.915 li
@
90.2741 59.5577 mo
90.2741 62.7097 96.826 65.4627 106.204 66.2507 cv
106.204 63.4267 li
111.514 69.1257 li
106.204 74.3857 li
106.204 71.5607 li
96.826 70.7727 90.2741 68.0197 90.2741 64.8677 cv
cp
.777785 .78462 .792386 rgb
ef
111.514 57.955 mo
102.935 57.955 95.1981 59.635 91.9031 62.213 cv
87.3981 58.688 92.5251 54.641 103.356 53.175 cv
105.942 52.825 108.714 52.645 111.514 52.645 cv
cp
.658353 .666719 .676742 rgb
ef
1.02 lw
90.2741 59.5577 mo
90.2741 62.7097 96.826 65.4627 106.204 66.2507 cv
106.204 63.4267 li
111.514 69.1257 li
106.204 74.3857 li
106.204 71.5607 li
96.826 70.7727 90.2741 68.0197 90.2741 64.8677 cv
90.2741 59.5577 li
90.2741 55.7397 99.7831 52.6447 111.514 52.6447 cv
111.514 57.9547 li
102.935 57.9547 95.1981 59.6347 91.9031 62.2127 cv
.137422 .122799 .126081 rgb
@
2.28 lw
102.484 43.495 mo
102.484 60.095 li
@
1.02 lw
48.3941 79.825 mo
48.3941 88.125 li
@
156.874 81.925 mo
156.874 90.225 li
@
%ADOBeginSubsetFont: PBAAAA+CambriaMath-Identity-H Initial
Adobe_CoolType_Utility begin ct_MakeOCF begin ct_saveCIDInit
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.
%%DocumentNeededResources: ProcSet (CIDInit)
%%IncludeResource: ProcSet (CIDInit)
%%BeginResource: CIDFont (PBAAAA+CambriaMath)
%%Title: (PBAAAA+CambriaMath Adobe Identity 0)
%%Version: 0
/CIDInit /ProcSet findresource begin
14 dict begin
/CIDFontName /PBAAAA+CambriaMath def
/CIDFontType 0 def
/CIDSystemInfo 3 dict dup begin
/Registry (Adobe) def
/Ordering (Identity) def
/Supplement 0 def
end def
/FontBBox {-1475 -2464 2868 3117} def
/FontInfo 4 dict dup begin
/FSType 8 def
end def
/CIDMapOffset 57 def
/FDBytes 1 def
/GDBytes 1 def
/CIDCount 7327 def
/CDevProc {pop pop pop pop pop 0 -1000 7 index 2 div 880} def
/FDArray 1 array
dup 0
%ADOBeginFontDict
4 dict dup begin
/FontType 1 def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
%ADOBeginPrivateDict
/Private 7 dict dup begin
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/SubrMapOffset 0 def
/SDBytes 1 def
/SubrCount 5 def
end def
%ADOEndPrivateDict
end put
%ADOEndFontDict
def
/GlyphDirectory 5 dict def
ct_GlyphDirProcs begin
GlyphDirectory
+
0 <001C60D8A8C9B6472030318CD4127C796377DABFD8006FC8CD7AAF1086964
F20EE651118638C13AC909581621FA1FBAC552E6A16F7B4972529EBE8A80E782
DD8AB05FDEEBDFC49979639D0FF68DCB6E7F422169AA9A2DB1DEF4F4B413623F
5F563C56D612D674F82D41A71448843BD967EEE7B9B5E5851CDE54BA3652F7BD
EAFCDD43D27FDE0DE42D02A7D2B502434D5DE03C37B40825A9A0E097F17F7836
8B6C52A18DA8C4E8168AC56AD15BCF0B69C17FC31C7A04A95D974197259FB36A
E72A5300CDD86C2372DFF50F7695D6D8E6898504FD1B1E5E543A89FFBE60F42D
9B97A8DA995D7DC487489AC6073B6078ACF7C0324D45E66DA26D3EFF3411DA7F
D9C5DE33005> |
1318 <001C60D8A8C9B72B39B1E5C623D7902AC7D4066310D60EBB92C92AC94B
0E20E5A36AE41DA906B75B9EEA1518> |
2028 <001C60D8A8C9B771A8F45DF81ED0DEF82A83F10D331A24E508A2BC7D58
EDCC4C4962387E7FCFA492F61F901977D80992BEAC4853B73F472F24B9913164
7AEEF42F49FC14DC47F3D7B4AC1596162269B3C0F4E874A926C714A3D64121B5
3143173EB883B97C5D97C26E726203B224B440A04C3BC3F4E037EC35B09814DF
103B437AD054237D0D96F56B07C28FDE45F10F1625549B7F24F2D581D80EE3EB
6E28AE433B23452767411CED2F02AB89> |
1832 <001C60D8A8C9B7D8BE165EB9188076350D6B6D8C66564AC612B5F90886
51ACF43226830BB9B4ECA195FDE36B1D278D9A1BBEB72EC670736159991DB380
8E3DC6A44D3C42E97F84DA910072FED35F9508E46D99D7680D965373B3EEEE0F
CD020F67A4ED38D28D7418CEB097789883823D92596ABDBCEE2283F2CE8C0A41
48A95E5C6D8F6259F1706D7D7D17E3DD764A2E5BFA4470D76E29C8802FD443BC
536A84F97A2D11F39188986325BF3CC27606B049F81FE024A27006BCDF7E0D7E
5EA6CF7ED8A8BD6AE8CFE302429B2DF1BD5C> |
1870 <001C60D8A8C9B75F2F61CDE33712E054D32691F1D907C4B3025FA9B379
1D00C65297F0081BE733A333FAF7650DF7EAB42D1FA143B917E8EEEC6C7599A5
06B6C6E1A1C49CD7750F30CB6149F980B5AF45A08F1A7A5BF6F182D1C70E0B04
DEFA424941552BB30B9A3918E53CE686EBE5B2033267F2AF42DAB3CF0F998AA7
E1AA4ABA1CF7C1A9BA5502F65E3814C70D4072BFF585A35FE0E972B3EE48A9CC
239103BC7233D1EBEB6B14B2C8C937F0428C0ACAC097A8213A> |
!
end
ct_AddStdCIDMap
%%EndResource
ct_restoreCIDInit /PBAAAA+CambriaMath-Identity-H /Identity-H 0 [/PBAAAA+CambriaMath] ct_ComposeFont pop end end
%ADOEndSubsetFont
/UBYCZZ+CambriaMath /PBAAAA+CambriaMath-Identity-H findfont ct_VMDictPut
UBYCZZ+CambriaMath [12 0 0 -12 0 0 ]msf
108.527 29.6662 mo
(\005&)sh
107.087 29.6662 mo
(\007\354)sh
%ADOBeginSubsetFont: ONKBAA+Calibri Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /ONKBAA+Calibri def
/FontInfo 5 dict dup begin
/ItalicAngle 0 def
/FSType 8 def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 101 /e put
dup 107 /k put
dup 114 /r put
dup 115 /s put
dup 119 /w put
def
/FontBBox {-503 -307 1240 1026} def
end
systemdict begin
dup /Private
7 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
6 dict dup begin
/.notdef <1C60D8A8C9B7A086528E2CBE7FD4F03CC1C545DFC3C53F52C69233
4252531335C4AFD91E9493A7B9787114ADBF50CAD0D8D8F4E0FD112CA0EDC244
BC77AFB35E52902467E4B7D65BC23E8AB084EE08EDC3C9FE17948A4E93ECA5D5
D8A99AF099DAB98A96A7EEC3487AD5909F63F36A9F52E364FE794F0586CEACB0
693AEA3E3B131EDB924E9018AC085D5D058B3A8419D5096479413ADE107D9F53
02816818EECEB683CD82FAAA79E358EAA71283CC02664EE09C62BDF6E0D9BC98
D9F308DF8AEA61A9B7C090BD7FD96A3223C7AE0D3D1A8F2E623FA6B7C467CA6F
ECDBA0B792188DFEEBD3D01BCE6CC077D778842DE1B5E36F7F8EB4C68A439269
E0981B28AD1790AA058065E4B6AD27A659E12C7322A5BE1E7DF9729C0030192F
3688A380035351BB0945D5DC7515959F458727E2B8854977E466D6DDC900E997
B52F6BAB4C73A178A3B47EBB3C3FC842F51CC6E114336F3E4E5E72B20D8F94A7
BA3BA965E83BF37BAA664C34B8502BB9E9B9BEDD7EBC5DCBC4FFF5EBCA9C0324
49885D42A9DCCBA2A816B59D7978373DF4208E5608F69A2EAF492AC156CC637D
5A11AF573B17CF9F38> |-
/e <1C60D8A8C9B7A9C0DC897A849B356D31E2254DD2E5BDA9320580C3E0839C
715C00D9D27B634D4BEEF0FE1F6AD3CCFBCCE9FDE38A84A563FB744619F62FCB
F09ACBF7337FE050BE068BCA744FAC4471C4195B7CEC353B3CAECCCEC91AAE22
E8955469041D97A8837F9398CE520ABB35C688EEF4229957FD92C79439BF99D2
4AD4D8B3CAC5B975D966AB01856E8FAEAE3BEB03E1CC76DF299391134BFB02DD
61F6D73B2AAAA0D725ABCA9FE504FB3A1EC1E2449C5D921F0DE45A9278013CF0
832F39E3771D2B318D27AFF5849066ED5A64AA8E3E404B520DE5F08BE74DD8D5
8BD1B0FA461EBCBB4DC632B680CFAE62B61DD4FC04FC017D59147CB2E0FBEAAF
A402B5BFBD0C4F13F4BD9227D1353527A23B3EF7CA3E7F599CB51DDAF43A5674
78E4C81011D9D8D5DAD9CB1F948F5FCE67> |-
/k <1C60D8A8C9B7741C17C040FAF49715AF86267B27DBAE3194A95B5AD38B89
D87080BE0BB58EB11BB1E803576225E95586AD26F7B3D48F1476D58A2A86ABCA
434890634DF0C762F9C7E8BF973278771D68A2AB608CE3A494AF06CB6B758E30
92B2656DD102F8A88BFE70D0C2C45E36E8C5A354AE77BB4C9BFE5EBC116B51C4
E77B42DAC17192DF74E54FF0A0E8E65A4C44D1E8C03486D513E268A349A6666B
8D2CDEA67E5546A4296B6217CED1A53C88AEB021F8A41388EB02CAFBBF0D0089
75299F905C6726B8AA428B45A937A574480AA1CF753F93A4428CB2EBA3931191
4898272650C4BA4DDD9656B5AC379C0EC3487701AF2D0DE9556D9F04967DEABC
542665F11772DF361C1B5D5C1660B923FBE08FB5DD4C469DDCE72B7887844550
CCFC42576B209CD2E7> |-
/r <1C60D8A8C9B80F37F21112BA81A46E1A1A16E843530DEF66F6901DB9A722
A358478F1B0799F6041BFFF7D05EE602307D474F1DB84BF73C4EC1FF13A4D2D5
B370042C9A314A700782F944BCE36786AFBD72FA62259FABABA90F1F2BE008B7
993D5E1813324C60BD953524A1040FB1A790007846FA5DED6ACE6C7D436FF1C0
B97E4BBDDDA28F066E204B37F8321753E1473DDD8EE76C12A0011B04832F5C47
D3FF30EE31FE70EF82623D628622FAE52A70984ACD43F9718BC02CE5AA3F5832
FAB343FD6D53F2375C811D54E6B415E257D8BB3A2542930D7E0D6DF96FAA0688
822B6655966904164F87FA904C272BFAD51FAFF11CA14EBB5F6472235CA20889
D111211CF90F83807D99EF12B3B6827C1CA4720D03729BEEEA22A1313C4BDCE8
78453F5E6DCAD449D1F3B7D54D32C49DA0> |-
/s <1C60D8A8C9B7347873EC11B675AA6F6B461106EA2C61A0AE571750A08267
9294B529694EFA74202690239BCD02BDE93B33BD8DE0F0F0056B04093EE6C4E8
3D6F00E22E61E0A53509E628E3614EF2EF2CA3A8502F22A560E46ED3E4AED0BF
D271CCE464114B6332D17C4A046EF74FFF1283283A642C8C06B85A0D72357B56
65CD862A8E3D30EFFEE242F88B9C12DF917A74252DB462B49970474974786963
8F8FD8E70AF4405F95B11DFD154B7101933A31068AA1E65CC021277CCB9EC0EA
A7B978A081D1A4252A6693984AAF2CEC4413666DCF8B310A71A67C6E7B1DB954
E186EA16C83551DD0516966C156876A3DE36ED7253FFBBC1504668DC98301370
300A04E6753189718288CD7EF0ED409765A888272FDB25977C8A74BC113E188B
3DF6A69F7851A7E60496291AA0B15532572787EAC7F32F09F1E72589E0E74E03
49313472D872E64E7DB78BAB05598FE04B70E52D818F2F7B0B56A5688299352E
62F16B011595A7D7701FD641BB2FCFCADB2E33263B8A208C4183E753AD5C2586
1BF542F2009EA70BB7A67B3BE61085D37469DCDCB97CB2B41A0E2B4DB3BE67C2
BA9A1482E51611AB708AAB8BC978B06758006F3287DD3A3CABA09A9F59A21B0D
386F88> |-
/w <1C60D8A8C9B63EE6FBAC6FE430D4C472A6935E9E4E2C9D9C4ACB16C71B03
2F18FE575C6256D49A59D28FA55A64B8F4250FF7EF0F6440082EA55E50C72515
DB779850B563F18307F56C5AA0381D53908E3AA5F7BCF9144924A2084F07EBED
39B22484214EF3445C58E2A31D32B14DA61C85069056233A7D69EDE7D6EAE909
5E582A487ACDCAAEC9B696D9F56177DFCBED54097D97E802545B35B3AFF09395
2061133C2164E4C99E14CC43C1C5FB57627E18AF07CB58B73BD1200A30349006
897A1314704F9560B7EE765A767050BD02ED4C3CB6891E5FA019219CAF9310B1
24D9AF8C5E5547F89705BF1E11BA18C8C6F80D46BFB4F08BBC66AE29B2E81702
937C5AB98472DEAC74C8794C288DBFA220B7F896E2B36F9ECF06883A45930B94
0AFF017D9F3C209761AB734C6F3F199505CD5974FFC0917AC4E2B317FA15146D
5F8C2D8B2A0366984D71D35A1EAF824F2AB69DDEEC3EC469FA5796A63F524D8E
C40E97981C19E148BD51BA03455ACA08443ED8962BD3AB9091> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/UBYDAA+Calibri /ONKBAA+Calibri findfont ct_VMDictPut
/UBYDAA+Calibri*1 
[101{/.notdef}rp /e 5{/.notdef}rp /k 6{/.notdef}rp /r /s 3{/.notdef}rp 
/w 136{/.notdef}rp]
UBYDAA+Calibri nf
UBYDAA+Calibri*1 [12 0 0 -12 0 0 ]msf
115.607 29.6662 mo
(skewer)
[4.68008 5.10001 5.94003 8.45993 6.00003 0 ]xsh
UBYCZZ+CambriaMath [12 0 0 -12 0 0 ]msf
230.483 87.5902 mo
(\005&)sh
227.843 89.8702 mo
(\007\()sh
UBYDAA+Calibri*1 [12 0 0 -12 0 0 ]msf
238.463 89.8702 mo
(skewer)
[4.68008 5.10001 5.94003 8.45993 6.00003 0 ]xsh
UBYCZZ+CambriaMath [12 0 0 -12 0 0 ]msf
71.303 131.618 mo
(\005&)sh
69.923 131.618 mo
(\007N)sh
UBYDAA+Calibri*1 [12 0 0 -12 0 0 ]msf
78.683 131.618 mo
(skewer)
[4.68008 5.10002 5.94 8.45996 6 0 ]xsh
175.829 66.8161 mo
176.058 67.2161 176.221 67.6001 176.318 67.9681 cv
176.414 68.3361 176.442 68.6791 176.402 68.9971 cv
176.361 69.3151 176.252 69.6051 176.074 69.8681 cv
175.896 70.1301 175.647 70.3521 175.329 70.5351 cv
175.193 70.6131 175.06 70.6711 174.929 70.7101 cv
174.799 70.7491 174.662 70.7721 174.518 70.7771 cv
174.375 70.7831 174.224 70.7731 174.065 70.7471 cv
173.906 70.7211 173.732 70.6841 173.542 70.6351 cv
174.854 72.9221 li
174.875 73.0051 li
174.838 73.0931 li
174.728 73.1971 li
174.526 73.3271 li
174.317 73.4331 li
174.17 73.4771 li
174.074 73.4641 li
174.016 73.4031 li
170.35 67.0151 li
170.322 66.9331 li
170.356 66.8501 li
170.457 66.7541 li
170.625 66.6481 li
170.805 66.5551 li
170.935 66.5171 li
171.026 66.5291 li
171.086 66.5921 li
171.439 67.2071 li
171.497 66.9851 171.559 66.7851 171.628 66.6061 cv
171.696 66.4271 171.776 66.2651 171.866 66.1211 cv
171.957 65.9771 172.061 65.8471 172.178 65.7331 cv
172.294 65.6191 172.429 65.5181 172.581 65.4301 cv
172.913 65.2401 173.233 65.1421 173.541 65.1361 cv
173.849 65.1311 174.14 65.1981 174.416 65.3371 cv
174.692 65.4761 174.948 65.6741 175.186 65.9321 cv
175.424 66.1891 175.638 66.4841 175.829 66.8161 cv
175.015 67.4111 mo
174.881 67.1781 174.734 66.9621 174.572 66.7641 cv
174.411 66.5661 174.239 66.4071 174.054 66.2871 cv
173.87 66.1681 173.676 66.0991 173.471 66.0821 cv
173.266 66.0641 173.054 66.1181 172.836 66.2431 cv
172.727 66.3061 172.629 66.3841 172.542 66.4771 cv
172.455 66.5691 172.376 66.6821 172.307 66.8141 cv
172.238 66.9461 172.176 67.1031 172.122 67.2851 cv
172.068 67.4671 172.022 67.6791 171.984 67.9211 cv
173.028 69.7411 li
173.422 69.8891 173.765 69.9781 174.058 70.0071 cv
174.352 70.0371 174.613 69.9871 174.841 69.8561 cv
175.053 69.7341 175.205 69.5791 175.298 69.3911 cv
175.392 69.2021 175.437 68.9961 175.433 68.7731 cv
175.43 68.5491 175.39 68.3201 175.314 68.0851 cv
175.237 67.8491 175.138 67.6251 175.015 67.4111 cv
180.915 63.7281 mo
180.991 63.8601 181.012 63.9731 180.978 64.0671 cv
180.943 64.1611 180.884 64.2331 180.798 64.2811 cv
177.786 66.0101 li
177.932 66.2641 178.089 66.4781 178.257 66.6521 cv
178.424 66.8261 178.61 66.9521 178.812 67.0291 cv
179.015 67.1061 179.234 67.1291 179.47 67.0981 cv
179.705 67.0661 179.961 66.9711 180.236 66.8131 cv
180.454 66.6881 180.638 66.5591 180.788 66.4261 cv
180.938 66.2921 181.062 66.1681 181.161 66.0531 cv
181.26 65.9371 181.339 65.8391 181.399 65.7581 cv
181.55 65.6001 li
181.624 65.5811 li
181.698 65.6101 li
181.778 65.6961 li
181.874 65.8461 li
181.935 65.9631 li
181.972 66.0571 li
181.986 66.1401 li
181.973 66.2251 li
181.965 66.2541 181.928 66.3161 181.861 66.4111 cv
181.794 66.5061 181.699 66.6161 181.576 66.7401 cv
181.454 66.8641 181.306 66.9971 181.133 67.1391 cv
180.961 67.2811 180.766 67.4151 180.549 67.5391 cv
180.173 67.7551 179.813 67.8921 179.47 67.9491 cv
179.127 68.0061 178.799 67.9871 178.488 67.8911 cv
178.176 67.7951 177.881 67.6201 177.604 67.3641 cv
177.327 67.1091 177.07 66.7751 176.833 66.3621 cv
176.607 65.9681 176.455 65.5861 176.377 65.2141 cv
176.299 64.8431 176.293 64.4931 176.359 64.1641 cv
176.425 63.8361 176.56 63.5351 176.764 63.2631 cv
176.968 62.9911 177.237 62.7581 177.573 62.5661 cv
177.932 62.3601 178.271 62.2421 178.589 62.2121 cv
178.908 62.1821 179.204 62.2181 179.479 62.3201 cv
179.753 62.4211 180.004 62.5811 180.231 62.8001 cv
180.458 63.0191 180.657 63.2771 180.828 63.5761 cv
cp
179.929 63.9631 mo
179.686 63.5171 179.39 63.2281 179.04 63.0951 cv
178.69 62.9631 178.312 63.0131 177.906 63.2461 cv
177.698 63.3651 177.538 63.5091 177.426 63.6771 cv
177.314 63.8451 177.242 64.0231 177.21 64.2131 cv
177.178 64.4021 177.183 64.5991 177.223 64.8031 cv
177.263 65.0081 177.333 65.2051 177.434 65.3951 cv
cp
183.863 59.6581 mo
183.966 59.8491 li
184.014 59.9801 li
184.014 60.0681 li
183.963 60.1281 li
183.851 60.1621 li
183.692 60.1921 li
183.503 60.2431 li
183.293 60.3371 li
183.073 60.5311 li
183.011 60.6111 182.958 60.7161 182.912 60.8461 cv
182.867 60.9751 182.833 61.1321 182.808 61.3171 cv
182.784 61.5031 182.766 61.7221 182.754 61.9771 cv
184.481 64.9851 li
184.5 65.0651 li
184.462 65.1521 li
184.352 65.2551 li
184.15 65.3851 li
183.94 65.4911 li
183.793 65.5351 li
183.7 65.5251 li
183.642 65.4661 li
181.018 60.8931 li
180.993 60.8151 li
181.025 60.7301 li
181.125 60.6321 li
181.308 60.5161 li
181.498 60.4181 li
181.63 60.3821 li
181.718 60.4001 li
181.775 60.4581 li
182.157 61.1241 li
182.177 60.8691 182.209 60.6521 182.253 60.4741 cv
182.297 60.2961 182.349 60.1451 182.41 60.0231 cv
182.47 59.9001 182.541 59.7991 182.623 59.7181 cv
182.705 59.6371 182.795 59.5681 182.894 59.5121 cv
183.048 59.4341 li
183.239 59.3611 li
183.431 59.3121 li
183.564 59.3031 li
183.632 59.3281 li
183.684 59.3761 li
183.754 59.4741 li
183.863 59.6581 li
190.14 58.6031 mo
190.369 59.0031 190.532 59.3871 190.628 59.7551 cv
190.725 60.1231 190.753 60.4661 190.712 60.7841 cv
190.672 61.1021 190.563 61.3921 190.384 61.6551 cv
190.206 61.9171 189.958 62.1391 189.639 62.3221 cv
189.504 62.4001 189.371 62.4581 189.24 62.4971 cv
189.109 62.5361 188.972 62.5581 188.829 62.5641 cv
188.686 62.5701 188.535 62.5601 188.376 62.5341 cv
188.217 62.5081 188.042 62.4711 187.852 62.4221 cv
189.165 64.7091 li
189.185 64.7921 li
189.148 64.8801 li
189.039 64.9841 li
188.836 65.1141 li
188.627 65.2201 li
188.48 65.2641 li
188.385 65.2511 li
188.326 65.1901 li
184.66 58.8021 li
184.633 58.7201 li
184.666 58.6361 li
184.767 58.5411 li
184.936 58.4351 li
185.115 58.3421 li
185.246 58.3041 li
185.337 58.3161 li
185.397 58.3791 li
185.75 58.9941 li
185.807 58.7721 185.87 58.5721 185.939 58.3931 cv
186.007 58.2141 186.087 58.0521 186.177 57.9081 cv
186.268 57.7641 186.371 57.6341 186.488 57.5201 cv
186.605 57.4061 186.74 57.3051 186.892 57.2171 cv
187.224 57.0271 187.544 56.9291 187.852 56.9231 cv
188.159 56.9181 188.451 56.9851 188.727 57.1241 cv
189.002 57.2631 189.259 57.4611 189.497 57.7191 cv
189.735 57.9761 189.949 58.2711 190.14 58.6031 cv
189.326 59.1981 mo
189.192 58.9641 189.044 58.7491 188.883 58.5511 cv
188.722 58.3531 188.549 58.1941 188.365 58.0741 cv
188.181 57.9551 187.986 57.8861 187.781 57.8691 cv
187.577 57.8511 187.365 57.9051 187.147 58.0301 cv
187.038 58.0931 186.94 58.1711 186.852 58.2631 cv
186.765 58.3561 186.687 58.4691 186.618 58.6011 cv
186.549 58.7331 186.487 58.8901 186.433 59.0721 cv
186.379 59.2541 186.333 59.4661 186.295 59.7081 cv
187.339 61.5281 li
187.732 61.6761 188.076 61.7651 188.369 61.7941 cv
188.663 61.8241 188.924 61.7731 189.152 61.6421 cv
189.363 61.5211 189.516 61.3661 189.609 61.1771 cv
189.702 60.9891 189.747 60.7831 189.744 60.5601 cv
189.74 60.3361 189.7 60.1071 189.624 59.8721 cv
189.548 59.6361 189.449 59.4121 189.326 59.1981 cv
195.226 55.5151 mo
195.302 55.6471 195.323 55.7601 195.288 55.8541 cv
195.254 55.9481 195.194 56.0201 195.109 56.0681 cv
192.097 57.7971 li
192.243 58.0511 192.4 58.2651 192.567 58.4391 cv
192.735 58.6131 192.92 58.7391 193.123 58.8161 cv
193.326 58.8931 193.545 58.9161 193.78 58.8851 cv
194.016 58.8531 194.271 58.7581 194.547 58.6001 cv
194.765 58.4751 194.949 58.3461 195.099 58.2131 cv
195.248 58.0791 195.373 57.9551 195.472 57.8401 cv
195.571 57.7241 195.65 57.6261 195.71 57.5441 cv
195.86 57.3871 li
195.934 57.3681 li
196.008 57.3971 li
196.088 57.4831 li
196.185 57.6331 li
196.245 57.7501 li
196.282 57.8441 li
196.296 57.9271 li
196.284 58.0121 li
196.276 58.0411 196.239 58.1031 196.171 58.1981 cv
196.104 58.2931 196.009 58.4031 195.887 58.5271 cv
195.765 58.6511 195.617 58.7841 195.444 58.9261 cv
195.271 59.0681 195.076 59.2021 194.859 59.3261 cv
194.483 59.5421 194.124 59.6781 193.781 59.7361 cv
193.437 59.7931 193.11 59.7741 192.798 59.6781 cv
192.487 59.5821 192.192 59.4071 191.915 59.1511 cv
191.638 58.8961 191.381 58.5621 191.144 58.1481 cv
190.918 57.7551 190.766 57.3731 190.688 57.0011 cv
190.61 56.6301 190.604 56.2801 190.67 55.9511 cv
190.736 55.6231 190.871 55.3221 191.074 55.0501 cv
191.278 54.7781 191.548 54.5451 191.884 54.3531 cv
192.243 54.1461 192.581 54.0291 192.9 53.9991 cv
193.218 53.9691 193.515 54.0051 193.789 54.1071 cv
194.064 54.2081 194.314 54.3681 194.541 54.5871 cv
194.768 54.8061 194.967 55.0641 195.138 55.3621 cv
cp
194.239 55.7501 mo
193.997 55.3041 193.7 55.0141 193.35 54.8821 cv
193 54.7501 192.622 54.8001 192.217 55.0331 cv
192.009 55.1521 191.849 55.2961 191.737 55.4641 cv
191.625 55.6321 191.553 55.8101 191.521 56.0001 cv
191.489 56.1891 191.493 56.3861 191.534 56.5901 cv
191.574 56.7951 191.644 56.9921 191.744 57.1821 cv
cp
201.892 54.9931 mo
201.911 55.0731 li
201.872 55.1591 li
201.763 55.2631 li
201.565 55.3901 li
201.351 55.4991 li
201.207 55.5421 li
201.113 55.5311 li
201.053 55.4741 li
199.516 52.7961 li
199.366 52.5351 199.225 52.3371 199.093 52.2011 cv
198.961 52.0651 198.823 51.9621 198.679 51.8911 cv
198.535 51.8211 198.384 51.7911 198.225 51.8011 cv
198.067 51.8111 197.906 51.8621 197.743 51.9561 cv
197.533 52.0761 197.366 52.2711 197.241 52.5411 cv
197.117 52.8111 197.022 53.1551 196.957 53.5761 cv
198.792 56.7721 li
198.811 56.8521 li
198.772 56.9391 li
198.663 57.0421 li
198.46 57.1721 li
198.251 57.2781 li
198.104 57.3221 li
198.01 57.3121 li
197.953 57.2531 li
195.328 52.6801 li
195.304 52.6021 li
195.336 52.5161 li
195.435 52.4191 li
195.619 52.3031 li
195.809 52.2051 li
195.941 52.1691 li
196.028 52.1871 li
196.085 52.2451 li
196.432 52.8501 li
196.525 52.4141 196.66 52.0561 196.839 51.7751 cv
197.018 51.4951 197.238 51.2791 197.499 51.1301 cv
197.804 50.9551 198.09 50.8591 198.358 50.8431 cv
198.626 50.8271 198.873 50.8681 199.101 50.9671 cv
199.329 51.0661 199.538 51.2151 199.727 51.4151 cv
199.916 51.6151 200.104 51.8781 200.29 52.2031 cv
cp
207.283 51.8991 mo
207.306 51.9801 li
207.273 52.0631 li
207.175 52.1571 li
207.008 52.2661 li
206.824 52.3581 li
206.691 52.3971 li
206.597 52.3871 li
206.536 52.3271 li
206.189 51.7231 li
206.098 52.1221 205.965 52.4681 205.79 52.7631 cv
205.614 53.0571 205.372 53.2931 205.064 53.4701 cv
204.728 53.6621 204.405 53.7611 204.093 53.7671 cv
203.781 53.7731 203.487 53.7071 203.213 53.5691 cv
202.938 53.4321 202.681 53.2331 202.441 52.9721 cv
202.201 52.7111 201.986 52.4151 201.795 52.0831 cv
201.57 51.6901 201.408 51.3101 201.311 50.9451 cv
201.214 50.5801 201.184 50.2381 201.222 49.9191 cv
201.26 49.6001 201.367 49.3101 201.543 49.0481 cv
201.72 48.7871 201.969 48.5641 202.291 48.3801 cv
202.559 48.2261 202.837 48.1441 203.126 48.1331 cv
203.415 48.1231 203.733 48.1691 204.08 48.2721 cv
202.555 45.6141 li
202.533 45.5351 li
202.573 45.4451 li
202.685 45.3401 li
202.878 45.2121 li
203.094 45.1051 li
203.238 45.0631 li
203.336 45.0741 li
203.398 45.1301 li
cp
204.593 49.1661 mo
204.205 49.0151 203.863 48.9271 203.566 48.9011 cv
203.27 48.8751 203.007 48.9281 202.776 49.0601 cv
202.563 49.1831 202.411 49.3381 202.32 49.5251 cv
202.229 49.7121 202.185 49.9151 202.187 50.1351 cv
202.189 50.3541 202.229 50.5811 202.308 50.8161 cv
202.386 51.0501 202.487 51.2761 202.612 51.4921 cv
202.744 51.7231 202.891 51.9381 203.053 52.1381 cv
203.215 52.3371 203.389 52.4981 203.575 52.6181 cv
203.761 52.7391 203.957 52.8091 204.162 52.8291 cv
204.367 52.8481 204.58 52.7951 204.8 52.6691 cv
204.912 52.6041 205.011 52.5271 205.096 52.4381 cv
205.182 52.3481 205.259 52.2361 205.326 52.1031 cv
205.394 51.9701 205.455 51.8121 205.508 51.6311 cv
205.561 51.4491 205.607 51.2371 205.643 50.9951 cv
cp
209.616 50.5601 mo
209.635 50.6401 li
209.596 50.7261 li
209.487 50.8301 li
209.284 50.9601 li
209.075 51.0661 li
208.928 51.1101 li
208.834 51.1001 li
208.777 51.0411 li
206.152 46.4681 li
206.132 46.3911 li
206.169 46.3031 li
206.281 46.1981 li
206.479 46.0711 li
206.693 45.9611 li
206.837 45.9191 li
206.933 45.9321 li
206.991 45.9861 li
cp
206.201 44.3861 mo
206.313 44.5831 206.353 44.7381 206.319 44.8521 cv
206.286 44.9661 206.169 45.0801 205.969 45.1951 cv
205.772 45.3071 205.618 45.3501 205.505 45.3221 cv
205.392 45.2951 205.281 45.1841 205.17 44.9911 cv
205.057 44.7951 205.017 44.6391 205.051 44.5261 cv
205.085 44.4121 205.202 44.2971 205.402 44.1831 cv
205.598 44.0701 205.753 44.0271 205.865 44.0551 cv
205.978 44.0831 206.09 44.1931 206.201 44.3861 cv
214.059 47.0841 mo
214.14 47.2371 li
214.184 47.3541 li
214.197 47.4481 li
214.171 47.5911 li
214.153 47.6581 214.111 47.7511 214.046 47.8721 cv
213.98 47.9931 213.898 48.1151 213.799 48.2371 cv
213.7 48.3591 213.585 48.4781 213.453 48.5941 cv
213.322 48.7101 213.176 48.8141 213.017 48.9051 cv
212.688 49.0941 212.366 49.2071 212.05 49.2441 cv
211.733 49.2821 211.43 49.2451 211.139 49.1351 cv
210.848 49.0251 210.571 48.8441 210.307 48.5921 cv
210.044 48.3411 209.798 48.0171 209.57 47.6201 cv
209.312 47.1701 209.145 46.7511 209.069 46.3641 cv
208.994 45.9771 208.992 45.6261 209.065 45.3091 cv
209.138 44.9931 209.275 44.7101 209.477 44.4621 cv
209.679 44.2131 209.93 44.0021 210.232 43.8291 cv
210.378 43.7451 210.527 43.6781 210.68 43.6261 cv
210.832 43.5741 210.979 43.5381 211.119 43.5151 cv
211.26 43.4931 211.392 43.4851 211.514 43.4911 cv
211.637 43.4981 211.731 43.5091 211.795 43.5271 cv
211.934 43.5751 li
212.02 43.6371 li
212.103 43.7351 li
212.196 43.8841 li
212.272 44.0161 212.309 44.1171 212.309 44.1871 cv
212.242 44.3301 li
212.192 44.3591 212.117 44.3651 212.019 44.3471 cv
211.921 44.3291 211.801 44.3151 211.661 44.3061 cv
211.52 44.2961 211.362 44.3051 211.186 44.3321 cv
211.01 44.3591 210.824 44.4281 210.627 44.5411 cv
210.224 44.7731 210.004 45.1051 209.967 45.5381 cv
209.929 45.9721 210.08 46.4831 210.418 47.0731 cv
210.587 47.3681 210.764 47.6101 210.947 47.8001 cv
211.13 47.9901 211.319 48.1281 211.513 48.2151 cv
211.707 48.3021 211.903 48.3361 212.103 48.3191 cv
212.302 48.3011 212.503 48.2341 212.707 48.1171 cv
212.9 48.0061 213.052 47.8791 213.162 47.7341 cv
213.273 47.5901 213.361 47.4501 213.426 47.3161 cv
213.491 47.1821 213.542 47.0641 213.581 46.9631 cv
213.62 46.8621 213.66 46.8001 213.7 46.7771 cv
213.773 46.7621 li
213.856 46.8061 li
213.951 46.9131 li
214.059 47.0841 li
219.512 44.8801 mo
219.534 44.9591 li
219.498 45.0441 li
219.396 45.1431 li
219.222 45.2561 li
219.025 45.3561 li
218.891 45.3921 li
218.805 45.3771 li
218.75 45.3181 li
218.403 44.7131 li
218.307 45.1511 218.17 45.5081 217.992 45.7861 cv
217.814 46.0641 217.594 46.2781 217.334 46.4281 cv
217.029 46.6031 216.743 46.6991 216.476 46.7171 cv
216.209 46.7351 215.962 46.6941 215.733 46.5931 cv
215.504 46.4931 215.295 46.3421 215.106 46.1421 cv
214.917 45.9421 214.727 45.6761 214.536 45.3441 cv
212.944 42.5701 li
212.922 42.4911 li
212.962 42.4011 li
213.076 42.2941 li
213.275 42.1701 li
213.483 42.0611 li
213.63 42.0171 li
213.728 42.0291 li
213.787 42.0861 li
215.316 44.7481 li
215.469 45.0161 215.612 45.2191 215.743 45.3581 cv
215.875 45.4961 216.013 45.6001 216.157 45.6671 cv
216.302 45.7351 216.453 45.7651 216.611 45.7581 cv
216.769 45.7511 216.93 45.7001 217.092 45.6071 cv
217.302 45.4871 217.469 45.2921 217.591 45.0231 cv
217.714 44.7551 217.81 44.4091 217.878 43.9871 cv
216.044 40.7911 li
216.022 40.7121 li
216.062 40.6221 li
216.174 40.5171 li
216.375 40.3911 li
216.583 40.2821 li
216.727 40.2401 li
216.825 40.2511 li
216.887 40.3061 li
cp
221.897 43.5121 mo
221.916 43.5921 li
221.878 43.6781 li
221.768 43.7821 li
221.565 43.9111 li
221.356 44.0181 li
221.209 44.0621 li
221.115 44.0511 li
221.058 43.9931 li
217.162 37.2041 li
217.139 37.1221 li
217.176 37.0331 li
217.288 36.9291 li
217.485 36.8021 li
217.699 36.6921 li
217.844 36.6501 li
217.939 36.6631 li
218 36.7221 li
cp
226.901 40.6471 mo
226.912 40.7621 li
226.827 40.8711 li
226.785 40.9091 226.719 40.9541 226.627 41.0061 cv
226.408 41.1121 li
226.267 41.1321 li
226.179 41.0611 li
225.916 40.6041 li
225.839 40.9321 225.712 41.2261 225.534 41.4851 cv
225.356 41.7451 225.13 41.9531 224.856 42.1111 cv
224.615 42.2491 224.38 42.3421 224.149 42.3911 cv
223.918 42.4411 223.7 42.4451 223.495 42.4051 cv
223.29 42.3661 223.099 42.2811 222.924 42.1521 cv
222.749 42.0231 222.598 41.8481 222.471 41.6281 cv
222.324 41.3711 222.248 41.1171 222.244 40.8671 cv
222.24 40.6171 222.3 40.3731 222.425 40.1351 cv
222.549 39.8971 222.736 39.6651 222.985 39.4391 cv
223.233 39.2131 223.535 38.9971 223.891 38.7931 cv
224.521 38.4321 li
224.317 38.0761 li
224.216 37.9001 224.108 37.7551 223.993 37.6401 cv
223.878 37.5261 223.753 37.4481 223.619 37.4061 cv
223.484 37.3641 223.338 37.3581 223.179 37.3881 cv
223.021 37.4181 222.845 37.4891 222.652 37.5991 cv
222.445 37.7181 222.274 37.8491 222.138 37.9921 cv
222.002 38.1361 221.889 38.2731 221.799 38.4031 cv
221.71 38.5331 221.637 38.6471 221.582 38.7431 cv
221.528 38.8401 221.48 38.9001 221.439 38.9241 cv
221.356 38.9441 li
221.268 38.9141 li
221.175 38.8291 li
221.085 38.6951 li
220.988 38.4841 li
220.994 38.2941 li
221.014 38.2241 221.063 38.1271 221.141 38.0041 cv
221.219 37.8801 221.316 37.7521 221.434 37.6191 cv
221.551 37.4871 221.687 37.3551 221.842 37.2231 cv
221.996 37.0921 222.161 36.9761 222.337 36.8751 cv
222.666 36.6861 222.967 36.5631 223.24 36.5051 cv
223.513 36.4481 223.762 36.4501 223.987 36.5121 cv
224.212 36.5751 224.418 36.6941 224.605 36.8701 cv
224.792 37.0471 224.967 37.2771 225.13 37.5621 cv
cp
224.868 39.0361 mo
224.152 39.4481 li
223.921 39.5801 223.733 39.7141 223.586 39.8501 cv
223.439 39.9861 223.331 40.1251 223.263 40.2651 cv
223.195 40.4061 223.165 40.5441 223.174 40.6811 cv
223.183 40.8181 223.227 40.9561 223.307 41.0951 cv
223.443 41.3321 223.627 41.4771 223.858 41.5311 cv
224.09 41.5861 224.341 41.5351 224.612 41.3791 cv
224.832 41.2531 225.004 41.0801 225.128 40.8601 cv
225.252 40.6401 225.351 40.3561 225.425 40.0071 cv
cp
228.616 33.9741 mo
228.719 34.1651 li
228.767 34.2961 li
228.767 34.3841 li
228.716 34.4431 li
228.604 34.4771 li
228.446 34.5071 li
228.256 34.5591 li
228.046 34.6521 li
227.826 34.8461 li
227.764 34.9271 227.711 35.0321 227.666 35.1611 cv
227.621 35.2901 227.586 35.4481 227.562 35.6331 cv
227.537 35.8181 227.519 36.0381 227.508 36.2921 cv
229.234 39.3011 li
229.253 39.3811 li
229.215 39.4671 li
229.105 39.5701 li
228.903 39.7001 li
228.694 39.8071 li
228.547 39.8511 li
228.453 39.8401 li
228.396 39.7821 li
225.771 35.2081 li
225.747 35.1311 li
225.779 35.0451 li
225.878 34.9471 li
226.062 34.8321 li
226.251 34.7331 li
226.383 34.6981 li
226.471 34.7151 li
226.528 34.7741 li
226.91 35.4391 li
226.93 35.1841 226.963 34.9681 227.007 34.7891 cv
227.051 34.6111 227.103 34.4611 227.163 34.3381 cv
227.224 34.2161 227.295 34.1141 227.377 34.0331 cv
227.459 33.9521 227.549 33.8841 227.647 33.8271 cv
227.801 33.7491 li
227.993 33.6761 li
228.184 33.6271 li
228.317 33.6181 li
228.386 33.6431 li
228.437 33.6911 li
228.507 33.7901 li
228.616 33.9741 li
236.514 34.6771 mo
236.57 34.7751 236.608 34.8571 236.628 34.9221 cv
236.64 35.0841 li
236.562 35.2301 li
236.41 35.3951 li
236.21 35.5601 li
235.985 35.7101 li
235.748 35.8461 235.527 35.9311 235.322 35.9661 cv
235.116 36.0001 234.923 35.9851 234.742 35.9201 cv
234.56 35.8561 234.389 35.7401 234.228 35.5731 cv
234.067 35.4071 233.911 35.1911 233.759 34.9271 cv
232.225 32.2541 li
231.585 32.6211 li
231.416 32.6101 li
231.355 32.5731 231.289 32.4941 231.219 32.3721 cv
231.138 32.2021 li
231.109 32.0741 li
231.127 31.9821 li
231.19 31.9221 li
231.826 31.5581 li
231.201 30.4701 li
231.181 30.3941 li
231.217 30.3021 li
231.327 30.1951 li
231.525 30.0681 li
231.739 29.9591 li
231.885 29.9191 li
231.982 29.9341 li
232.04 29.9891 li
232.664 31.0761 li
233.838 30.4031 li
233.919 30.3801 li
234.008 30.4101 li
234.104 30.5001 li
234.207 30.6571 li
234.277 30.7791 234.312 30.8761 234.313 30.9481 cv
234.238 31.0991 li
233.064 31.7731 li
234.528 34.3241 li
234.709 34.6391 234.892 34.8501 235.077 34.9571 cv
235.263 35.0651 235.476 35.0501 235.716 34.9121 cv
235.912 34.7691 li
236.047 34.6281 li
236.141 34.5091 li
236.219 34.4341 li
236.275 34.4191 li
236.338 34.4471 li
236.416 34.5301 li
236.514 34.6771 li
240.623 29.6571 mo
240.837 30.0301 240.984 30.4011 241.066 30.7711 cv
241.147 31.1401 241.156 31.4951 241.091 31.8341 cv
241.027 32.1721 240.885 32.4891 240.664 32.7851 cv
240.444 33.0801 240.141 33.3381 239.755 33.5601 cv
239.379 33.7761 239.019 33.9081 238.675 33.9571 cv
238.332 34.0051 238.005 33.9761 237.697 33.8701 cv
237.388 33.7631 237.1 33.5841 236.834 33.3311 cv
236.567 33.0791 236.323 32.7601 236.101 32.3731 cv
235.888 32.0011 235.739 31.6301 235.656 31.2611 cv
235.572 30.8921 235.563 30.5391 235.627 30.2001 cv
235.692 29.8611 235.834 29.5451 236.053 29.2531 cv
236.273 28.9601 236.577 28.7021 236.967 28.4791 cv
237.343 28.2631 237.703 28.1301 238.047 28.0821 cv
238.39 28.0331 238.717 28.0621 239.025 28.1691 cv
239.334 28.2751 239.623 28.4541 239.891 28.7061 cv
240.159 28.9571 240.403 29.2741 240.623 29.6571 cv
239.786 30.2121 mo
239.644 29.9641 239.487 29.7441 239.314 29.5501 cv
239.141 29.3561 238.955 29.2071 238.753 29.1021 cv
238.552 28.9971 238.333 28.9481 238.097 28.9551 cv
237.86 28.9631 237.607 29.0441 237.337 29.1991 cv
237.087 29.3421 236.898 29.5091 236.769 29.7001 cv
236.64 29.8911 236.563 30.1011 236.54 30.3281 cv
236.516 30.5561 236.539 30.7961 236.609 31.0491 cv
236.679 31.3011 236.789 31.5581 236.938 31.8191 cv
237.082 32.0701 237.24 32.2921 237.413 32.4851 cv
237.586 32.6791 237.773 32.8271 237.975 32.9301 cv
238.177 33.0321 238.396 33.0801 238.633 33.0721 cv
238.869 33.0651 239.123 32.9841 239.393 32.8291 cv
239.639 32.6881 239.827 32.5211 239.958 32.3291 cv
240.088 32.1371 240.166 31.9281 240.191 31.7021 cv
240.216 31.4761 240.192 31.2371 240.121 30.9851 cv
240.049 30.7341 239.937 30.4761 239.786 30.2121 cv
f
245.941 20.8489 mo
245.298 22.6839 li
244.854 22.5339 li
245.262 21.3599 li
242.162 23.1399 li
241.888 22.6619 li
244.988 20.8829 li
243.769 20.6429 li
243.863 20.1839 li
245.772 20.5539 li
cp
f
244.983 25.6009 mo
245.056 24.9599 245.186 24.4459 245.372 24.0599 cv
245.558 23.6739 245.809 23.3909 246.124 23.2099 cv
246.371 23.0679 246.589 22.9679 246.776 22.9099 cv
247.185 24.1879 li
246.662 24.4889 li
246.56 24.3579 246.468 24.2649 246.386 24.2079 cv
246.16 24.1209 li
245.941 24.1859 li
245.819 24.2559 245.716 24.3849 245.633 24.5729 cv
245.549 24.7609 245.481 25.0179 245.43 25.3439 cv
245.379 25.6709 245.359 25.9679 245.371 26.2359 cv
245.383 26.5039 245.445 26.8179 245.556 27.1769 cv
246.337 29.6549 li
245.457 30.1589 li
244.345 26.5139 li
244.276 26.2839 244.216 26.1089 244.165 25.9889 cv
244.115 25.8699 244.068 25.7729 244.025 25.6979 cv
243.948 25.5619 243.869 25.4769 243.79 25.4409 cv
243.711 25.4049 243.624 25.4149 243.529 25.4689 cv
243.424 25.5299 243.338 25.6359 243.271 25.7899 cv
243.203 25.9429 243.133 26.1919 243.06 26.5359 cv
242.607 26.4169 li
242.732 25.9129 242.86 25.5319 242.992 25.2739 cv
243.123 25.0169 243.316 24.8149 243.57 24.6689 cv
243.783 24.5469 243.992 24.5199 244.197 24.5899 cv
244.401 24.6589 244.568 24.8079 244.698 25.0349 cv
244.796 25.2039 244.864 25.3969 244.902 25.6139 cv
cp
f
172.004 118.167 mo
171.954 118.311 171.882 118.401 171.789 118.437 cv
171.696 118.472 171.603 118.474 171.51 118.442 cv
168.229 117.304 li
168.133 117.581 168.074 117.84 168.053 118.081 cv
168.032 118.321 168.059 118.544 168.133 118.747 cv
168.208 118.951 168.335 119.131 168.513 119.288 cv
168.691 119.445 168.93 119.576 169.231 119.68 cv
169.468 119.762 169.686 119.816 169.885 119.842 cv
170.084 119.867 170.259 119.879 170.411 119.878 cv
170.563 119.877 170.69 119.873 170.79 119.864 cv
170.891 119.855 170.964 119.859 171.008 119.874 cv
171.071 119.918 li
171.098 119.992 li
171.086 120.109 li
171.035 120.281 li
170.987 120.403 li
170.94 120.493 li
170.887 120.558 li
170.815 120.604 li
170.787 120.617 170.716 120.63 170.6 120.641 cv
170.485 120.653 170.34 120.653 170.166 120.643 cv
169.992 120.632 169.794 120.608 169.574 120.571 cv
169.353 120.533 169.124 120.474 168.888 120.392 cv
168.479 120.25 168.139 120.068 167.871 119.847 cv
167.602 119.626 167.402 119.366 167.27 119.068 cv
167.137 118.77 167.077 118.433 167.087 118.056 cv
167.098 117.679 167.182 117.266 167.338 116.815 cv
167.486 116.387 167.675 116.022 167.904 115.719 cv
168.133 115.416 168.393 115.181 168.684 115.016 cv
168.975 114.85 169.291 114.755 169.63 114.73 cv
169.969 114.705 170.322 114.756 170.687 114.882 cv
171.078 115.018 171.39 115.196 171.621 115.417 cv
171.853 115.638 172.02 115.885 172.124 116.159 cv
172.227 116.432 172.271 116.727 172.255 117.042 cv
172.239 117.356 172.174 117.676 172.062 118.001 cv
cp
171.179 117.577 mo
171.357 117.101 171.38 116.688 171.25 116.337 cv
171.121 115.986 170.835 115.734 170.393 115.58 cv
170.166 115.502 169.953 115.475 169.753 115.501 cv
169.552 115.527 169.37 115.59 169.207 115.69 cv
169.043 115.79 168.897 115.923 168.769 116.087 cv
168.642 116.252 168.539 116.434 168.461 116.634 cv
cp
176.124 122.511 mo
176.124 122.656 li
176.041 122.724 li
175.864 122.715 li
175.789 122.699 175.694 122.672 175.58 122.632 cv
175.469 122.594 175.383 122.56 175.32 122.532 cv
175.175 122.451 li
175.103 122.37 li
175.075 122.283 li
174.564 119.892 li
172.689 121.456 li
172.612 121.507 li
172.506 121.526 li
172.344 121.501 li
172.28 121.484 172.196 121.458 172.092 121.423 cv
171.985 121.385 171.899 121.35 171.834 121.317 cv
171.701 121.219 li
171.686 121.117 li
171.784 121.006 li
174.177 119.113 li
173.522 116.262 li
173.52 116.116 li
173.601 116.045 li
173.778 116.053 li
173.852 116.071 173.948 116.1 174.066 116.141 cv
174.173 116.178 174.258 116.211 174.321 116.239 cv
174.465 116.316 li
174.532 116.389 li
174.559 116.473 li
175.051 118.721 li
176.845 117.266 li
176.916 117.222 li
177.007 117.201 li
177.15 117.22 li
177.209 117.234 177.288 117.258 177.388 117.293 cv
177.495 117.33 177.581 117.364 177.647 117.395 cv
177.785 117.489 li
177.8 117.591 li
177.696 117.71 li
175.438 119.519 li
cp
180.018 123.57 mo
179.981 123.677 179.945 123.759 179.908 123.817 cv
179.794 123.932 li
179.632 123.969 li
179.408 123.962 li
179.153 123.92 li
178.892 123.849 li
178.634 123.759 178.424 123.648 178.263 123.516 cv
178.103 123.384 177.987 123.228 177.917 123.049 cv
177.847 122.869 177.822 122.664 177.842 122.433 cv
177.862 122.203 177.922 121.943 178.022 121.655 cv
179.032 118.743 li
178.334 118.502 li
178.232 118.367 li
178.219 118.296 178.236 118.195 178.282 118.062 cv
178.357 117.889 li
178.434 117.783 li
178.516 117.737 li
178.603 117.745 li
179.295 117.985 li
179.705 116.8 li
179.75 116.735 li
179.842 116.702 li
179.995 116.715 li
180.221 116.781 li
180.313 116.813 180.387 116.843 180.444 116.87 cv
180.57 116.954 li
180.622 117.037 li
180.619 117.117 li
180.208 118.302 li
181.487 118.745 li
181.558 118.792 li
181.593 118.878 li
181.587 119.01 li
181.537 119.191 li
181.491 119.323 181.441 119.414 181.387 119.461 cv
181.224 119.504 li
179.945 119.06 li
178.981 121.839 li
178.862 122.183 178.823 122.459 178.864 122.67 cv
178.904 122.88 179.056 123.031 179.318 123.122 cv
179.553 123.176 li
179.749 123.185 li
179.9 123.178 li
180.008 123.188 li
180.056 123.22 li
180.077 123.286 li
180.065 123.4 li
180.018 123.57 li
186.176 123.082 mo
186.126 123.225 186.055 123.315 185.961 123.351 cv
185.868 123.387 185.775 123.389 185.682 123.357 cv
182.401 122.219 li
182.305 122.496 182.246 122.754 182.225 122.995 cv
182.204 123.236 182.231 123.458 182.305 123.662 cv
182.38 123.866 182.507 124.046 182.685 124.203 cv
182.863 124.36 183.102 124.49 183.403 124.594 cv
183.64 124.677 183.858 124.731 184.057 124.756 cv
184.256 124.782 184.431 124.794 184.583 124.793 cv
184.736 124.792 184.862 124.787 184.962 124.779 cv
185.063 124.77 185.136 124.773 185.18 124.789 cv
185.243 124.832 li
185.27 124.907 li
185.258 125.024 li
185.207 125.195 li
185.159 125.318 li
185.112 125.407 li
185.059 125.472 li
184.987 125.519 li
184.959 125.532 184.888 125.544 184.772 125.556 cv
184.657 125.568 184.512 125.568 184.338 125.557 cv
184.164 125.547 183.966 125.523 183.746 125.485 cv
183.525 125.448 183.296 125.388 183.06 125.307 cv
182.651 125.164 182.312 124.983 182.043 124.762 cv
181.775 124.54 181.574 124.281 181.442 123.983 cv
181.31 123.684 181.249 123.347 181.259 122.97 cv
181.27 122.594 181.354 122.18 181.51 121.73 cv
181.658 121.302 181.847 120.936 182.076 120.633 cv
182.305 120.33 182.565 120.096 182.856 119.93 cv
183.147 119.765 183.463 119.669 183.802 119.644 cv
184.141 119.619 184.494 119.67 184.859 119.797 cv
185.25 119.933 185.562 120.111 185.793 120.332 cv
186.025 120.552 186.192 120.8 186.296 121.073 cv
186.399 121.347 186.443 121.641 186.427 121.956 cv
186.411 122.271 186.346 122.591 186.234 122.915 cv
cp
185.351 122.492 mo
185.529 122.016 185.552 121.602 185.422 121.251 cv
185.293 120.9 185.007 120.648 184.565 120.495 cv
184.338 120.416 184.125 120.39 183.925 120.415 cv
183.724 120.441 183.542 120.504 183.379 120.604 cv
183.215 120.705 183.069 120.837 182.941 121.002 cv
182.814 121.166 182.711 121.349 182.633 121.549 cv
cp
190.945 127.768 mo
190.897 127.835 li
190.807 127.863 li
190.657 127.848 li
190.431 127.782 li
190.339 127.75 190.265 127.72 190.208 127.692 cv
190.081 127.611 li
190.028 127.534 li
190.031 127.451 li
191.043 124.534 li
191.142 124.25 191.199 124.013 191.215 123.824 cv
191.231 123.635 191.218 123.463 191.177 123.309 cv
191.135 123.154 191.059 123.02 190.947 122.906 cv
190.835 122.793 190.691 122.706 190.514 122.645 cv
190.285 122.565 190.028 122.567 189.743 122.65 cv
189.458 122.733 189.135 122.888 188.775 123.115 cv
187.568 126.597 li
187.52 126.664 li
187.43 126.692 li
187.28 126.677 li
187.218 126.664 187.141 126.641 187.049 126.609 cv
186.831 126.521 li
186.702 126.439 li
186.648 126.362 li
186.655 126.28 li
188.382 121.298 li
188.425 121.229 li
188.51 121.196 li
188.649 121.207 li
188.857 121.27 li
189.056 121.348 li
189.169 121.425 li
189.214 121.502 li
189.207 121.584 li
188.979 122.243 li
189.368 122.026 189.727 121.893 190.056 121.844 cv
190.386 121.795 190.692 121.82 190.976 121.918 cv
191.309 122.033 191.569 122.187 191.757 122.378 cv
191.945 122.569 192.076 122.783 192.151 123.02 cv
192.226 123.257 192.25 123.512 192.223 123.786 cv
192.197 124.06 192.122 124.374 191.999 124.729 cv
cp
196.205 128.073 mo
196.117 128.327 195.991 128.538 195.828 128.705 cv
195.664 128.871 195.472 128.993 195.252 129.069 cv
195.031 129.146 194.788 129.177 194.524 129.164 cv
194.26 129.151 193.984 129.095 193.696 128.995 cv
193.519 128.933 193.355 128.861 193.204 128.778 cv
193.053 128.694 192.921 128.609 192.808 128.523 cv
192.696 128.436 192.603 128.354 192.531 128.278 cv
192.38 128.086 li
192.345 127.9 li
192.35 127.827 192.372 127.734 192.412 127.619 cv
192.484 127.446 li
192.552 127.339 li
192.621 127.292 li
192.697 127.296 li
192.851 127.434 li
192.913 127.511 192.992 127.599 193.088 127.699 cv
193.184 127.798 193.302 127.9 193.444 128.005 cv
193.585 128.11 193.759 128.198 193.966 128.27 cv
194.121 128.324 194.267 128.356 194.404 128.366 cv
194.541 128.376 194.667 128.365 194.781 128.332 cv
194.896 128.3 194.996 128.242 195.08 128.16 cv
195.164 128.078 195.23 127.968 195.278 127.832 cv
195.326 127.691 195.331 127.561 195.293 127.44 cv
195.254 127.319 195.188 127.201 195.096 127.086 cv
195.003 126.972 194.893 126.86 194.765 126.752 cv
194.638 126.643 194.506 126.53 194.371 126.413 cv
194.236 126.296 194.107 126.172 193.985 126.041 cv
193.863 125.91 193.763 125.766 193.685 125.611 cv
193.606 125.456 193.559 125.286 193.542 125.102 cv
193.525 124.919 193.555 124.716 193.632 124.495 cv
193.699 124.299 193.802 124.125 193.94 123.972 cv
194.078 123.82 194.246 123.702 194.444 123.62 cv
194.642 123.538 194.868 123.495 195.123 123.493 cv
195.378 123.49 195.657 123.541 195.96 123.646 cv
196.093 123.692 196.222 123.75 196.347 123.818 cv
196.472 123.886 196.583 123.955 196.678 124.026 cv
196.774 124.096 196.852 124.164 196.915 124.229 cv
197.051 124.391 li
197.101 124.495 li
197.103 124.579 li
197.084 124.687 li
197.041 124.84 li
196.976 125 li
196.909 125.104 li
196.84 125.151 li
196.772 125.15 li
196.649 125.039 li
196.451 124.824 li
196.367 124.744 196.265 124.66 196.144 124.572 cv
196.024 124.485 195.877 124.411 195.703 124.351 cv
195.548 124.297 195.405 124.268 195.275 124.262 cv
195.145 124.256 195.031 124.272 194.933 124.31 cv
194.835 124.349 194.751 124.405 194.681 124.481 cv
194.612 124.556 194.559 124.645 194.524 124.748 cv
194.474 124.892 194.469 125.026 194.509 125.149 cv
194.548 125.273 194.615 125.392 194.707 125.507 cv
194.8 125.621 194.911 125.734 195.042 125.846 cv
195.173 125.958 195.306 126.072 195.441 126.189 cv
195.576 126.306 195.707 126.43 195.833 126.561 cv
195.959 126.691 196.062 126.832 196.142 126.984 cv
196.222 127.136 196.271 127.302 196.289 127.482 cv
196.307 127.661 196.279 127.858 196.205 128.073 cv
197.942 130.194 mo
197.894 130.261 li
197.804 130.289 li
197.654 130.274 li
197.592 130.261 197.515 130.239 197.423 130.207 cv
197.205 130.119 li
197.076 130.037 li
197.022 129.959 li
197.028 129.878 li
198.756 124.895 li
198.801 124.83 li
198.892 124.8 li
199.044 124.815 li
199.27 124.881 li
199.362 124.913 199.436 124.943 199.493 124.971 cv
199.62 125.052 li
199.672 125.132 li
199.67 125.212 li
cp
200.358 123.565 mo
200.284 123.78 200.193 123.911 200.085 123.961 cv
199.977 124.01 199.814 123.997 199.596 123.921 cv
199.382 123.847 199.249 123.758 199.196 123.655 cv
199.142 123.552 199.152 123.395 199.225 123.185 cv
199.3 122.971 199.391 122.839 199.499 122.79 cv
199.607 122.74 199.77 122.754 199.987 122.829 cv
200.202 122.903 200.335 122.992 200.388 123.095 cv
200.441 123.198 200.431 123.355 200.358 123.565 cv
205.153 129.842 mo
205.012 130.248 204.829 130.603 204.604 130.907 cv
204.378 131.212 204.116 131.451 203.818 131.624 cv
203.52 131.798 203.188 131.899 202.821 131.926 cv
202.453 131.954 202.059 131.895 201.639 131.749 cv
201.229 131.607 200.893 131.422 200.631 131.195 cv
200.369 130.968 200.176 130.702 200.054 130.4 cv
199.932 130.097 199.878 129.762 199.894 129.395 cv
199.909 129.028 199.99 128.635 200.136 128.214 cv
200.277 127.808 200.459 127.453 200.682 127.148 cv
200.906 126.843 201.167 126.603 201.465 126.43 cv
201.763 126.256 202.094 126.156 202.459 126.13 cv
202.824 126.103 203.218 126.163 203.643 126.311 cv
204.052 126.453 204.388 126.637 204.65 126.865 cv
204.913 127.092 205.105 127.357 205.227 127.66 cv
205.35 127.963 205.404 128.298 205.39 128.666 cv
205.377 129.033 205.297 129.425 205.153 129.842 cv
204.185 129.575 mo
204.278 129.305 204.342 129.042 204.375 128.785 cv
204.407 128.527 204.398 128.288 204.345 128.067 cv
204.292 127.846 204.185 127.649 204.024 127.476 cv
203.863 127.302 203.636 127.164 203.342 127.062 cv
203.07 126.968 202.82 126.935 202.591 126.963 cv
202.362 126.991 202.154 127.071 201.966 127.202 cv
201.779 127.334 201.613 127.509 201.468 127.727 cv
201.324 127.946 201.202 128.197 201.104 128.481 cv
201.009 128.754 200.945 129.02 200.912 129.277 cv
200.879 129.534 200.89 129.773 200.946 129.993 cv
201.001 130.212 201.109 130.409 201.27 130.582 cv
201.431 130.756 201.658 130.894 201.953 130.996 cv
202.221 131.089 202.47 131.122 202.701 131.094 cv
202.931 131.067 203.14 130.988 203.327 130.859 cv
203.514 130.729 203.678 130.555 203.821 130.335 cv
203.964 130.116 204.085 129.863 204.185 129.575 cv
209.879 134.334 mo
209.831 134.401 li
209.74 134.428 li
209.591 134.414 li
209.365 134.348 li
209.273 134.316 209.199 134.286 209.142 134.258 cv
209.015 134.177 li
208.962 134.099 li
208.965 134.017 li
209.977 131.1 li
210.076 130.815 210.133 130.579 210.149 130.39 cv
210.164 130.201 210.152 130.029 210.11 129.874 cv
210.069 129.72 209.992 129.585 209.881 129.472 cv
209.769 129.359 209.625 129.272 209.448 129.21 cv
209.219 129.131 208.962 129.133 208.677 129.216 cv
208.392 129.299 208.069 129.454 207.709 129.681 cv
206.502 133.163 li
206.454 133.23 li
206.364 133.257 li
206.214 133.243 li
206.152 133.23 206.075 133.207 205.983 133.175 cv
205.765 133.087 li
205.636 133.005 li
205.582 132.927 li
205.588 132.846 li
207.316 127.864 li
207.359 127.795 li
207.444 127.762 li
207.583 127.773 li
207.791 127.836 li
207.99 127.914 li
208.103 127.991 li
208.148 128.068 li
208.141 128.15 li
207.913 128.808 li
208.302 128.592 208.661 128.459 208.99 128.41 cv
209.319 128.361 209.626 128.386 209.91 128.484 cv
210.242 128.599 210.503 128.753 210.69 128.944 cv
210.878 129.135 211.01 129.349 211.085 129.586 cv
211.16 129.823 211.184 130.078 211.157 130.352 cv
211.13 130.626 211.056 130.94 210.933 131.294 cv
cp
219.665 134.875 mo
219.524 135.281 219.341 135.636 219.116 135.94 cv
218.89 136.244 218.629 136.483 218.331 136.657 cv
218.033 136.831 217.7 136.931 217.333 136.959 cv
216.966 136.987 216.572 136.928 216.151 136.782 cv
215.741 136.64 215.405 136.455 215.143 136.227 cv
214.881 136 214.688 135.735 214.566 135.432 cv
214.444 135.129 214.39 134.794 214.406 134.428 cv
214.421 134.061 214.502 133.667 214.648 133.246 cv
214.789 132.841 214.971 132.485 215.195 132.18 cv
215.418 131.875 215.679 131.636 215.977 131.462 cv
216.275 131.289 216.606 131.188 216.971 131.162 cv
217.336 131.136 217.73 131.196 218.155 131.343 cv
218.564 131.485 218.9 131.67 219.163 131.897 cv
219.425 132.125 219.617 132.39 219.739 132.693 cv
219.862 132.996 219.916 133.331 219.902 133.698 cv
219.889 134.065 219.81 134.458 219.665 134.875 cv
218.697 134.607 mo
218.791 134.338 218.854 134.074 218.887 133.817 cv
218.92 133.56 218.91 133.321 218.857 133.1 cv
218.804 132.879 218.697 132.682 218.537 132.508 cv
218.376 132.334 218.148 132.197 217.854 132.095 cv
217.582 132 217.332 131.967 217.103 131.995 cv
216.874 132.024 216.666 132.103 216.479 132.235 cv
216.291 132.366 216.125 132.541 215.981 132.76 cv
215.836 132.978 215.714 133.23 215.616 133.514 cv
215.521 133.787 215.457 134.052 215.424 134.31 cv
215.392 134.567 215.403 134.805 215.458 135.025 cv
215.513 135.245 215.621 135.441 215.782 135.615 cv
215.943 135.789 216.171 135.926 216.465 136.028 cv
216.733 136.121 216.982 136.154 217.213 136.127 cv
217.444 136.099 217.652 136.021 217.839 135.891 cv
218.026 135.761 218.191 135.587 218.333 135.368 cv
218.476 135.149 218.597 134.895 218.697 134.607 cv
225.268 131.794 mo
225.198 131.959 li
225.138 132.053 li
225.084 132.093 li
225.023 132.088 li
224.935 132.029 li
224.813 131.925 li
224.636 131.801 li
224.566 131.759 224.481 131.72 224.382 131.685 cv
224.245 131.638 224.121 131.62 224.01 131.631 cv
223.898 131.642 223.797 131.684 223.705 131.758 cv
223.614 131.831 223.529 131.938 223.451 132.079 cv
223.374 132.219 223.298 132.397 223.223 132.611 cv
223.035 133.153 li
224.148 133.539 li
224.216 133.585 li
224.248 133.67 li
224.246 133.803 li
224.198 133.985 li
224.152 134.117 224.102 134.208 224.049 134.255 cv
223.885 134.298 li
222.772 133.912 li
221.258 138.28 li
221.21 138.347 li
221.117 138.373 li
220.964 138.358 li
220.739 138.292 li
220.521 138.204 li
220.391 138.122 li
220.335 138.043 li
220.339 137.961 li
221.853 133.593 li
221.15 133.349 li
221.048 133.215 li
221.039 133.145 221.058 133.044 221.104 132.911 cv
221.176 132.738 li
221.251 132.631 li
221.329 132.583 li
221.413 132.591 li
222.116 132.835 li
222.295 132.32 li
222.415 131.973 222.551 131.686 222.702 131.459 cv
222.853 131.233 223.022 131.063 223.21 130.95 cv
223.398 130.838 223.606 130.778 223.833 130.773 cv
224.06 130.767 224.311 130.811 224.584 130.906 cv
224.713 130.951 224.834 131.006 224.948 131.072 cv
225.061 131.139 225.146 131.197 225.203 131.248 cv
225.31 131.369 li
225.336 131.474 li
225.322 131.611 li
225.268 131.794 li
f
233.373 134.344 mo
231.567 135.063 li
231.389 134.63 li
232.541 134.167 li
229.164 132.996 li
229.345 132.476 li
232.722 133.647 li
232.103 132.57 li
232.511 132.34 li
233.484 134.023 li
cp
f
229.159 136.74 mo
229.691 136.375 230.164 136.135 230.577 136.022 cv
230.99 135.909 231.369 135.912 231.712 136.031 cv
231.981 136.125 232.199 136.223 232.366 136.327 cv
231.67 137.474 li
231.1 137.277 li
231.132 137.114 231.142 136.983 231.131 136.884 cv
231.12 136.785 231.092 136.71 231.048 136.657 cv
230.855 136.534 li
230.722 136.488 230.558 136.495 230.361 136.555 cv
230.165 136.615 229.926 136.733 229.646 136.909 cv
229.366 137.085 229.129 137.265 228.935 137.45 cv
228.74 137.635 228.544 137.887 228.346 138.207 cv
226.989 140.422 li
226.031 140.09 li
228.051 136.858 li
228.18 136.655 228.272 136.495 228.33 136.378 cv
228.386 136.261 228.429 136.162 228.457 136.081 cv
228.508 135.934 228.522 135.818 228.497 135.735 cv
228.472 135.652 228.408 135.593 228.304 135.557 cv
228.19 135.517 228.053 135.522 227.893 135.572 cv
227.733 135.622 227.499 135.732 227.192 135.903 cv
226.984 135.483 li
227.446 135.247 227.818 135.093 228.098 135.023 cv
228.379 134.953 228.658 134.966 228.935 135.062 cv
229.167 135.143 229.324 135.283 229.406 135.483 cv
229.487 135.683 229.485 135.906 229.4 136.154 cv
229.336 136.338 229.235 136.516 229.097 136.687 cv
cp
f
.48 lw
57.3641 52.615 mo
101.463 81.051 li
@
119.222 88.135 mo
94.5642 121.869 li
@
%ADOBeginSubsetFont: ONKBAA+Calibri AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.
systemdict begin
UBYDAA+Calibri dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/a <1C60D8A8C9B75CBB53379352952B97D633633CE49B1F5650B8155AFDFA57
F94D359804093E4912F3B89577762AB5877203F1CDAD240C521DE74183EDA105
01967DB6487C182138B12C453C5DB9629F7EF021028117511EFEAB941896E32D
9CC68D6E66540771999A4E30C4826A52D7536EDDF7E00016C895CE43408B44BE
33E2D9A6163827E05AB8B1144BC909A74F6D7828DE6E08164A25E320920E3540
20A41D59E9E3B008A20EC107F9E18745DE21F9AF293EB0F319B529D840D8BA93
19522EDDCACA13336C059581181C082BF0D7F4117FAEB429D871E099AEE4394F
ED2FB3A1C712D1799055BA832AD846B95DA8BB4E63B103C908FA309FAA3B7814
0CE2A22AE06B2A1EA5BD3AA13DD1ED75DA4AD37493780FE662EF5D1B53C4AF41
845C0C77655CE94F0C9DEBE29248A1EAAF3A6EA79D5BB5C090457B818DD62F70
E197CEA94F90229AB4FD685A1ADB5E4E4C1DBDB28AA3854323EE2FD22692EC70> |-
/c <1C60D8A8C9B714A578818061920CBD3BB0F0FEC7EB28869C0269DBFC0262
5554E339FA8F23FF202BF6BBA51F73386176CF41E41162B391BD65C46864E1ED
BE38C4A175836382F89D1B282918F37F6A98A1C310371E84DC05CA4D214BBF40
D0904F28663CAA2B1AF41B75D4680E3731D792C10C395648F8CE6283B6D2EA4E
A25EB0077385CC26E37C0D4F9F091C8BC196661820383DC1CFC26D318A92B139
8AE8D24532A475AF0A93A6DC660BFF9F07C9678F9C3412071B0DAC612FC7D6B5
FAE3214E7C7AB18E3145411FCE0CA8B75D2C8C25C05252A375257E1693A2B9D1
1EE377C95BA1746CBCD896C9D8284A96EC1B8BEF12D6460B6828EC26350E91CC
593B47372BD95FFBF8C2322BFC435A5494ED398AAAE3E6E4293369CDCFAC0147
8225F7C60BA6A2722907E6FF92F4B9457F52836FAB37F27C55593B43AB457EA2
91D6DE23> |-
/f <1C60D8A8C9B83BB8632FB1D3D91BD66E5512F6DD2CCB59074315803E2F43
0B096626F50C9126DF15B1D22935F28B97AB5D3B7DB8B1B8EC17F9868DFC8B9B
A6A909CA8727D3C9D8FCF13C3B6D5F4F33EA07DFD158F20416D4C6EEC8FD3EF1
4FC86346A94355FA1C2B6FA55C0124FFA9705858D4628EE39DA0E3A156A386DF
00613D8189EFFC0AEADC5BE3915D9C022BA6356303A46539775608C62B3D24CB
372AF4E663162E7C4ACC81D2F2C5F206BB702A5D73C1A974C0BFD7875757B79A
A73010AE51501D97B980E0F2ACE1EF1ED3F60A9C6E02B8D29057E3D98A685003
06E46C9A2B914F56A55773A150BF63B33B5E351FC714462135973FE682DBCBC0
C1B38B7A71A2F4C684D75344384C54C140B13A70313E2F4EDF68E127B4C55F26
525A530E7BB82AEC944EFDC27B6BB93FA6C499E5069AA3B6387EF0576DB7B6BE
E15BB0B269E8ACB562> |-
/m <1C60D8A8C9B6D24F7D3842850F4949AEB6B9100F2B78F4C8889450CED823
786FEB32A1B63E88AD56EE02413123CB64791A93EF92133FE4595DA2691E3035
F9F72C6031AE554C5E100D6D83A5170AEAC660F3CD2D2E423C32E393EEDCE69B
38CE6373F6B6777FFB71A30474298882FF21A6474EA00B23874CB701D4949FDA
B683EF52B401CF01FBFB5320858391C36D1B0A5131B6AD88B31FBA5AF7369B53
8683192205F94F973772FC0D1A80750F5CA55E65F4A8760D9FFB5A3E462EB76A
F894987A3AB123C31C6F61A2DE381C11A73194BB9FA663DEB4E0E047953FDCCB
40254C512459EA81EABD29705BEDA8917220B4CD736962EC932D0F91B2A5DC80
8623631D3854D7B6297589945BF94293721596CC4C62C71F5A8040654672D59A
8C73FC39F2C6919502A1FD8EB49A6BB72701DD42520B2F6CD223AC11A22A5CED
8614ABBE01C624D0AED39BB3AE4E8B513F61C37C6BA440280E139545B39C87A0
6867746DDC81F39BACA8E048A7276011988ACE081223D841AEA6DE2418F28BD5
9A30A454BE8DAE3786DDCC7D1BEEFB13E445F279EE7EA8CB61C194C9B25497E6
925AF3BEE4F64F897F4A57BD4C4A1E06EBC8223C35049061> |-
/n <1C60D8A8C9B78E05EAADB0123115B3BD5BA83FAABE276A1BF5A23DB55CF4
C30D8A20FB7C70B167834EB1FCB2A451DA55CBA774B9C40CA48F3B7AD8E41B3F
0C2665E2AF85619561E070ABE3E4EFEC9983825210D2A0599E48D162F3133798
2CE0D843D2D41F1F7924A343E37439CC75937984C88A0080C28B8BFBFB8F444A
FA11CBAA4BCF4C8D3087770F88F26B0A8B30E46AE29C6BF9720949C50E19D624
8BB58DE961D63651843F9B3B8EE9AA75CDE28D1F95D7703116FE7AA23945B580
8B97F9947888D114BE2523F872057145410E975A2CA83D430B49A7CAE2661901
2C2444BEBF6DC1397EFC38FADD0435CE6D4A1478744BC983827B31CF502C4487
AF1E48BBC2EB6153C1C5367B96A212BCD3FEE3B9DEC12C4E> |-
/o <1C60D8A8C9B78C66ECF3075BCC0F7D87F2E9EA9E473D66D53E6D1735C12E
AC0562A2F6FB428E7F7051A3A7B2D4CA6ED90F77808579359B7E539B5388F6F5
4555E1422B5F329989100C1CD5239E87FECD85E14E914ADC27391A1F5624B31E
E69A68B9016D73D6A01A100E004523AC53318A2FC2260E74BA80D4ABD1433EC6
7800CC9F77763DCF8156EA5CA478ABF1FAF7864EAD55939BE7FA4A9E8660CE98
DDE8CBC35F3FFF4E5C2DA4A292CE30D82057E70A8562AFB17C90FC331A4C46B4
8C7BBCED55DB7F94D559D534C59FF211B5A85F0207876BD8D6B2C7BBBC06964A
16F72BBAE841F001B71209E6C81DC64817ADE625E8FF> |-
/t <1C60D8A8C9B81D89610FFBFD2F87712D18AB3F2201A6640C86A2CD8B533C
9E9613B748962BD3321D998A13FF4A410946A55D4AE3CDBD806BF0BBD38F8435
DE762245288A30426FF012946D0E2E36D4EBD7E81C44D06926164FB6F91AA67E
EAF9AC4BC77C470E117D4634F7F90C1771292F30769DD575DD5B3F0D104730DE
CDCF41E7D59747B6A2D0EF143B06FA6BBA4F9E744BD6E4827C627C6619571415
1061BE64BA6B45A36E91B80557E1CF613697CA2B60F02790B7CBE3BBB5ABEC19
0F88D2844D8139B7D141D834706D11BA3108576C531B823977B908AC9FF80DF3
22060C351BA43A8EA770319D1AF8085E209B940EDEE1B85419EF87F01EED1C4E
0307B2BC95989AC0998A9EA8A0DFB99539E7D0B836F4EB9E9D6147AFB55082A1
E63F64D57A8E7F63465BA308FA03AEB2787221627AF8F99523DB260C> |-
/y <1C60D8A8C9B776A06C625D9575F6DBFFEE93EC1CB9A335325BD9E365428E
EA1BD5B7A305D96437BF24D2E59BF0DFE2360EDCA01120D4DA769624265DE986
6EA970971BD84B20E81D769B1F13D7A21674FB5E8C4844518680BB1DE710B743
8090302965C932285C6A137B1923CFCED74D1C71B686BDF1263BE348B2F06F53
4EDA8A2856376F820F03A76FD878686946B3B179B9CD823AA55541A535E0CCC6
D2D21B3D6A73597DDD43BBEFD829B55A26664F2F8221FA6814449CF6D0CFA134
92A2A7CF82E9D18F6E0413> |-
systemdict /gcheck known {setglobal} if end {end} if
end
UBYDAA+Calibri /Encoding get
dup 97 /a put
dup 99 /c put
dup 102 /f put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 116 /t put
dup 121 /y put
pop
%ADOEndSubsetFont
/UBYDAA+Calibri*1 
[97{/.notdef}rp /a /.notdef /c /.notdef /e /f 4{/.notdef}rp 
/k /.notdef /m /n /o 2{/.notdef}rp /r /s 
/t 2{/.notdef}rp /w /.notdef /y 134{/.notdef}rp]
UBYDAA+Calibri nf
UBYDAA+Calibri*1 [12 0 0 -12 0 0 ]msf
7.05626 46.7391 mo
(styrofoam)
[4.56007 4.02008 5.46004 4.01999 6.29991 3.41992 6.29991 5.76004 0 ]xsh
7.05626 61.1391 mo
(connector)
[4.98006 6.29991 6.29993 6.29993 6.00002 5.10004 3.90009 6.29993 0 ]xsh
grestore
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
[/CSD [/0 ]]
] del_res
/UBYCZZ+CambriaMath-Identity-H uf
/UBYCZZ+CambriaMath /CIDFont ur
/UBYDAA+Calibri*1 uf
/UBYDAA+Calibri uf
/ONKBAA+Calibri uf
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
